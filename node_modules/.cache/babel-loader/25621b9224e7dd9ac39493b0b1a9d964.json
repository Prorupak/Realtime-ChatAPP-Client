{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.URL = exports.TEXT = exports.NL = exports.EMAIL = exports.MAILTOEMAIL = exports.Base = undefined;\n\nvar _createTokenClass = require('./create-token-class');\n\nvar _class = require('../../utils/class');\n\nvar _text = require('./text');\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n// Is the given token a valid domain token?\n// Should nums be included here?\n\n\nfunction isDomainToken(token) {\n  return token instanceof _text.DOMAIN || token instanceof _text.TLD;\n}\n/**\n\tAbstract class used for manufacturing tokens of text tokens. That is rather\n\tthan the value for a token being a small string of text, it's value an array\n\tof text tokens.\n\n\tUsed for grouping together URLs, emails, hashtags, and other potential\n\tcreations.\n\n\t@class MultiToken\n\t@abstract\n*/\n\n\nvar MultiToken = (0, _createTokenClass.createTokenClass)();\nMultiToken.prototype = {\n  /**\n  \tString representing the type for this token\n  \t@property type\n  \t@default 'TOKEN'\n  */\n  type: 'token',\n\n  /**\n  \tIs this multitoken a link?\n  \t@property isLink\n  \t@default false\n  */\n  isLink: false,\n\n  /**\n  \tReturn the string this token represents.\n  \t@method toString\n  \t@return {String}\n  */\n  toString: function toString() {\n    var result = [];\n\n    for (var i = 0; i < this.v.length; i++) {\n      result.push(this.v[i].toString());\n    }\n\n    return result.join('');\n  },\n\n  /**\n  \tWhat should the value for this token be in the `href` HTML attribute?\n  \tReturns the `.toString` value by default.\n  \t\t@method toHref\n  \t@return {String}\n  */\n  toHref: function toHref() {\n    return this.toString();\n  },\n\n  /**\n  \tReturns a hash of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {String} [protocol] `'http'` by default\n  \t@return {Object}\n  */\n  toObject: function toObject() {\n    var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n    return {\n      type: this.type,\n      value: this.toString(),\n      href: this.toHref(protocol)\n    };\n  }\n};\n/**\n\tRepresents an arbitrarily mailto email address with the prefix included\n\t@class MAILTO\n\t@extends MultiToken\n*/\n\nvar MAILTOEMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'email',\n  isLink: true\n});\n/**\n\tRepresents a list of tokens making up a valid email address\n\t@class EMAIL\n\t@extends MultiToken\n*/\n\nvar EMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'email',\n  isLink: true,\n  toHref: function toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n/**\n\tRepresents some plain text\n\t@class TEXT\n\t@extends MultiToken\n*/\n\nvar TEXT = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'text'\n});\n/**\n\tMulti-linebreak token - represents a line break\n\t@class NL\n\t@extends MultiToken\n*/\n\nvar NL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'nl'\n});\n/**\n\tRepresents a list of tokens making up a valid URL\n\t@class URL\n\t@extends MultiToken\n*/\n\nvar URL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'url',\n  isLink: true,\n\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@method href\n  \t@param {String} protocol\n  \t@return {String}\n  */\n  toHref: function toHref() {\n    var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n    var hasProtocol = false;\n    var hasSlashSlash = false;\n    var tokens = this.v;\n    var result = [];\n    var i = 0; // Make the first part of the domain lowercase\n    // Lowercase protocol\n\n    while (tokens[i] instanceof _text.PROTOCOL) {\n      hasProtocol = true;\n      result.push(tokens[i].toString().toLowerCase());\n      i++;\n    } // Skip slash-slash\n\n\n    while (tokens[i] instanceof _text.SLASH) {\n      hasSlashSlash = true;\n      result.push(tokens[i].toString());\n      i++;\n    } // Lowercase all other characters in the domain\n\n\n    while (isDomainToken(tokens[i])) {\n      result.push(tokens[i].toString().toLowerCase());\n      i++;\n    } // Leave all other characters as they were written\n\n\n    for (; i < tokens.length; i++) {\n      result.push(tokens[i].toString());\n    }\n\n    result = result.join('');\n\n    if (!(hasProtocol || hasSlashSlash)) {\n      result = protocol + '://' + result;\n    }\n\n    return result;\n  },\n  hasProtocol: function hasProtocol() {\n    return this.v[0] instanceof _text.PROTOCOL;\n  }\n});\nexports.Base = MultiToken;\nexports.MAILTOEMAIL = MAILTOEMAIL;\nexports.EMAIL = EMAIL;\nexports.NL = NL;\nexports.TEXT = TEXT;\nexports.URL = URL;","map":{"version":3,"sources":["/home/rupak/Desktop/Project/Chat Application/chatApp_client/node_modules/linkifyjs/lib/linkify/core/tokens/multi.js"],"names":["exports","__esModule","URL","TEXT","NL","EMAIL","MAILTOEMAIL","Base","undefined","_createTokenClass","require","_class","_text","isDomainToken","token","DOMAIN","TLD","MultiToken","createTokenClass","prototype","type","isLink","toString","result","i","v","length","push","join","toHref","toObject","protocol","arguments","value","href","inherits","hasProtocol","hasSlashSlash","tokens","PROTOCOL","toLowerCase","SLASH"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.URL = exports.TEXT = exports.NL = exports.EMAIL = exports.MAILTOEMAIL = exports.Base = undefined;\n\nvar _createTokenClass = require('./create-token-class');\n\nvar _class = require('../../utils/class');\n\nvar _text = require('./text');\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n// Is the given token a valid domain token?\n// Should nums be included here?\nfunction isDomainToken(token) {\n\treturn token instanceof _text.DOMAIN || token instanceof _text.TLD;\n}\n\n/**\n\tAbstract class used for manufacturing tokens of text tokens. That is rather\n\tthan the value for a token being a small string of text, it's value an array\n\tof text tokens.\n\n\tUsed for grouping together URLs, emails, hashtags, and other potential\n\tcreations.\n\n\t@class MultiToken\n\t@abstract\n*/\nvar MultiToken = (0, _createTokenClass.createTokenClass)();\n\nMultiToken.prototype = {\n\t/**\n \tString representing the type for this token\n \t@property type\n \t@default 'TOKEN'\n */\n\ttype: 'token',\n\n\t/**\n \tIs this multitoken a link?\n \t@property isLink\n \t@default false\n */\n\tisLink: false,\n\n\t/**\n \tReturn the string this token represents.\n \t@method toString\n \t@return {String}\n */\n\ttoString: function toString() {\n\t\tvar result = [];\n\t\tfor (var i = 0; i < this.v.length; i++) {\n\t\t\tresult.push(this.v[i].toString());\n\t\t}\n\t\treturn result.join('');\n\t},\n\n\n\t/**\n \tWhat should the value for this token be in the `href` HTML attribute?\n \tReturns the `.toString` value by default.\n \t\t@method toHref\n \t@return {String}\n */\n\ttoHref: function toHref() {\n\t\treturn this.toString();\n\t},\n\n\n\t/**\n \tReturns a hash of relevant values for this token, which includes keys\n \t* type - Kind of token ('url', 'email', etc.)\n \t* value - Original text\n \t* href - The value that should be added to the anchor tag's href\n \t\tattribute\n \t\t@method toObject\n \t@param {String} [protocol] `'http'` by default\n \t@return {Object}\n */\n\ttoObject: function toObject() {\n\t\tvar protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tvalue: this.toString(),\n\t\t\thref: this.toHref(protocol)\n\t\t};\n\t}\n};\n\n/**\n\tRepresents an arbitrarily mailto email address with the prefix included\n\t@class MAILTO\n\t@extends MultiToken\n*/\nvar MAILTOEMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n\ttype: 'email',\n\tisLink: true\n});\n\n/**\n\tRepresents a list of tokens making up a valid email address\n\t@class EMAIL\n\t@extends MultiToken\n*/\nvar EMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n\ttype: 'email',\n\tisLink: true,\n\ttoHref: function toHref() {\n\t\treturn 'mailto:' + this.toString();\n\t}\n});\n\n/**\n\tRepresents some plain text\n\t@class TEXT\n\t@extends MultiToken\n*/\nvar TEXT = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), { type: 'text' });\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class NL\n\t@extends MultiToken\n*/\nvar NL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), { type: 'nl' });\n\n/**\n\tRepresents a list of tokens making up a valid URL\n\t@class URL\n\t@extends MultiToken\n*/\nvar URL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n\ttype: 'url',\n\tisLink: true,\n\n\t/**\n \tLowercases relevant parts of the domain and adds the protocol if\n \trequired. Note that this will not escape unsafe HTML characters in the\n \tURL.\n \t\t@method href\n \t@param {String} protocol\n \t@return {String}\n */\n\ttoHref: function toHref() {\n\t\tvar protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n\n\t\tvar hasProtocol = false;\n\t\tvar hasSlashSlash = false;\n\t\tvar tokens = this.v;\n\t\tvar result = [];\n\t\tvar i = 0;\n\n\t\t// Make the first part of the domain lowercase\n\t\t// Lowercase protocol\n\t\twhile (tokens[i] instanceof _text.PROTOCOL) {\n\t\t\thasProtocol = true;\n\t\t\tresult.push(tokens[i].toString().toLowerCase());\n\t\t\ti++;\n\t\t}\n\n\t\t// Skip slash-slash\n\t\twhile (tokens[i] instanceof _text.SLASH) {\n\t\t\thasSlashSlash = true;\n\t\t\tresult.push(tokens[i].toString());\n\t\t\ti++;\n\t\t}\n\n\t\t// Lowercase all other characters in the domain\n\t\twhile (isDomainToken(tokens[i])) {\n\t\t\tresult.push(tokens[i].toString().toLowerCase());\n\t\t\ti++;\n\t\t}\n\n\t\t// Leave all other characters as they were written\n\t\tfor (; i < tokens.length; i++) {\n\t\t\tresult.push(tokens[i].toString());\n\t\t}\n\n\t\tresult = result.join('');\n\n\t\tif (!(hasProtocol || hasSlashSlash)) {\n\t\t\tresult = protocol + '://' + result;\n\t\t}\n\n\t\treturn result;\n\t},\n\thasProtocol: function hasProtocol() {\n\t\treturn this.v[0] instanceof _text.PROTOCOL;\n\t}\n});\n\nexports.Base = MultiToken;\nexports.MAILTOEMAIL = MAILTOEMAIL;\nexports.EMAIL = EMAIL;\nexports.NL = NL;\nexports.TEXT = TEXT;\nexports.URL = URL;"]},"metadata":{},"sourceType":"script"}