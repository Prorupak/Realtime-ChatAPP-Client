{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/* eslint-disable no-continue */\n\n\nimport React, { useMemo } from 'react';\nimport { useLastReadData } from './useLastReadData';\nimport { getLastReceived } from '../utils';\nimport { DateSeparator as DefaultDateSeparator } from '../../DateSeparator/DateSeparator';\nimport { EventComponent } from '../../EventComponent/EventComponent';\nimport { Message } from '../../Message';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useComponentContext } from '../../../context/ComponentContext';\nimport { isDate } from '../../../context/TranslationContext';\nexport var useMessageListElements = function useMessageListElements(props) {\n  var enrichedMessages = props.enrichedMessages,\n      internalMessageProps = props.internalMessageProps,\n      messageGroupStyles = props.messageGroupStyles,\n      onMessageLoadCaptured = props.onMessageLoadCaptured,\n      read = props.read,\n      returnAllReadData = props.returnAllReadData,\n      threadList = props.threadList;\n\n  var _a = useChatContext('useMessageListElements'),\n      client = _a.client,\n      customClasses = _a.customClasses;\n\n  var _b = useComponentContext('useMessageListElements'),\n      _c = _b.DateSeparator,\n      DateSeparator = _c === void 0 ? DefaultDateSeparator : _c,\n      HeaderComponent = _b.HeaderComponent,\n      _d = _b.MessageSystem,\n      MessageSystem = _d === void 0 ? EventComponent : _d; // get the readData, but only for messages submitted by the user themselves\n\n\n  var readData = useLastReadData({\n    messages: enrichedMessages,\n    read: read,\n    returnAllReadData: returnAllReadData,\n    userID: client.userID\n  });\n  var lastReceivedId = useMemo(function () {\n    return getLastReceived(enrichedMessages);\n  }, [enrichedMessages]);\n  return useMemo(function () {\n    return enrichedMessages.map(function (message) {\n      var _a;\n\n      if (message.customType === 'message.date' && message.date && isDate(message.date)) {\n        return React.createElement(\"li\", {\n          key: message.date.toISOString() + \"-i\"\n        }, React.createElement(DateSeparator, {\n          date: message.date,\n          formatDate: internalMessageProps.formatDate,\n          unread: message.unread\n        }));\n      }\n\n      if (message.customType === 'channel.intro' && HeaderComponent) {\n        return React.createElement(\"li\", {\n          key: 'intro'\n        }, React.createElement(HeaderComponent, null));\n      }\n\n      if (message.type === 'system') {\n        return React.createElement(\"li\", {\n          key: ((_a = message.event) === null || _a === void 0 ? void 0 : _a.created_at) || message.created_at || ''\n        }, React.createElement(MessageSystem, {\n          message: message\n        }));\n      }\n\n      var groupStyles = messageGroupStyles[message.id] || '';\n      var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || \"str-chat__li str-chat__li--\" + groupStyles;\n      return React.createElement(\"li\", {\n        className: messageClass,\n        \"data-testid\": messageClass,\n        key: message.id || message.created_at,\n        onLoadCapture: onMessageLoadCaptured\n      }, React.createElement(Message, __assign({\n        groupStyles: [groupStyles],\n        lastReceivedId: lastReceivedId,\n        message: message,\n        readBy: readData[message.id] || [],\n        threadList: threadList\n      }, internalMessageProps)));\n    });\n  }, [enrichedMessages, internalMessageProps, lastReceivedId, messageGroupStyles, onMessageLoadCaptured, readData, threadList]);\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/useMessageListElements.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useMemo","useLastReadData","getLastReceived","DateSeparator","DefaultDateSeparator","EventComponent","Message","useChatContext","useComponentContext","isDate","useMessageListElements","props","enrichedMessages","internalMessageProps","messageGroupStyles","onMessageLoadCaptured","read","returnAllReadData","threadList","_a","client","customClasses","_b","_c","HeaderComponent","_d","MessageSystem","readData","messages","userID","lastReceivedId","map","message","customType","date","createElement","key","toISOString","formatDate","unread","type","event","created_at","groupStyles","id","messageClass","className","onLoadCapture","readBy"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/* eslint-disable no-continue */\nimport React, { useMemo } from 'react';\nimport { useLastReadData } from './useLastReadData';\nimport { getLastReceived } from '../utils';\nimport { DateSeparator as DefaultDateSeparator } from '../../DateSeparator/DateSeparator';\nimport { EventComponent } from '../../EventComponent/EventComponent';\nimport { Message } from '../../Message';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useComponentContext } from '../../../context/ComponentContext';\nimport { isDate } from '../../../context/TranslationContext';\nexport var useMessageListElements = function (props) {\n    var enrichedMessages = props.enrichedMessages, internalMessageProps = props.internalMessageProps, messageGroupStyles = props.messageGroupStyles, onMessageLoadCaptured = props.onMessageLoadCaptured, read = props.read, returnAllReadData = props.returnAllReadData, threadList = props.threadList;\n    var _a = useChatContext('useMessageListElements'), client = _a.client, customClasses = _a.customClasses;\n    var _b = useComponentContext('useMessageListElements'), _c = _b.DateSeparator, DateSeparator = _c === void 0 ? DefaultDateSeparator : _c, HeaderComponent = _b.HeaderComponent, _d = _b.MessageSystem, MessageSystem = _d === void 0 ? EventComponent : _d;\n    // get the readData, but only for messages submitted by the user themselves\n    var readData = useLastReadData({\n        messages: enrichedMessages,\n        read: read,\n        returnAllReadData: returnAllReadData,\n        userID: client.userID,\n    });\n    var lastReceivedId = useMemo(function () { return getLastReceived(enrichedMessages); }, [enrichedMessages]);\n    return useMemo(function () {\n        return enrichedMessages.map(function (message) {\n            var _a;\n            if (message.customType === 'message.date' && message.date && isDate(message.date)) {\n                return (React.createElement(\"li\", { key: message.date.toISOString() + \"-i\" },\n                    React.createElement(DateSeparator, { date: message.date, formatDate: internalMessageProps.formatDate, unread: message.unread })));\n            }\n            if (message.customType === 'channel.intro' && HeaderComponent) {\n                return (React.createElement(\"li\", { key: 'intro' },\n                    React.createElement(HeaderComponent, null)));\n            }\n            if (message.type === 'system') {\n                return (React.createElement(\"li\", { key: ((_a = message.event) === null || _a === void 0 ? void 0 : _a.created_at) ||\n                        message.created_at ||\n                        '' },\n                    React.createElement(MessageSystem, { message: message })));\n            }\n            var groupStyles = messageGroupStyles[message.id] || '';\n            var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || \"str-chat__li str-chat__li--\" + groupStyles;\n            return (React.createElement(\"li\", { className: messageClass, \"data-testid\": messageClass, key: message.id || message.created_at, onLoadCapture: onMessageLoadCaptured },\n                React.createElement(Message, __assign({ groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [], threadList: threadList }, internalMessageProps))));\n        });\n    }, [\n        enrichedMessages,\n        internalMessageProps,\n        lastReceivedId,\n        messageGroupStyles,\n        onMessageLoadCaptured,\n        readData,\n        threadList,\n    ]);\n};\n"]},"metadata":{},"sourceType":"module"}