{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { getDisplayImage, getDisplayTitle, getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function ChannelPreview(props) {\n  var channel = props.channel,\n      _a = props.Preview,\n      Preview = _a === void 0 ? ChannelPreviewMessenger : _a;\n\n  var _b = useChatContext('ChannelPreview'),\n      activeChannel = _b.channel,\n      client = _b.client,\n      setActiveChannel = _b.setActiveChannel;\n\n  var _c = useTranslationContext('ChannelPreview'),\n      t = _c.t,\n      userLanguage = _c.userLanguage;\n\n  var _d = useState(channel.state.messages[channel.state.messages.length - 1]),\n      lastMessage = _d[0],\n      setLastMessage = _d[1];\n\n  var _e = useState(0),\n      unread = _e[0],\n      setUnread = _e[1];\n\n  var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n  var muted = useIsChannelMuted(channel).muted;\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      if (!event.cid) return setUnread(0);\n      if (channel.cid === event.cid) setUnread(0);\n    };\n\n    client.on('notification.mark_read', handleEvent);\n    return function () {\n      return client.off('notification.mark_read', handleEvent);\n    };\n  }, []);\n  useEffect(function () {\n    if (isActive || muted) {\n      setUnread(0);\n    } else {\n      setUnread(channel.countUnread());\n    }\n  }, [channel, isActive, muted]);\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      if (event.message) setLastMessage(event.message);\n\n      if (!isActive && !muted) {\n        setUnread(channel.countUnread());\n      } else {\n        setUnread(0);\n      }\n    };\n\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n    return function () {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, [channel, isActive, muted]);\n  if (!Preview) return null;\n  var displayImage = getDisplayImage(channel, client.user);\n  var displayTitle = getDisplayTitle(channel, client.user);\n  var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n  return React.createElement(Preview, __assign({}, props, {\n    active: isActive,\n    displayImage: displayImage,\n    displayTitle: displayTitle,\n    lastMessage: lastMessage,\n    latestMessage: latestMessage,\n    setActiveChannel: setActiveChannel,\n    unread: unread\n  }));\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useEffect","useState","ChannelPreviewMessenger","useIsChannelMuted","getDisplayImage","getDisplayTitle","getLatestMessagePreview","useChatContext","useTranslationContext","ChannelPreview","props","channel","_a","Preview","_b","activeChannel","client","setActiveChannel","_c","userLanguage","_d","state","messages","lastMessage","setLastMessage","_e","unread","setUnread","isActive","cid","muted","handleEvent","event","on","off","countUnread","message","displayImage","user","displayTitle","latestMessage","createElement","active"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { getDisplayImage, getDisplayTitle, getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n    var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a;\n    var _b = useChatContext('ChannelPreview'), activeChannel = _b.channel, client = _b.client, setActiveChannel = _b.setActiveChannel;\n    var _c = useTranslationContext('ChannelPreview'), t = _c.t, userLanguage = _c.userLanguage;\n    var _d = useState(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _d[0], setLastMessage = _d[1];\n    var _e = useState(0), unread = _e[0], setUnread = _e[1];\n    var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n    var muted = useIsChannelMuted(channel).muted;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            if (!event.cid)\n                return setUnread(0);\n            if (channel.cid === event.cid)\n                setUnread(0);\n        };\n        client.on('notification.mark_read', handleEvent);\n        return function () { return client.off('notification.mark_read', handleEvent); };\n    }, []);\n    useEffect(function () {\n        if (isActive || muted) {\n            setUnread(0);\n        }\n        else {\n            setUnread(channel.countUnread());\n        }\n    }, [channel, isActive, muted]);\n    useEffect(function () {\n        var handleEvent = function (event) {\n            if (event.message)\n                setLastMessage(event.message);\n            if (!isActive && !muted) {\n                setUnread(channel.countUnread());\n            }\n            else {\n                setUnread(0);\n            }\n        };\n        channel.on('message.new', handleEvent);\n        channel.on('message.updated', handleEvent);\n        channel.on('message.deleted', handleEvent);\n        return function () {\n            channel.off('message.new', handleEvent);\n            channel.off('message.updated', handleEvent);\n            channel.off('message.deleted', handleEvent);\n        };\n    }, [channel, isActive, muted]);\n    if (!Preview)\n        return null;\n    var displayImage = getDisplayImage(channel, client.user);\n    var displayTitle = getDisplayTitle(channel, client.user);\n    var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n    return (React.createElement(Preview, __assign({}, props, { active: isActive, displayImage: displayImage, displayTitle: displayTitle, lastMessage: lastMessage, latestMessage: latestMessage, setActiveChannel: setActiveChannel, unread: unread })));\n};\n"]},"metadata":{},"sourceType":"module"}