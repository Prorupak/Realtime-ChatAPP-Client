{"ast":null,"code":"/* eslint-disable */\nexport var KEY_CODES = {\n  ESC: 27,\n  UP: 38,\n  DOWN: 40,\n  ENTER: 13,\n  TAB: 9,\n  SPACE: 32\n};\nvar keycodeMap = {}; // This is self-made key shortcuts manager, used for caching key strokes\n\nvar Listener =\n/** @class */\nfunction () {\n  function Listener() {\n    var _this = this;\n\n    this.startListen = function () {\n      if (!_this.refCount) {\n        // prevent multiple listeners in case of multiple TextareaAutocomplete components on page\n        document.addEventListener('keydown', _this.f);\n        document.addEventListener('keyup', _this.f);\n      }\n\n      _this.refCount++;\n    };\n\n    this.stopListen = function () {\n      _this.refCount--;\n\n      if (!_this.refCount) {\n        // prevent disable listening in case of multiple TextareaAutocomplete components on page\n        document.removeEventListener('keydown', _this.f);\n        document.removeEventListener('keyup', _this.f);\n      }\n    };\n\n    this.add = function (keyCodes, fn) {\n      var keyCode = keyCodes;\n      if (typeof keyCode !== 'object') keyCode = [keyCode];\n      _this.listeners[_this.index] = {\n        keyCode: keyCode,\n        fn: fn\n      };\n      _this.index += 1;\n      return _this.index;\n    };\n\n    this.remove = function (ids) {\n      for (var _i = 0, _a = Object.entries(ids); _i < _a.length; _i++) {\n        var key = _a[_i];\n        delete _this.listeners[key];\n      }\n    };\n\n    this.removeAll = function () {\n      _this.listeners = {};\n      _this.index = 0;\n    };\n\n    this.index = 0;\n    this.listeners = {};\n    this.refCount = 0;\n\n    this.f = function (e) {\n      var code = e.keyCode || e.which;\n      keycodeMap[code] = e.type === 'keydown';\n\n      if (e.type !== 'keydown') {\n        keycodeMap[code] = false;\n        return;\n      }\n\n      Object.values(_this.listeners).forEach(function (_a) {\n        var keyCode = _a.keyCode,\n            fn = _a.fn;\n\n        if (keyCode.length > 1) {\n          if (keyCode.every(function (keycode) {\n            return keycodeMap[keycode];\n          })) {\n            fn(e);\n          }\n        } else if (keyCode.includes(code) && keycodeMap[code]) {\n          fn(e);\n        }\n      });\n    };\n  }\n\n  return Listener;\n}();\n\nexport default new Listener();","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/listener.js"],"names":["KEY_CODES","ESC","UP","DOWN","ENTER","TAB","SPACE","keycodeMap","Listener","_this","startListen","refCount","document","addEventListener","f","stopListen","removeEventListener","add","keyCodes","fn","keyCode","listeners","index","remove","ids","_i","_a","Object","entries","length","key","removeAll","e","code","which","type","values","forEach","every","keycode","includes"],"mappings":"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","sourcesContent":["/* eslint-disable */\nexport var KEY_CODES = {\n    ESC: 27,\n    UP: 38,\n    DOWN: 40,\n    ENTER: 13,\n    TAB: 9,\n    SPACE: 32,\n};\nvar keycodeMap = {};\n// This is self-made key shortcuts manager, used for caching key strokes\nvar Listener = /** @class */ (function () {\n    function Listener() {\n        var _this = this;\n        this.startListen = function () {\n            if (!_this.refCount) {\n                // prevent multiple listeners in case of multiple TextareaAutocomplete components on page\n                document.addEventListener('keydown', _this.f);\n                document.addEventListener('keyup', _this.f);\n            }\n            _this.refCount++;\n        };\n        this.stopListen = function () {\n            _this.refCount--;\n            if (!_this.refCount) {\n                // prevent disable listening in case of multiple TextareaAutocomplete components on page\n                document.removeEventListener('keydown', _this.f);\n                document.removeEventListener('keyup', _this.f);\n            }\n        };\n        this.add = function (keyCodes, fn) {\n            var keyCode = keyCodes;\n            if (typeof keyCode !== 'object')\n                keyCode = [keyCode];\n            _this.listeners[_this.index] = {\n                keyCode: keyCode,\n                fn: fn,\n            };\n            _this.index += 1;\n            return _this.index;\n        };\n        this.remove = function (ids) {\n            for (var _i = 0, _a = Object.entries(ids); _i < _a.length; _i++) {\n                var key = _a[_i];\n                delete _this.listeners[key];\n            }\n        };\n        this.removeAll = function () {\n            _this.listeners = {};\n            _this.index = 0;\n        };\n        this.index = 0;\n        this.listeners = {};\n        this.refCount = 0;\n        this.f = function (e) {\n            var code = e.keyCode || e.which;\n            keycodeMap[code] = e.type === 'keydown';\n            if (e.type !== 'keydown') {\n                keycodeMap[code] = false;\n                return;\n            }\n            Object.values(_this.listeners).forEach(function (_a) {\n                var keyCode = _a.keyCode, fn = _a.fn;\n                if (keyCode.length > 1) {\n                    if (keyCode.every(function (keycode) { return keycodeMap[keycode]; })) {\n                        fn(e);\n                    }\n                }\n                else if (keyCode.includes(code) && keycodeMap[code]) {\n                    fn(e);\n                }\n            });\n        };\n    }\n    return Listener;\n}());\nexport default new Listener();\n"]},"metadata":{},"sourceType":"module"}