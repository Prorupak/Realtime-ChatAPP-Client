{"ast":null,"code":"var _concat = /*#__PURE__*/require(\"./internal/_concat\");\n\nvar _curry1 = /*#__PURE__*/require(\"./internal/_curry1\");\n\nvar curryN = /*#__PURE__*/require(\"./curryN\");\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\n\n\nvar addIndex = /*#__PURE__*/_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n\n    return fn.apply(this, args);\n  });\n});\n\nmodule.exports = addIndex;","map":{"version":3,"sources":["/home/rupak/Desktop/Project/Chat Application/chatApp_client/node_modules/ramda/src/addIndex.js"],"names":["_concat","require","_curry1","curryN","addIndex","fn","length","idx","origFn","arguments","list","args","Array","prototype","slice","call","result","apply","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GACX,aACAC,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIC,OAAO,GACX,aACAD,OAAO,CAAC,oBAAD,CAFP;;AAIA,IAAIE,MAAM,GACV,aACAF,OAAO,CAAC,UAAD,CAFP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIG,QAAQ,GACZ,aACAF,OAAO,CAAC,SAASE,QAAT,CAAkBC,EAAlB,EAAsB;AAC5B,SAAOF,MAAM,CAACE,EAAE,CAACC,MAAJ,EAAY,YAAY;AACnC,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,MAAM,GAAGC,SAAS,CAAC,CAAD,CAAtB;AACA,QAAIC,IAAI,GAAGD,SAAS,CAACA,SAAS,CAACH,MAAV,GAAmB,CAApB,CAApB;AACA,QAAIK,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,CAAX;;AAEAE,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,YAAY;AACpB,UAAIK,MAAM,GAAGR,MAAM,CAACS,KAAP,CAAa,IAAb,EAAmBjB,OAAO,CAACS,SAAD,EAAY,CAACF,GAAD,EAAMG,IAAN,CAAZ,CAA1B,CAAb;AACAH,MAAAA,GAAG,IAAI,CAAP;AACA,aAAOS,MAAP;AACD,KAJD;;AAMA,WAAOX,EAAE,CAACY,KAAH,CAAS,IAAT,EAAeN,IAAf,CAAP;AACD,GAbY,CAAb;AAcD,CAfM,CAFP;;AAmBAO,MAAM,CAACC,OAAP,GAAiBf,QAAjB","sourcesContent":["var _concat =\n/*#__PURE__*/\nrequire(\"./internal/_concat\");\n\nvar _curry1 =\n/*#__PURE__*/\nrequire(\"./internal/_curry1\");\n\nvar curryN =\n/*#__PURE__*/\nrequire(\"./curryN\");\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> ((a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\n\n\nvar addIndex =\n/*#__PURE__*/\n_curry1(function addIndex(fn) {\n  return curryN(fn.length, function () {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    args[0] = function () {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n\n    return fn.apply(this, args);\n  });\n});\n\nmodule.exports = addIndex;"]},"metadata":{},"sourceType":"script"}