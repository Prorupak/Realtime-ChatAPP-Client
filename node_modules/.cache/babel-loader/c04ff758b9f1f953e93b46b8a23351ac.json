{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\n\nvar decode_1 = require(\"entities/lib/decode\");\n\nfunction isWhitespace(c) {\n  return c === 32\n  /* Space */\n  || c === 10\n  /* NewLine */\n  || c === 9\n  /* Tab */\n  || c === 12\n  /* FormFeed */\n  || c === 13\n  /* CarriageReturn */\n  ;\n}\n\nfunction isEndOfTagSection(c) {\n  return c === 47\n  /* Slash */\n  || c === 62\n  /* Gt */\n  || isWhitespace(c);\n}\n\nfunction isNumber(c) {\n  return c >= 48\n  /* Zero */\n  && c <= 57\n  /* Nine */\n  ;\n}\n\nfunction isASCIIAlpha(c) {\n  return c >= 97\n  /* LowerA */\n  && c <= 122\n  /* LowerZ */\n  || c >= 65\n  /* UpperA */\n  && c <= 90\n  /* UpperZ */\n  ;\n}\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\n\n\nvar Sequences = {\n  Cdata: new Uint16Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n  CdataEnd: new Uint16Array([0x5d, 0x5d, 0x3e]),\n  CommentEnd: new Uint16Array([0x2d, 0x2d, 0x3e]),\n  ScriptEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74]),\n  StyleEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n  TitleEnd: new Uint16Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]) // `</title`\n\n};\n\nvar Tokenizer =\n/** @class */\nfunction () {\n  function Tokenizer(_a, cbs) {\n    var _b = _a.xmlMode,\n        xmlMode = _b === void 0 ? false : _b,\n        _c = _a.decodeEntities,\n        decodeEntities = _c === void 0 ? true : _c;\n    this.cbs = cbs;\n    /** The current state the tokenizer is in. */\n\n    this._state = 1\n    /* Text */\n    ;\n    /** The read buffer. */\n\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n\n    this._index = 0;\n    /**\n     * Data that has already been processed will be removed from the buffer occasionally.\n     * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n     */\n\n    this.bufferOffset = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n\n    this.baseState = 1\n    /* Text */\n    ;\n    /** For special parsing behavior inside of script and style tags. */\n\n    this.isSpecial = false;\n    /** Indicates whether the tokenizer has been paused. */\n\n    this.running = true;\n    /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n\n    this.ended = false;\n    this.sequenceIndex = 0;\n    this.trieIndex = 0;\n    this.trieCurrent = 0;\n    this.trieResult = null;\n    this.entityExcess = 0;\n    this.xmlMode = xmlMode;\n    this.decodeEntities = decodeEntities;\n    this.entityTrie = xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree;\n  }\n\n  Tokenizer.prototype.reset = function () {\n    this._state = 1\n    /* Text */\n    ;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this._index = 0;\n    this.bufferOffset = 0;\n    this.baseState = 1\n    /* Text */\n    ;\n    this.currentSequence = undefined;\n    this.running = true;\n    this.ended = false;\n  };\n\n  Tokenizer.prototype.write = function (chunk) {\n    if (this.ended) return this.cbs.onerror(Error(\".write() after done!\"));\n    this.buffer += chunk;\n    this.parse();\n  };\n\n  Tokenizer.prototype.end = function (chunk) {\n    if (this.ended) return this.cbs.onerror(Error(\".end() after done!\"));\n    if (chunk) this.write(chunk);\n    this.ended = true;\n    if (this.running) this.finish();\n  };\n\n  Tokenizer.prototype.pause = function () {\n    this.running = false;\n  };\n\n  Tokenizer.prototype.resume = function () {\n    this.running = true;\n\n    if (this._index < this.buffer.length) {\n      this.parse();\n    }\n\n    if (this.ended) {\n      this.finish();\n    }\n  };\n  /**\n   * The start of the current section.\n   */\n\n\n  Tokenizer.prototype.getAbsoluteSectionStart = function () {\n    return this.sectionStart + this.bufferOffset;\n  };\n  /**\n   * The current index within all of the written data.\n   */\n\n\n  Tokenizer.prototype.getAbsoluteIndex = function () {\n    return this.bufferOffset + this._index;\n  };\n\n  Tokenizer.prototype.stateText = function (c) {\n    if (c === 60\n    /* Lt */\n    || !this.decodeEntities && this.fastForwardTo(60\n    /* Lt */\n    )) {\n      if (this._index > this.sectionStart) {\n        this.cbs.ontext(this.getSection());\n      }\n\n      this._state = 2\n      /* BeforeTagName */\n      ;\n      this.sectionStart = this._index;\n    } else if (this.decodeEntities && c === 38\n    /* Amp */\n    ) {\n        this._state = 25\n        /* BeforeEntity */\n        ;\n      }\n  };\n\n  Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n    var isEnd = this.sequenceIndex === this.currentSequence.length;\n    var isMatch = isEnd ? // If we are at the end of the sequence, make sure the tag name has ended\n    isEndOfTagSection(c) : // Otherwise, do a case-insensitive comparison\n    (c | 0x20) === this.currentSequence[this.sequenceIndex];\n\n    if (!isMatch) {\n      this.isSpecial = false;\n    } else if (!isEnd) {\n      this.sequenceIndex++;\n      return;\n    }\n\n    this.sequenceIndex = 0;\n    this._state = 3\n    /* InTagName */\n    ;\n    this.stateInTagName(c);\n  };\n  /** Look for an end tag. For <title> tags, also decode entities. */\n\n\n  Tokenizer.prototype.stateInSpecialTag = function (c) {\n    if (this.sequenceIndex === this.currentSequence.length) {\n      if (c === 62\n      /* Gt */\n      || isWhitespace(c)) {\n        var endOfText = this._index - this.currentSequence.length;\n\n        if (this.sectionStart < endOfText) {\n          // Spoof the index so that reported locations match up.\n          var actualIndex = this._index;\n          this._index = endOfText;\n          this.cbs.ontext(this.getSection());\n          this._index = actualIndex;\n        }\n\n        this.isSpecial = false;\n        this.sectionStart = endOfText + 2; // Skip over the `</`\n\n        this.stateInClosingTagName(c);\n        return; // We are done; skip the rest of the function.\n      }\n\n      this.sequenceIndex = 0;\n    }\n\n    if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n      this.sequenceIndex += 1;\n    } else if (this.sequenceIndex === 0) {\n      if (this.currentSequence === Sequences.TitleEnd) {\n        // We have to parse entities in <title> tags.\n        if (this.decodeEntities && c === 38\n        /* Amp */\n        ) {\n            this._state = 25\n            /* BeforeEntity */\n            ;\n          }\n      } else if (this.fastForwardTo(60\n      /* Lt */\n      )) {\n        // Outside of <title> tags, we can fast-forward.\n        this.sequenceIndex = 1;\n      }\n    } else {\n      // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n      this.sequenceIndex = Number(c === 60\n      /* Lt */\n      );\n    }\n  };\n\n  Tokenizer.prototype.stateCDATASequence = function (c) {\n    if (c === Sequences.Cdata[this.sequenceIndex]) {\n      if (++this.sequenceIndex === Sequences.Cdata.length) {\n        this._state = 21\n        /* InCommentLike */\n        ;\n        this.currentSequence = Sequences.CdataEnd;\n        this.sequenceIndex = 0;\n        this.sectionStart = this._index + 1;\n      }\n    } else {\n      this.sequenceIndex = 0;\n      this._state = 16\n      /* InDeclaration */\n      ;\n      this.stateInDeclaration(c); // Reconsume the character\n    }\n  };\n  /**\n   * When we wait for one specific character, we can speed things up\n   * by skipping through the buffer until we find it.\n   *\n   * @returns Whether the character was found.\n   */\n\n\n  Tokenizer.prototype.fastForwardTo = function (c) {\n    while (++this._index < this.buffer.length) {\n      if (this.buffer.charCodeAt(this._index) === c) {\n        return true;\n      }\n    }\n    /*\n     * We increment the index at the end of the `parse` loop,\n     * so set it to `buffer.length - 1` here.\n     *\n     * TODO: Refactor `parse` to increment index before calling states.\n     */\n\n\n    this._index = this.buffer.length - 1;\n    return false;\n  };\n  /**\n   * Comments and CDATA end with `-->` and `]]>`.\n   *\n   * Their common qualities are:\n   * - Their end sequences have a distinct character they start with.\n   * - That character is then repeated, so we have to check multiple repeats.\n   * - All characters but the start character of the sequence can be skipped.\n   */\n\n\n  Tokenizer.prototype.stateInCommentLike = function (c) {\n    if (c === this.currentSequence[this.sequenceIndex]) {\n      if (++this.sequenceIndex === this.currentSequence.length) {\n        // Remove 2 trailing chars\n        var section = this.buffer.slice(this.sectionStart, this._index - 2);\n\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(section);\n        } else {\n          this.cbs.oncomment(section);\n        }\n\n        this.sequenceIndex = 0;\n        this.sectionStart = this._index + 1;\n        this._state = 1\n        /* Text */\n        ;\n      }\n    } else if (this.sequenceIndex === 0) {\n      // Fast-forward to the first character of the sequence\n      if (this.fastForwardTo(this.currentSequence[0])) {\n        this.sequenceIndex = 1;\n      }\n    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n      // Allow long sequences, eg. --->, ]]]>\n      this.sequenceIndex = 0;\n    }\n  };\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n\n\n  Tokenizer.prototype.isTagStartChar = function (c) {\n    return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n  };\n\n  Tokenizer.prototype.startSpecial = function (sequence, offset) {\n    this.isSpecial = true;\n    this.currentSequence = sequence;\n    this.sequenceIndex = offset;\n    this._state = 23\n    /* SpecialStartSequence */\n    ;\n  };\n\n  Tokenizer.prototype.stateBeforeTagName = function (c) {\n    if (c === 33\n    /* ExclamationMark */\n    ) {\n        this._state = 15\n        /* BeforeDeclaration */\n        ;\n        this.sectionStart = this._index + 1;\n      } else if (c === 63\n    /* Questionmark */\n    ) {\n        this._state = 17\n        /* InProcessingInstruction */\n        ;\n        this.sectionStart = this._index + 1;\n      } else if (this.isTagStartChar(c)) {\n      var lower = c | 0x20;\n      this.sectionStart = this._index;\n\n      if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n        this.startSpecial(Sequences.TitleEnd, 3);\n      } else {\n        this._state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? 22\n        /* BeforeSpecialS */\n        : 3\n        /* InTagName */\n        ;\n      }\n    } else if (c === 47\n    /* Slash */\n    ) {\n        this._state = 5\n        /* BeforeClosingTagName */\n        ;\n      } else {\n      this._state = 1\n      /* Text */\n      ;\n      this.stateText(c);\n    }\n  };\n\n  Tokenizer.prototype.stateInTagName = function (c) {\n    if (isEndOfTagSection(c)) {\n      this.cbs.onopentagname(this.getSection());\n      this.sectionStart = -1;\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n      this.stateBeforeAttributeName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n    if (isWhitespace(c)) {// Ignore\n    } else if (c === 62\n    /* Gt */\n    ) {\n        this._state = 1\n        /* Text */\n        ;\n      } else {\n      this._state = this.isTagStartChar(c) ? 6\n      /* InClosingTagName */\n      : 20\n      /* InSpecialComment */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateInClosingTagName = function (c) {\n    if (c === 62\n    /* Gt */\n    || isWhitespace(c)) {\n      this.cbs.onclosetag(this.getSection());\n      this.sectionStart = -1;\n      this._state = 7\n      /* AfterClosingTagName */\n      ;\n      this.stateAfterClosingTagName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n    // Skip everything until \">\"\n    if (c === 62\n    /* Gt */\n    || this.fastForwardTo(62\n    /* Gt */\n    )) {\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n    if (c === 62\n    /* Gt */\n    ) {\n        this.cbs.onopentagend();\n\n        if (this.isSpecial) {\n          this._state = 24\n          /* InSpecialTag */\n          ;\n          this.sequenceIndex = 0;\n        } else {\n          this._state = 1\n          /* Text */\n          ;\n        }\n\n        this.baseState = this._state;\n        this.sectionStart = this._index + 1;\n      } else if (c === 47\n    /* Slash */\n    ) {\n        this._state = 4\n        /* InSelfClosingTag */\n        ;\n      } else if (!isWhitespace(c)) {\n      this._state = 9\n      /* InAttributeName */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n    if (c === 62\n    /* Gt */\n    ) {\n        this.cbs.onselfclosingtag();\n        this._state = 1\n        /* Text */\n        ;\n        this.baseState = 1\n        /* Text */\n        ;\n        this.sectionStart = this._index + 1;\n        this.isSpecial = false; // Reset special state, in case of self-closing special tags\n      } else if (!isWhitespace(c)) {\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n      this.stateBeforeAttributeName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateInAttributeName = function (c) {\n    if (c === 61\n    /* Eq */\n    || isEndOfTagSection(c)) {\n      this.cbs.onattribname(this.getSection());\n      this.sectionStart = -1;\n      this._state = 10\n      /* AfterAttributeName */\n      ;\n      this.stateAfterAttributeName(c);\n    }\n  };\n\n  Tokenizer.prototype.stateAfterAttributeName = function (c) {\n    if (c === 61\n    /* Eq */\n    ) {\n        this._state = 11\n        /* BeforeAttributeValue */\n        ;\n      } else if (c === 47\n    /* Slash */\n    || c === 62\n    /* Gt */\n    ) {\n        this.cbs.onattribend(undefined);\n        this._state = 8\n        /* BeforeAttributeName */\n        ;\n        this.stateBeforeAttributeName(c);\n      } else if (!isWhitespace(c)) {\n      this.cbs.onattribend(undefined);\n      this._state = 9\n      /* InAttributeName */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n    if (c === 34\n    /* DoubleQuote */\n    ) {\n        this._state = 12\n        /* InAttributeValueDq */\n        ;\n        this.sectionStart = this._index + 1;\n      } else if (c === 39\n    /* SingleQuote */\n    ) {\n        this._state = 13\n        /* InAttributeValueSq */\n        ;\n        this.sectionStart = this._index + 1;\n      } else if (!isWhitespace(c)) {\n      this.sectionStart = this._index;\n      this._state = 14\n      /* InAttributeValueNq */\n      ;\n      this.stateInAttributeValueNoQuotes(c); // Reconsume token\n    }\n  };\n\n  Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n    if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n      this.cbs.onattribdata(this.getSection());\n      this.sectionStart = -1;\n      this.cbs.onattribend(String.fromCharCode(quote));\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n    } else if (this.decodeEntities && c === 38\n    /* Amp */\n    ) {\n        this.baseState = this._state;\n        this._state = 25\n        /* BeforeEntity */\n        ;\n      }\n  };\n\n  Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n    this.handleInAttributeValue(c, 34\n    /* DoubleQuote */\n    );\n  };\n\n  Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n    this.handleInAttributeValue(c, 39\n    /* SingleQuote */\n    );\n  };\n\n  Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n    if (isWhitespace(c) || c === 62\n    /* Gt */\n    ) {\n        this.cbs.onattribdata(this.getSection());\n        this.sectionStart = -1;\n        this.cbs.onattribend(null);\n        this._state = 8\n        /* BeforeAttributeName */\n        ;\n        this.stateBeforeAttributeName(c);\n      } else if (this.decodeEntities && c === 38\n    /* Amp */\n    ) {\n        this.baseState = this._state;\n        this._state = 25\n        /* BeforeEntity */\n        ;\n      }\n  };\n\n  Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n    if (c === 91\n    /* OpeningSquareBracket */\n    ) {\n        this._state = 19\n        /* CDATASequence */\n        ;\n        this.sequenceIndex = 0;\n      } else {\n      this._state = c === 45\n      /* Dash */\n      ? 18\n      /* BeforeComment */\n      : 16\n      /* InDeclaration */\n      ;\n    }\n  };\n\n  Tokenizer.prototype.stateInDeclaration = function (c) {\n    if (c === 62\n    /* Gt */\n    || this.fastForwardTo(62\n    /* Gt */\n    )) {\n      this.cbs.ondeclaration(this.getSection());\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n    if (c === 62\n    /* Gt */\n    || this.fastForwardTo(62\n    /* Gt */\n    )) {\n      this.cbs.onprocessinginstruction(this.getSection());\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeComment = function (c) {\n    if (c === 45\n    /* Dash */\n    ) {\n        this._state = 21\n        /* InCommentLike */\n        ;\n        this.currentSequence = Sequences.CommentEnd; // Allow short comments (eg. <!-->)\n\n        this.sequenceIndex = 2;\n        this.sectionStart = this._index + 1;\n      } else {\n      this._state = 16\n      /* InDeclaration */\n      ;\n    }\n  };\n\n  Tokenizer.prototype.stateInSpecialComment = function (c) {\n    if (c === 62\n    /* Gt */\n    || this.fastForwardTo(62\n    /* Gt */\n    )) {\n      this.cbs.oncomment(this.getSection());\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n    var lower = c | 0x20;\n\n    if (lower === Sequences.ScriptEnd[3]) {\n      this.startSpecial(Sequences.ScriptEnd, 4);\n    } else if (lower === Sequences.StyleEnd[3]) {\n      this.startSpecial(Sequences.StyleEnd, 4);\n    } else {\n      this._state = 3\n      /* InTagName */\n      ;\n      this.stateInTagName(c); // Consume the token again\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeEntity = function (c) {\n    // Start excess with 1 to include the '&'\n    this.entityExcess = 1;\n\n    if (c === 35\n    /* Num */\n    ) {\n        this._state = 26\n        /* BeforeNumericEntity */\n        ;\n      } else if (c === 38\n    /* Amp */\n    ) {// We have two `&` characters in a row. Stay in the current state.\n      } else {\n      this.trieIndex = 0;\n      this.trieCurrent = this.entityTrie[0];\n      this.trieResult = null;\n      this._state = 27\n      /* InNamedEntity */\n      ;\n      this.stateInNamedEntity(c);\n    }\n  };\n\n  Tokenizer.prototype.stateInNamedEntity = function (c) {\n    this.entityExcess += 1;\n    this.trieIndex = (0, decode_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n\n    if (this.trieIndex < 0) {\n      this.emitNamedEntity();\n      this._index--;\n      return;\n    }\n\n    this.trieCurrent = this.entityTrie[this.trieIndex]; // If the branch is a value, store it and continue\n\n    if (this.trieCurrent & decode_1.BinTrieFlags.HAS_VALUE) {\n      // If we have a legacy entity while parsing strictly, just skip the number of bytes\n      if (!this.allowLegacyEntity() && c !== 59\n      /* Semi */\n      ) {\n          // No need to consider multi-byte values, as the legacy entity is always a single byte\n          this.trieIndex += 1;\n        } else {\n        // Add 1 as we have already incremented the excess\n        var entityStart = this._index - this.entityExcess + 1;\n\n        if (entityStart > this.sectionStart) {\n          this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n        } // If this is a surrogate pair, combine the higher bits from the node with the next byte\n\n\n        this.trieResult = this.trieCurrent & decode_1.BinTrieFlags.MULTI_BYTE ? String.fromCharCode(this.entityTrie[++this.trieIndex], this.entityTrie[++this.trieIndex]) : String.fromCharCode(this.entityTrie[++this.trieIndex]);\n        this.entityExcess = 0;\n        this.sectionStart = this._index + 1;\n      }\n    }\n  };\n\n  Tokenizer.prototype.emitNamedEntity = function () {\n    if (this.trieResult) {\n      this.emitPartial(this.trieResult);\n    }\n\n    this._state = this.baseState;\n  };\n\n  Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n    if ((c | 0x20) === 120\n    /* LowerX */\n    ) {\n        this.entityExcess++;\n        this._state = 29\n        /* InHexEntity */\n        ;\n      } else {\n      this._state = 28\n      /* InNumericEntity */\n      ;\n      this.stateInNumericEntity(c);\n    }\n  };\n\n  Tokenizer.prototype.decodeNumericEntity = function (base, strict) {\n    var entityStart = this._index - this.entityExcess - 1;\n    var numberStart = entityStart + 2 + (base >> 4);\n\n    if (numberStart !== this._index) {\n      // Emit leading data if any\n      if (entityStart > this.sectionStart) {\n        this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n      } // Parse entity\n\n\n      var entity = this.buffer.substring(numberStart, this._index);\n      var parsed = parseInt(entity, base);\n      this.emitPartial((0, decode_codepoint_1.default)(parsed));\n      this.sectionStart = this._index + Number(strict);\n    }\n\n    this._state = this.baseState;\n  };\n\n  Tokenizer.prototype.stateInNumericEntity = function (c) {\n    if (c === 59\n    /* Semi */\n    ) {\n        this.decodeNumericEntity(10, true);\n      } else if (!isNumber(c)) {\n      if (this.allowLegacyEntity()) {\n        this.decodeNumericEntity(10, false);\n      } else {\n        this._state = this.baseState;\n      }\n\n      this._index--;\n    } else {\n      this.entityExcess++;\n    }\n  };\n\n  Tokenizer.prototype.stateInHexEntity = function (c) {\n    if (c === 59\n    /* Semi */\n    ) {\n        this.decodeNumericEntity(16, true);\n      } else if ((c < 97\n    /* LowerA */\n    || c > 102\n    /* LowerF */\n    ) && (c < 65\n    /* UpperA */\n    || c > 70\n    /* UpperF */\n    ) && !isNumber(c)) {\n      if (this.allowLegacyEntity()) {\n        this.decodeNumericEntity(16, false);\n      } else {\n        this._state = this.baseState;\n      }\n\n      this._index--;\n    } else {\n      this.entityExcess++;\n    }\n  };\n\n  Tokenizer.prototype.allowLegacyEntity = function () {\n    return !this.xmlMode && (this.baseState === 1\n    /* Text */\n    || this.baseState === 24\n    /* InSpecialTag */\n    );\n  };\n  /**\n   * Remove data that has already been consumed from the buffer.\n   */\n\n\n  Tokenizer.prototype.cleanup = function () {\n    // If we are inside of text, emit what we already have.\n    if (this.running && this.sectionStart !== this._index && (this._state === 1\n    /* Text */\n    || this._state === 24\n    /* InSpecialTag */\n    && this.sequenceIndex === 0)) {\n      // TODO: We could emit attribute data here as well.\n      this.cbs.ontext(this.buffer.substr(this.sectionStart));\n      this.sectionStart = this._index;\n    }\n\n    var start = this.sectionStart < 0 ? this._index : this.sectionStart;\n    this.buffer = start === this.buffer.length ? \"\" : this.buffer.substr(start);\n    this._index -= start;\n    this.bufferOffset += start;\n\n    if (this.sectionStart > 0) {\n      this.sectionStart = 0;\n    }\n  };\n\n  Tokenizer.prototype.shouldContinue = function () {\n    return this._index < this.buffer.length && this.running;\n  };\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n\n\n  Tokenizer.prototype.parse = function () {\n    while (this.shouldContinue()) {\n      var c = this.buffer.charCodeAt(this._index);\n\n      if (this._state === 1\n      /* Text */\n      ) {\n          this.stateText(c);\n        } else if (this._state === 23\n      /* SpecialStartSequence */\n      ) {\n          this.stateSpecialStartSequence(c);\n        } else if (this._state === 24\n      /* InSpecialTag */\n      ) {\n          this.stateInSpecialTag(c);\n        } else if (this._state === 19\n      /* CDATASequence */\n      ) {\n          this.stateCDATASequence(c);\n        } else if (this._state === 12\n      /* InAttributeValueDq */\n      ) {\n          this.stateInAttributeValueDoubleQuotes(c);\n        } else if (this._state === 9\n      /* InAttributeName */\n      ) {\n          this.stateInAttributeName(c);\n        } else if (this._state === 21\n      /* InCommentLike */\n      ) {\n          this.stateInCommentLike(c);\n        } else if (this._state === 20\n      /* InSpecialComment */\n      ) {\n          this.stateInSpecialComment(c);\n        } else if (this._state === 8\n      /* BeforeAttributeName */\n      ) {\n          this.stateBeforeAttributeName(c);\n        } else if (this._state === 3\n      /* InTagName */\n      ) {\n          this.stateInTagName(c);\n        } else if (this._state === 6\n      /* InClosingTagName */\n      ) {\n          this.stateInClosingTagName(c);\n        } else if (this._state === 2\n      /* BeforeTagName */\n      ) {\n          this.stateBeforeTagName(c);\n        } else if (this._state === 10\n      /* AfterAttributeName */\n      ) {\n          this.stateAfterAttributeName(c);\n        } else if (this._state === 13\n      /* InAttributeValueSq */\n      ) {\n          this.stateInAttributeValueSingleQuotes(c);\n        } else if (this._state === 11\n      /* BeforeAttributeValue */\n      ) {\n          this.stateBeforeAttributeValue(c);\n        } else if (this._state === 5\n      /* BeforeClosingTagName */\n      ) {\n          this.stateBeforeClosingTagName(c);\n        } else if (this._state === 7\n      /* AfterClosingTagName */\n      ) {\n          this.stateAfterClosingTagName(c);\n        } else if (this._state === 22\n      /* BeforeSpecialS */\n      ) {\n          this.stateBeforeSpecialS(c);\n        } else if (this._state === 14\n      /* InAttributeValueNq */\n      ) {\n          this.stateInAttributeValueNoQuotes(c);\n        } else if (this._state === 4\n      /* InSelfClosingTag */\n      ) {\n          this.stateInSelfClosingTag(c);\n        } else if (this._state === 16\n      /* InDeclaration */\n      ) {\n          this.stateInDeclaration(c);\n        } else if (this._state === 15\n      /* BeforeDeclaration */\n      ) {\n          this.stateBeforeDeclaration(c);\n        } else if (this._state === 18\n      /* BeforeComment */\n      ) {\n          this.stateBeforeComment(c);\n        } else if (this._state === 17\n      /* InProcessingInstruction */\n      ) {\n          this.stateInProcessingInstruction(c);\n        } else if (this._state === 27\n      /* InNamedEntity */\n      ) {\n          this.stateInNamedEntity(c);\n        } else if (this._state === 25\n      /* BeforeEntity */\n      ) {\n          this.stateBeforeEntity(c);\n        } else if (this._state === 29\n      /* InHexEntity */\n      ) {\n          this.stateInHexEntity(c);\n        } else if (this._state === 28\n      /* InNumericEntity */\n      ) {\n          this.stateInNumericEntity(c);\n        } else {\n        // `this._state === State.BeforeNumericEntity`\n        this.stateBeforeNumericEntity(c);\n      }\n\n      this._index++;\n    }\n\n    this.cleanup();\n  };\n\n  Tokenizer.prototype.finish = function () {\n    if (this._state === 27\n    /* InNamedEntity */\n    ) {\n        this.emitNamedEntity();\n      } // If there is remaining data, emit it in a reasonable way\n\n\n    if (this.sectionStart < this._index) {\n      this.handleTrailingData();\n    }\n\n    this.cbs.onend();\n  };\n  /** Handle any trailing data. */\n\n\n  Tokenizer.prototype.handleTrailingData = function () {\n    var data = this.buffer.substr(this.sectionStart);\n\n    if (this._state === 21\n    /* InCommentLike */\n    ) {\n        if (this.currentSequence === Sequences.CdataEnd) {\n          this.cbs.oncdata(data);\n        } else {\n          this.cbs.oncomment(data);\n        }\n      } else if (this._state === 28\n    /* InNumericEntity */\n    && this.allowLegacyEntity()) {\n      this.decodeNumericEntity(10, false); // All trailing data will have been consumed\n    } else if (this._state === 29\n    /* InHexEntity */\n    && this.allowLegacyEntity()) {\n      this.decodeNumericEntity(16, false); // All trailing data will have been consumed\n    } else if (this._state === 3\n    /* InTagName */\n    || this._state === 8\n    /* BeforeAttributeName */\n    || this._state === 11\n    /* BeforeAttributeValue */\n    || this._state === 10\n    /* AfterAttributeName */\n    || this._state === 9\n    /* InAttributeName */\n    || this._state === 13\n    /* InAttributeValueSq */\n    || this._state === 12\n    /* InAttributeValueDq */\n    || this._state === 14\n    /* InAttributeValueNq */\n    || this._state === 6\n    /* InClosingTagName */\n    ) {\n        /*\n         * If we are currently in an opening or closing tag, us not calling the\n         * respective callback signals that the tag should be ignored.\n         */\n      } else {\n      this.cbs.ontext(data);\n    }\n  };\n\n  Tokenizer.prototype.getSection = function () {\n    return this.buffer.substring(this.sectionStart, this._index);\n  };\n\n  Tokenizer.prototype.emitPartial = function (value) {\n    if (this.baseState !== 1\n    /* Text */\n    && this.baseState !== 24\n    /* InSpecialTag */\n    ) {\n        this.cbs.onattribdata(value);\n      } else {\n      this.cbs.ontext(value);\n    }\n  };\n\n  return Tokenizer;\n}();\n\nexports.default = Tokenizer;","map":{"version":3,"sources":["/home/rupak/Desktop/Project/Chat Application/chatApp_client/node_modules/htmlparser2/lib/Tokenizer.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","decode_codepoint_1","require","decode_1","isWhitespace","c","isEndOfTagSection","isNumber","isASCIIAlpha","Sequences","Cdata","Uint16Array","CdataEnd","CommentEnd","ScriptEnd","StyleEnd","TitleEnd","Tokenizer","_a","cbs","_b","xmlMode","_c","decodeEntities","_state","buffer","sectionStart","_index","bufferOffset","baseState","isSpecial","running","ended","sequenceIndex","trieIndex","trieCurrent","trieResult","entityExcess","entityTrie","xmlDecodeTree","htmlDecodeTree","prototype","reset","currentSequence","undefined","write","chunk","onerror","Error","parse","end","finish","pause","resume","length","getAbsoluteSectionStart","getAbsoluteIndex","stateText","fastForwardTo","ontext","getSection","stateSpecialStartSequence","isEnd","isMatch","stateInTagName","stateInSpecialTag","endOfText","actualIndex","stateInClosingTagName","Number","stateCDATASequence","stateInDeclaration","charCodeAt","stateInCommentLike","section","slice","oncdata","oncomment","isTagStartChar","startSpecial","sequence","offset","stateBeforeTagName","lower","onopentagname","stateBeforeAttributeName","stateBeforeClosingTagName","onclosetag","stateAfterClosingTagName","onopentagend","stateInSelfClosingTag","onselfclosingtag","stateInAttributeName","onattribname","stateAfterAttributeName","onattribend","stateBeforeAttributeValue","stateInAttributeValueNoQuotes","handleInAttributeValue","quote","onattribdata","String","fromCharCode","stateInAttributeValueDoubleQuotes","stateInAttributeValueSingleQuotes","stateBeforeDeclaration","ondeclaration","stateInProcessingInstruction","onprocessinginstruction","stateBeforeComment","stateInSpecialComment","stateBeforeSpecialS","stateBeforeEntity","stateInNamedEntity","determineBranch","emitNamedEntity","BinTrieFlags","HAS_VALUE","allowLegacyEntity","entityStart","emitPartial","substring","MULTI_BYTE","stateBeforeNumericEntity","stateInNumericEntity","decodeNumericEntity","base","strict","numberStart","entity","parsed","parseInt","default","stateInHexEntity","cleanup","substr","start","shouldContinue","handleTrailingData","onend","data"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\nvar decode_1 = require(\"entities/lib/decode\");\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 10 /* NewLine */ ||\n        c === 9 /* Tab */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\nfunction isEndOfTagSection(c) {\n    return c === 47 /* Slash */ || c === 62 /* Gt */ || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= 48 /* Zero */ && c <= 57 /* Nine */;\n}\nfunction isASCIIAlpha(c) {\n    return ((c >= 97 /* LowerA */ && c <= 122 /* LowerZ */) ||\n        (c >= 65 /* UpperA */ && c <= 90 /* UpperZ */));\n}\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */\nvar Sequences = {\n    Cdata: new Uint16Array([0x43, 0x44, 0x41, 0x54, 0x41, 0x5b]),\n    CdataEnd: new Uint16Array([0x5d, 0x5d, 0x3e]),\n    CommentEnd: new Uint16Array([0x2d, 0x2d, 0x3e]),\n    ScriptEnd: new Uint16Array([\n        0x3c, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,\n    ]),\n    StyleEnd: new Uint16Array([0x3c, 0x2f, 0x73, 0x74, 0x79, 0x6c, 0x65]),\n    TitleEnd: new Uint16Array([0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c, 0x65]), // `</title`\n};\nvar Tokenizer = /** @class */ (function () {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */\n        this._state = 1 /* Text */;\n        /** The read buffer. */\n        this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */\n        this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */\n        this._index = 0;\n        /**\n         * Data that has already been processed will be removed from the buffer occasionally.\n         * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n         */\n        this.bufferOffset = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n        this.baseState = 1 /* Text */;\n        /** For special parsing behavior inside of script and style tags. */\n        this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */\n        this.running = true;\n        /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n        this.ended = false;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        this.trieResult = null;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_1.xmlDecodeTree : decode_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function () {\n        this._state = 1 /* Text */;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this._index = 0;\n        this.bufferOffset = 0;\n        this.baseState = 1 /* Text */;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.ended = false;\n    };\n    Tokenizer.prototype.write = function (chunk) {\n        if (this.ended)\n            return this.cbs.onerror(Error(\".write() after done!\"));\n        this.buffer += chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function (chunk) {\n        if (this.ended)\n            return this.cbs.onerror(Error(\".end() after done!\"));\n        if (chunk)\n            this.write(chunk);\n        this.ended = true;\n        if (this.running)\n            this.finish();\n    };\n    Tokenizer.prototype.pause = function () {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function () {\n        this.running = true;\n        if (this._index < this.buffer.length) {\n            this.parse();\n        }\n        if (this.ended) {\n            this.finish();\n        }\n    };\n    /**\n     * The start of the current section.\n     */\n    Tokenizer.prototype.getAbsoluteSectionStart = function () {\n        return this.sectionStart + this.bufferOffset;\n    };\n    /**\n     * The current index within all of the written data.\n     */\n    Tokenizer.prototype.getAbsoluteIndex = function () {\n        return this.bufferOffset + this._index;\n    };\n    Tokenizer.prototype.stateText = function (c) {\n        if (c === 60 /* Lt */ ||\n            (!this.decodeEntities && this.fastForwardTo(60 /* Lt */))) {\n            if (this._index > this.sectionStart) {\n                this.cbs.ontext(this.getSection());\n            }\n            this._state = 2 /* BeforeTagName */;\n            this.sectionStart = this._index;\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function (c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd\n            ? // If we are at the end of the sequence, make sure the tag name has ended\n                isEndOfTagSection(c)\n            : // Otherwise, do a case-insensitive comparison\n                (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        }\n        else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this._state = 3 /* InTagName */;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */\n    Tokenizer.prototype.stateInSpecialTag = function (c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === 62 /* Gt */ || isWhitespace(c)) {\n                var endOfText = this._index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this._index;\n                    this._index = endOfText;\n                    this.cbs.ontext(this.getSection());\n                    this._index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        }\n        else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === 38 /* Amp */) {\n                    this._state = 25 /* BeforeEntity */;\n                }\n            }\n            else if (this.fastForwardTo(60 /* Lt */)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        }\n        else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === 60 /* Lt */);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function (c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this._state = 21 /* InCommentLike */;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this._index + 1;\n            }\n        }\n        else {\n            this.sequenceIndex = 0;\n            this._state = 16 /* InDeclaration */;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */\n    Tokenizer.prototype.fastForwardTo = function (c) {\n        while (++this._index < this.buffer.length) {\n            if (this.buffer.charCodeAt(this._index) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */\n        this._index = this.buffer.length - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */\n    Tokenizer.prototype.stateInCommentLike = function (c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                // Remove 2 trailing chars\n                var section = this.buffer.slice(this.sectionStart, this._index - 2);\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(section);\n                }\n                else {\n                    this.cbs.oncomment(section);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this._index + 1;\n                this._state = 1 /* Text */;\n            }\n        }\n        else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        }\n        else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */\n    Tokenizer.prototype.isTagStartChar = function (c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function (sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this._state = 23 /* SpecialStartSequence */;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function (c) {\n        if (c === 33 /* ExclamationMark */) {\n            this._state = 15 /* BeforeDeclaration */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 63 /* Questionmark */) {\n            this._state = 17 /* InProcessingInstruction */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this._index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            }\n            else {\n                this._state =\n                    !this.xmlMode && lower === Sequences.ScriptEnd[2]\n                        ? 22 /* BeforeSpecialS */\n                        : 3 /* InTagName */;\n            }\n        }\n        else if (c === 47 /* Slash */) {\n            this._state = 5 /* BeforeClosingTagName */;\n        }\n        else {\n            this._state = 1 /* Text */;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function (c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n        if (isWhitespace(c)) {\n            // Ignore\n        }\n        else if (c === 62 /* Gt */) {\n            this._state = 1 /* Text */;\n        }\n        else {\n            this._state = this.isTagStartChar(c)\n                ? 6 /* InClosingTagName */\n                : 20 /* InSpecialComment */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function (c) {\n        if (c === 62 /* Gt */ || isWhitespace(c)) {\n            this.cbs.onclosetag(this.getSection());\n            this.sectionStart = -1;\n            this._state = 7 /* AfterClosingTagName */;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n        // Skip everything until \">\"\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n        if (c === 62 /* Gt */) {\n            this.cbs.onopentagend();\n            if (this.isSpecial) {\n                this._state = 24 /* InSpecialTag */;\n                this.sequenceIndex = 0;\n            }\n            else {\n                this._state = 1 /* Text */;\n            }\n            this.baseState = this._state;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 47 /* Slash */) {\n            this._state = 4 /* InSelfClosingTag */;\n        }\n        else if (!isWhitespace(c)) {\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n        if (c === 62 /* Gt */) {\n            this.cbs.onselfclosingtag();\n            this._state = 1 /* Text */;\n            this.baseState = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        }\n        else if (!isWhitespace(c)) {\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function (c) {\n        if (c === 61 /* Eq */ || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.getSection());\n            this.sectionStart = -1;\n            this._state = 10 /* AfterAttributeName */;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function (c) {\n        if (c === 61 /* Eq */) {\n            this._state = 11 /* BeforeAttributeValue */;\n        }\n        else if (c === 47 /* Slash */ || c === 62 /* Gt */) {\n            this.cbs.onattribend(undefined);\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (!isWhitespace(c)) {\n            this.cbs.onattribend(undefined);\n            this._state = 9 /* InAttributeName */;\n            this.sectionStart = this._index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n        if (c === 34 /* DoubleQuote */) {\n            this._state = 12 /* InAttributeValueDq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (c === 39 /* SingleQuote */) {\n            this._state = 13 /* InAttributeValueSq */;\n            this.sectionStart = this._index + 1;\n        }\n        else if (!isWhitespace(c)) {\n            this.sectionStart = this._index;\n            this._state = 14 /* InAttributeValueNq */;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n        if (c === quote ||\n            (!this.decodeEntities && this.fastForwardTo(quote))) {\n            this.cbs.onattribdata(this.getSection());\n            this.sectionStart = -1;\n            this.cbs.onattribend(String.fromCharCode(quote));\n            this._state = 8 /* BeforeAttributeName */;\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this.baseState = this._state;\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n        this.handleInAttributeValue(c, 34 /* DoubleQuote */);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n        this.handleInAttributeValue(c, 39 /* SingleQuote */);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n        if (isWhitespace(c) || c === 62 /* Gt */) {\n            this.cbs.onattribdata(this.getSection());\n            this.sectionStart = -1;\n            this.cbs.onattribend(null);\n            this._state = 8 /* BeforeAttributeName */;\n            this.stateBeforeAttributeName(c);\n        }\n        else if (this.decodeEntities && c === 38 /* Amp */) {\n            this.baseState = this._state;\n            this._state = 25 /* BeforeEntity */;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n        if (c === 91 /* OpeningSquareBracket */) {\n            this._state = 19 /* CDATASequence */;\n            this.sequenceIndex = 0;\n        }\n        else {\n            this._state =\n                c === 45 /* Dash */\n                    ? 18 /* BeforeComment */\n                    : 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.ondeclaration(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.onprocessinginstruction(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function (c) {\n        if (c === 45 /* Dash */) {\n            this._state = 21 /* InCommentLike */;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this._index + 1;\n        }\n        else {\n            this._state = 16 /* InDeclaration */;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function (c) {\n        if (c === 62 /* Gt */ || this.fastForwardTo(62 /* Gt */)) {\n            this.cbs.oncomment(this.getSection());\n            this._state = 1 /* Text */;\n            this.sectionStart = this._index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        }\n        else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        }\n        else {\n            this._state = 3 /* InTagName */;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function (c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        if (c === 35 /* Num */) {\n            this._state = 26 /* BeforeNumericEntity */;\n        }\n        else if (c === 38 /* Amp */) {\n            // We have two `&` characters in a row. Stay in the current state.\n        }\n        else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.trieResult = null;\n            this._state = 27 /* InNamedEntity */;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function (c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this._index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        // If the branch is a value, store it and continue\n        if (this.trieCurrent & decode_1.BinTrieFlags.HAS_VALUE) {\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== 59 /* Semi */) {\n                // No need to consider multi-byte values, as the legacy entity is always a single byte\n                this.trieIndex += 1;\n            }\n            else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this._index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n                }\n                // If this is a surrogate pair, combine the higher bits from the node with the next byte\n                this.trieResult =\n                    this.trieCurrent & decode_1.BinTrieFlags.MULTI_BYTE\n                        ? String.fromCharCode(this.entityTrie[++this.trieIndex], this.entityTrie[++this.trieIndex])\n                        : String.fromCharCode(this.entityTrie[++this.trieIndex]);\n                this.entityExcess = 0;\n                this.sectionStart = this._index + 1;\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function () {\n        if (this.trieResult) {\n            this.emitPartial(this.trieResult);\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function (c) {\n        if ((c | 0x20) === 120 /* LowerX */) {\n            this.entityExcess++;\n            this._state = 29 /* InHexEntity */;\n        }\n        else {\n            this._state = 28 /* InNumericEntity */;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.decodeNumericEntity = function (base, strict) {\n        var entityStart = this._index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + (base >> 4);\n        if (numberStart !== this._index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.buffer.substring(this.sectionStart, entityStart));\n            }\n            // Parse entity\n            var entity = this.buffer.substring(numberStart, this._index);\n            var parsed = parseInt(entity, base);\n            this.emitPartial((0, decode_codepoint_1.default)(parsed));\n            this.sectionStart = this._index + Number(strict);\n        }\n        this._state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function (c) {\n        if (c === 59 /* Semi */) {\n            this.decodeNumericEntity(10, true);\n        }\n        else if (!isNumber(c)) {\n            if (this.allowLegacyEntity()) {\n                this.decodeNumericEntity(10, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n        else {\n            this.entityExcess++;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function (c) {\n        if (c === 59 /* Semi */) {\n            this.decodeNumericEntity(16, true);\n        }\n        else if ((c < 97 /* LowerA */ || c > 102 /* LowerF */) &&\n            (c < 65 /* UpperA */ || c > 70 /* UpperF */) &&\n            !isNumber(c)) {\n            if (this.allowLegacyEntity()) {\n                this.decodeNumericEntity(16, false);\n            }\n            else {\n                this._state = this.baseState;\n            }\n            this._index--;\n        }\n        else {\n            this.entityExcess++;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function () {\n        return (!this.xmlMode &&\n            (this.baseState === 1 /* Text */ ||\n                this.baseState === 24 /* InSpecialTag */));\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */\n    Tokenizer.prototype.cleanup = function () {\n        // If we are inside of text, emit what we already have.\n        if (this.running &&\n            this.sectionStart !== this._index &&\n            (this._state === 1 /* Text */ ||\n                (this._state === 24 /* InSpecialTag */ &&\n                    this.sequenceIndex === 0))) {\n            // TODO: We could emit attribute data here as well.\n            this.cbs.ontext(this.buffer.substr(this.sectionStart));\n            this.sectionStart = this._index;\n        }\n        var start = this.sectionStart < 0 ? this._index : this.sectionStart;\n        this.buffer =\n            start === this.buffer.length ? \"\" : this.buffer.substr(start);\n        this._index -= start;\n        this.bufferOffset += start;\n        if (this.sectionStart > 0) {\n            this.sectionStart = 0;\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function () {\n        return this._index < this.buffer.length && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */\n    Tokenizer.prototype.parse = function () {\n        while (this.shouldContinue()) {\n            var c = this.buffer.charCodeAt(this._index);\n            if (this._state === 1 /* Text */) {\n                this.stateText(c);\n            }\n            else if (this._state === 23 /* SpecialStartSequence */) {\n                this.stateSpecialStartSequence(c);\n            }\n            else if (this._state === 24 /* InSpecialTag */) {\n                this.stateInSpecialTag(c);\n            }\n            else if (this._state === 19 /* CDATASequence */) {\n                this.stateCDATASequence(c);\n            }\n            else if (this._state === 12 /* InAttributeValueDq */) {\n                this.stateInAttributeValueDoubleQuotes(c);\n            }\n            else if (this._state === 9 /* InAttributeName */) {\n                this.stateInAttributeName(c);\n            }\n            else if (this._state === 21 /* InCommentLike */) {\n                this.stateInCommentLike(c);\n            }\n            else if (this._state === 20 /* InSpecialComment */) {\n                this.stateInSpecialComment(c);\n            }\n            else if (this._state === 8 /* BeforeAttributeName */) {\n                this.stateBeforeAttributeName(c);\n            }\n            else if (this._state === 3 /* InTagName */) {\n                this.stateInTagName(c);\n            }\n            else if (this._state === 6 /* InClosingTagName */) {\n                this.stateInClosingTagName(c);\n            }\n            else if (this._state === 2 /* BeforeTagName */) {\n                this.stateBeforeTagName(c);\n            }\n            else if (this._state === 10 /* AfterAttributeName */) {\n                this.stateAfterAttributeName(c);\n            }\n            else if (this._state === 13 /* InAttributeValueSq */) {\n                this.stateInAttributeValueSingleQuotes(c);\n            }\n            else if (this._state === 11 /* BeforeAttributeValue */) {\n                this.stateBeforeAttributeValue(c);\n            }\n            else if (this._state === 5 /* BeforeClosingTagName */) {\n                this.stateBeforeClosingTagName(c);\n            }\n            else if (this._state === 7 /* AfterClosingTagName */) {\n                this.stateAfterClosingTagName(c);\n            }\n            else if (this._state === 22 /* BeforeSpecialS */) {\n                this.stateBeforeSpecialS(c);\n            }\n            else if (this._state === 14 /* InAttributeValueNq */) {\n                this.stateInAttributeValueNoQuotes(c);\n            }\n            else if (this._state === 4 /* InSelfClosingTag */) {\n                this.stateInSelfClosingTag(c);\n            }\n            else if (this._state === 16 /* InDeclaration */) {\n                this.stateInDeclaration(c);\n            }\n            else if (this._state === 15 /* BeforeDeclaration */) {\n                this.stateBeforeDeclaration(c);\n            }\n            else if (this._state === 18 /* BeforeComment */) {\n                this.stateBeforeComment(c);\n            }\n            else if (this._state === 17 /* InProcessingInstruction */) {\n                this.stateInProcessingInstruction(c);\n            }\n            else if (this._state === 27 /* InNamedEntity */) {\n                this.stateInNamedEntity(c);\n            }\n            else if (this._state === 25 /* BeforeEntity */) {\n                this.stateBeforeEntity(c);\n            }\n            else if (this._state === 29 /* InHexEntity */) {\n                this.stateInHexEntity(c);\n            }\n            else if (this._state === 28 /* InNumericEntity */) {\n                this.stateInNumericEntity(c);\n            }\n            else {\n                // `this._state === State.BeforeNumericEntity`\n                this.stateBeforeNumericEntity(c);\n            }\n            this._index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function () {\n        if (this._state === 27 /* InNamedEntity */) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this._index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */\n    Tokenizer.prototype.handleTrailingData = function () {\n        var data = this.buffer.substr(this.sectionStart);\n        if (this._state === 21 /* InCommentLike */) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(data);\n            }\n            else {\n                this.cbs.oncomment(data);\n            }\n        }\n        else if (this._state === 28 /* InNumericEntity */ &&\n            this.allowLegacyEntity()) {\n            this.decodeNumericEntity(10, false);\n            // All trailing data will have been consumed\n        }\n        else if (this._state === 29 /* InHexEntity */ &&\n            this.allowLegacyEntity()) {\n            this.decodeNumericEntity(16, false);\n            // All trailing data will have been consumed\n        }\n        else if (this._state === 3 /* InTagName */ ||\n            this._state === 8 /* BeforeAttributeName */ ||\n            this._state === 11 /* BeforeAttributeValue */ ||\n            this._state === 10 /* AfterAttributeName */ ||\n            this._state === 9 /* InAttributeName */ ||\n            this._state === 13 /* InAttributeValueSq */ ||\n            this._state === 12 /* InAttributeValueDq */ ||\n            this._state === 14 /* InAttributeValueNq */ ||\n            this._state === 6 /* InClosingTagName */) {\n            /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */\n        }\n        else {\n            this.cbs.ontext(data);\n        }\n    };\n    Tokenizer.prototype.getSection = function () {\n        return this.buffer.substring(this.sectionStart, this._index);\n    };\n    Tokenizer.prototype.emitPartial = function (value) {\n        if (this.baseState !== 1 /* Text */ &&\n            this.baseState !== 24 /* InSpecialTag */) {\n            this.cbs.onattribdata(value);\n        }\n        else {\n            this.cbs.ontext(value);\n        }\n    };\n    return Tokenizer;\n}());\nexports.default = Tokenizer;\n"]},"metadata":{},"sourceType":"script"}