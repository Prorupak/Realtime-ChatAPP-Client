{"ast":null,"code":"import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\n\nvar UnMemoizedChannelHeader = function (props) {\n  var _a = props.Avatar,\n      Avatar = _a === void 0 ? DefaultAvatar : _a,\n      propImage = props.image,\n      live = props.live,\n      title = props.title;\n\n  var _b = useChannelStateContext('ChannelHeader'),\n      channel = _b.channel,\n      watcher_count = _b.watcher_count;\n\n  var openMobileNav = useChatContext('ChannelHeader').openMobileNav;\n  var t = useTranslationContext('ChannelHeader').t;\n\n  var _c = (channel === null || channel === void 0 ? void 0 : channel.data) || {},\n      channelImage = _c.image,\n      member_count = _c.member_count,\n      name = _c.name,\n      subtitle = _c.subtitle;\n\n  var image = propImage || channelImage;\n  return React.createElement(\"div\", {\n    className: 'str-chat__header-livestream'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__header-hamburger',\n    onClick: openMobileNav\n  }, React.createElement(\"span\", {\n    className: 'str-chat__header-hamburger--line'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__header-hamburger--line'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__header-hamburger--line'\n  })), image && React.createElement(Avatar, {\n    image: image,\n    shape: 'rounded',\n    size: (channel === null || channel === void 0 ? void 0 : channel.type) === 'commerce' ? 60 : 40\n  }), React.createElement(\"div\", {\n    className: 'str-chat__header-livestream-left'\n  }, React.createElement(\"p\", {\n    className: 'str-chat__header-livestream-left--title'\n  }, title || name, ' ', live && React.createElement(\"span\", {\n    className: 'str-chat__header-livestream-left--livelabel'\n  }, t('live'))), subtitle && React.createElement(\"p\", {\n    className: 'str-chat__header-livestream-left--subtitle'\n  }, subtitle), React.createElement(\"p\", {\n    className: 'str-chat__header-livestream-left--members'\n  }, !live && !!member_count && member_count > 0 && React.createElement(React.Fragment, null, t('{{ memberCount }} members', {\n    memberCount: member_count\n  }), \",\", ' '), t('{{ watcherCount }} online', {\n    watcherCount: watcher_count\n  }))));\n};\n/**\n * The ChannelHeader component renders some basic information about a Channel.\n */\n\n\nexport var ChannelHeader = React.memo(UnMemoizedChannelHeader);","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/ChannelHeader/ChannelHeader.js"],"names":["React","Avatar","DefaultAvatar","useChannelStateContext","useChatContext","useTranslationContext","UnMemoizedChannelHeader","props","_a","propImage","image","live","title","_b","channel","watcher_count","openMobileNav","t","_c","data","channelImage","member_count","name","subtitle","createElement","className","onClick","shape","size","type","Fragment","memberCount","watcherCount","ChannelHeader","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedChannelHeader = function (props) {\n    var _a = props.Avatar, Avatar = _a === void 0 ? DefaultAvatar : _a, propImage = props.image, live = props.live, title = props.title;\n    var _b = useChannelStateContext('ChannelHeader'), channel = _b.channel, watcher_count = _b.watcher_count;\n    var openMobileNav = useChatContext('ChannelHeader').openMobileNav;\n    var t = useTranslationContext('ChannelHeader').t;\n    var _c = (channel === null || channel === void 0 ? void 0 : channel.data) || {}, channelImage = _c.image, member_count = _c.member_count, name = _c.name, subtitle = _c.subtitle;\n    var image = propImage || channelImage;\n    return (React.createElement(\"div\", { className: 'str-chat__header-livestream' },\n        React.createElement(\"div\", { className: 'str-chat__header-hamburger', onClick: openMobileNav },\n            React.createElement(\"span\", { className: 'str-chat__header-hamburger--line' }),\n            React.createElement(\"span\", { className: 'str-chat__header-hamburger--line' }),\n            React.createElement(\"span\", { className: 'str-chat__header-hamburger--line' })),\n        image && (React.createElement(Avatar, { image: image, shape: 'rounded', size: (channel === null || channel === void 0 ? void 0 : channel.type) === 'commerce' ? 60 : 40 })),\n        React.createElement(\"div\", { className: 'str-chat__header-livestream-left' },\n            React.createElement(\"p\", { className: 'str-chat__header-livestream-left--title' },\n                title || name,\n                ' ',\n                live && React.createElement(\"span\", { className: 'str-chat__header-livestream-left--livelabel' }, t('live'))),\n            subtitle && React.createElement(\"p\", { className: 'str-chat__header-livestream-left--subtitle' }, subtitle),\n            React.createElement(\"p\", { className: 'str-chat__header-livestream-left--members' },\n                !live && !!member_count && member_count > 0 && (React.createElement(React.Fragment, null,\n                    t('{{ memberCount }} members', {\n                        memberCount: member_count,\n                    }),\n                    \",\",\n                    ' ')),\n                t('{{ watcherCount }} online', { watcherCount: watcher_count })))));\n};\n/**\n * The ChannelHeader component renders some basic information about a Channel.\n */\nexport var ChannelHeader = React.memo(UnMemoizedChannelHeader);\n"]},"metadata":{},"sourceType":"module"}