{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport var ChatContext = React.createContext(undefined);\nexport var ChatProvider = function ChatProvider(_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(ChatContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useChatContext = function useChatContext(componentName) {\n  var contextValue = useContext(ChatContext);\n\n  if (!contextValue) {\n    console.warn(\"The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the \" + componentName + \" component.\");\n    return {};\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withChatContext = function withChatContext(Component) {\n  var WithChatContextComponent = function WithChatContextComponent(props) {\n    var chatContext = useChatContext();\n    return React.createElement(Component, __assign({}, props, chatContext));\n  };\n\n  WithChatContextComponent.displayName = \"WithChatContext\" + getDisplayName(Component);\n  return WithChatContextComponent;\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/context/ChatContext.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","getDisplayName","ChatContext","createContext","undefined","ChatProvider","_a","children","value","createElement","Provider","useChatContext","componentName","contextValue","console","warn","withChatContext","Component","WithChatContextComponent","props","chatContext","displayName"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd;AAAiB,YAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AADJ;AAEH;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAO,IAAIC,WAAW,GAAGH,KAAK,CAACI,aAAN,CAAoBC,SAApB,CAAlB;AACP,OAAO,IAAIC,YAAY,GAAG,SAAfA,YAAe,CAAUC,EAAV,EAAc;AACpC,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQT,KAAK,CAACU,aAAN,CAAoBP,WAAW,CAACQ,QAAhC,EAA0C;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAA1C,EAA4DD,QAA5D,CAAR;AACH,CAHM;AAIP,OAAO,IAAII,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,aAAV,EAAyB;AACjD,MAAIC,YAAY,GAAGb,UAAU,CAACE,WAAD,CAA7B;;AACA,MAAI,CAACW,YAAL,EAAmB;AACfC,IAAAA,OAAO,CAACC,IAAR,CAAa,oLAAoLH,aAApL,GAAoM,aAAjN;AACA,WAAO,EAAP;AACH;;AACD,SAAOC,YAAP;AACH,CAPM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,eAAe,GAAG,SAAlBA,eAAkB,CAAUC,SAAV,EAAqB;AAC9C,MAAIC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAUC,KAAV,EAAiB;AAC5C,QAAIC,WAAW,GAAGT,cAAc,EAAhC;AACA,WAAOZ,KAAK,CAACU,aAAN,CAAoBQ,SAApB,EAA+BhC,QAAQ,CAAC,EAAD,EAAKkC,KAAL,EAAYC,WAAZ,CAAvC,CAAP;AACH,GAHD;;AAIAF,EAAAA,wBAAwB,CAACG,WAAzB,GAAuC,oBAAoBpB,cAAc,CAACgB,SAAD,CAAzE;AACA,SAAOC,wBAAP;AACH,CAPM","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport var ChatContext = React.createContext(undefined);\nexport var ChatProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(ChatContext.Provider, { value: value }, children));\n};\nexport var useChatContext = function (componentName) {\n    var contextValue = useContext(ChatContext);\n    if (!contextValue) {\n        console.warn(\"The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the \" + componentName + \" component.\");\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withChatContext = function (Component) {\n    var WithChatContextComponent = function (props) {\n        var chatContext = useChatContext();\n        return React.createElement(Component, __assign({}, props, chatContext));\n    };\n    WithChatContextComponent.displayName = \"WithChatContext\" + getDisplayName(Component);\n    return WithChatContextComponent;\n};\n"]},"metadata":{},"sourceType":"module"}