{"ast":null,"code":"import { useMemo, useRef } from 'react';\nexport function usePrependedMessagesCount(messages) {\n  var _a;\n\n  var currentFirstMessageId = (_a = messages === null || messages === void 0 ? void 0 : messages[0]) === null || _a === void 0 ? void 0 : _a.id;\n  var firstMessageId = useRef(currentFirstMessageId);\n  var earliestMessageId = useRef(currentFirstMessageId);\n  var previousNumItemsPrepended = useRef(0);\n  var numItemsPrepended = useMemo(function () {\n    if (!messages || !messages.length) {\n      return 0;\n    } // if no new messages were prepended, return early (same amount as before)\n\n\n    if (currentFirstMessageId === earliestMessageId.current) {\n      return previousNumItemsPrepended.current;\n    }\n\n    if (!firstMessageId.current) {\n      firstMessageId.current = currentFirstMessageId;\n    }\n\n    earliestMessageId.current = currentFirstMessageId; // if new messages were prepended, find out how many\n    // start with this number because there cannot be fewer prepended items than before\n\n    for (var i = previousNumItemsPrepended.current; i < messages.length; i += 1) {\n      if (messages[i].id === firstMessageId.current) {\n        previousNumItemsPrepended.current = i;\n        return i;\n      }\n    }\n\n    return 0; // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n    // that's why the second dependency is necessary\n  }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);\n  return numItemsPrepended;\n}","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/usePrependMessagesCount.js"],"names":["useMemo","useRef","usePrependedMessagesCount","messages","_a","currentFirstMessageId","id","firstMessageId","earliestMessageId","previousNumItemsPrepended","numItemsPrepended","length","current","i"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAO,SAASC,yBAAT,CAAmCC,QAAnC,EAA6C;AAChD,MAAIC,EAAJ;;AACA,MAAIC,qBAAqB,GAAG,CAACD,EAAE,GAAGD,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAAC,CAAD,CAAlE,MAA2E,IAA3E,IAAmFC,EAAE,KAAK,KAAK,CAA/F,GAAmG,KAAK,CAAxG,GAA4GA,EAAE,CAACE,EAA3I;AACA,MAAIC,cAAc,GAAGN,MAAM,CAACI,qBAAD,CAA3B;AACA,MAAIG,iBAAiB,GAAGP,MAAM,CAACI,qBAAD,CAA9B;AACA,MAAII,yBAAyB,GAAGR,MAAM,CAAC,CAAD,CAAtC;AACA,MAAIS,iBAAiB,GAAGV,OAAO,CAAC,YAAY;AACxC,QAAI,CAACG,QAAD,IAAa,CAACA,QAAQ,CAACQ,MAA3B,EAAmC;AAC/B,aAAO,CAAP;AACH,KAHuC,CAIxC;;;AACA,QAAIN,qBAAqB,KAAKG,iBAAiB,CAACI,OAAhD,EAAyD;AACrD,aAAOH,yBAAyB,CAACG,OAAjC;AACH;;AACD,QAAI,CAACL,cAAc,CAACK,OAApB,EAA6B;AACzBL,MAAAA,cAAc,CAACK,OAAf,GAAyBP,qBAAzB;AACH;;AACDG,IAAAA,iBAAiB,CAACI,OAAlB,GAA4BP,qBAA5B,CAXwC,CAYxC;AACA;;AACA,SAAK,IAAIQ,CAAC,GAAGJ,yBAAyB,CAACG,OAAvC,EAAgDC,CAAC,GAAGV,QAAQ,CAACQ,MAA7D,EAAqEE,CAAC,IAAI,CAA1E,EAA6E;AACzE,UAAIV,QAAQ,CAACU,CAAD,CAAR,CAAYP,EAAZ,KAAmBC,cAAc,CAACK,OAAtC,EAA+C;AAC3CH,QAAAA,yBAAyB,CAACG,OAA1B,GAAoCC,CAApC;AACA,eAAOA,CAAP;AACH;AACJ;;AACD,WAAO,CAAP,CApBwC,CAqBxC;AACA;AACH,GAvB8B,EAuB5B,CAACV,QAAD,EAAWA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACQ,MAAxE,CAvB4B,CAA/B;AAwBA,SAAOD,iBAAP;AACH","sourcesContent":["import { useMemo, useRef } from 'react';\nexport function usePrependedMessagesCount(messages) {\n    var _a;\n    var currentFirstMessageId = (_a = messages === null || messages === void 0 ? void 0 : messages[0]) === null || _a === void 0 ? void 0 : _a.id;\n    var firstMessageId = useRef(currentFirstMessageId);\n    var earliestMessageId = useRef(currentFirstMessageId);\n    var previousNumItemsPrepended = useRef(0);\n    var numItemsPrepended = useMemo(function () {\n        if (!messages || !messages.length) {\n            return 0;\n        }\n        // if no new messages were prepended, return early (same amount as before)\n        if (currentFirstMessageId === earliestMessageId.current) {\n            return previousNumItemsPrepended.current;\n        }\n        if (!firstMessageId.current) {\n            firstMessageId.current = currentFirstMessageId;\n        }\n        earliestMessageId.current = currentFirstMessageId;\n        // if new messages were prepended, find out how many\n        // start with this number because there cannot be fewer prepended items than before\n        for (var i = previousNumItemsPrepended.current; i < messages.length; i += 1) {\n            if (messages[i].id === firstMessageId.current) {\n                previousNumItemsPrepended.current = i;\n                return i;\n            }\n        }\n        return 0;\n        // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n        // that's why the second dependency is necessary\n    }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);\n    return numItemsPrepended;\n}\n"]},"metadata":{},"sourceType":"module"}