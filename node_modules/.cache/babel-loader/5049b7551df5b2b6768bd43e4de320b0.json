{"ast":null,"code":"import _toConsumableArray from \"/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport deburr from 'lodash.deburr';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport builtinReplacements from './replacements.js';\n\nvar doCustomReplacements = function doCustomReplacements(string, replacements) {\n  var _iterator = _createForOfIteratorHelper(replacements),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n\n      // TODO: Use `String#replaceAll()` when targeting Node.js 16.\n      string = string.replace(new RegExp(escapeStringRegexp(key), 'g'), value);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return string;\n};\n\nexport default function transliterate(string, options) {\n  if (typeof string !== 'string') {\n    throw new TypeError(\"Expected a string, got `\".concat(typeof string, \"`\"));\n  }\n\n  options = _objectSpread({\n    customReplacements: []\n  }, options);\n  var customReplacements = new Map([].concat(_toConsumableArray(builtinReplacements), _toConsumableArray(options.customReplacements)));\n  string = string.normalize();\n  string = doCustomReplacements(string, customReplacements);\n  string = deburr(string);\n  return string;\n}","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/@sindresorhus/transliterate/index.js"],"names":["deburr","escapeStringRegexp","builtinReplacements","doCustomReplacements","string","replacements","key","value","replace","RegExp","transliterate","options","TypeError","customReplacements","Map","normalize"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD,EAASC,YAAT,EAA0B;AAAA,6CAC3BA,YAD2B;AAAA;;AAAA;AACtD,wDAAyC;AAAA;AAAA,UAA7BC,GAA6B;AAAA,UAAxBC,KAAwB;;AACxC;AACAH,MAAAA,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAe,IAAIC,MAAJ,CAAWR,kBAAkB,CAACK,GAAD,CAA7B,EAAoC,GAApC,CAAf,EAAyDC,KAAzD,CAAT;AACA;AAJqD;AAAA;AAAA;AAAA;AAAA;;AAMtD,SAAOH,MAAP;AACA,CAPD;;AASA,eAAe,SAASM,aAAT,CAAuBN,MAAvB,EAA+BO,OAA/B,EAAwC;AACtD,MAAI,OAAOP,MAAP,KAAkB,QAAtB,EAAgC;AAC/B,UAAM,IAAIQ,SAAJ,mCAA0C,OAAOR,MAAjD,OAAN;AACA;;AAEDO,EAAAA,OAAO;AACNE,IAAAA,kBAAkB,EAAE;AADd,KAEHF,OAFG,CAAP;AAKA,MAAME,kBAAkB,GAAG,IAAIC,GAAJ,8BACvBZ,mBADuB,sBAEvBS,OAAO,CAACE,kBAFe,GAA3B;AAKAT,EAAAA,MAAM,GAAGA,MAAM,CAACW,SAAP,EAAT;AACAX,EAAAA,MAAM,GAAGD,oBAAoB,CAACC,MAAD,EAASS,kBAAT,CAA7B;AACAT,EAAAA,MAAM,GAAGJ,MAAM,CAACI,MAAD,CAAf;AAEA,SAAOA,MAAP;AACA","sourcesContent":["import deburr from 'lodash.deburr';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport builtinReplacements from './replacements.js';\n\nconst doCustomReplacements = (string, replacements) => {\n\tfor (const [key, value] of replacements) {\n\t\t// TODO: Use `String#replaceAll()` when targeting Node.js 16.\n\t\tstring = string.replace(new RegExp(escapeStringRegexp(key), 'g'), value);\n\t}\n\n\treturn string;\n};\n\nexport default function transliterate(string, options) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got \\`${typeof string}\\``);\n\t}\n\n\toptions = {\n\t\tcustomReplacements: [],\n\t\t...options\n\t};\n\n\tconst customReplacements = new Map([\n\t\t...builtinReplacements,\n\t\t...options.customReplacements\n\t]);\n\n\tstring = string.normalize();\n\tstring = doCustomReplacements(string, customReplacements);\n\tstring = deburr(string);\n\n\treturn string;\n}\n"]},"metadata":{},"sourceType":"module"}