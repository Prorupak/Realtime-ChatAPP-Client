{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function CooldownTimer(props) {\n  var cooldownInterval = props.cooldownInterval,\n      setCooldownRemaining = props.setCooldownRemaining;\n\n  var _a = useState(cooldownInterval),\n      seconds = _a[0],\n      setSeconds = _a[1];\n\n  useEffect(function () {\n    var countdownInterval = setInterval(function () {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      } else {\n        setCooldownRemaining(0);\n      }\n    }, 1000);\n    return function () {\n      return clearInterval(countdownInterval);\n    };\n  });\n  return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nvar rolesToSkip = {\n  admin: true,\n  channel_moderator: true,\n  moderator: true\n};\n\nvar checkUserRoles = function checkUserRoles(globalRole, channelRole) {\n  var skipGlobal = !!rolesToSkip[globalRole];\n  var skipChannel = !!rolesToSkip[channelRole];\n  return skipGlobal || skipChannel;\n};\n\nexport var useCooldownTimer = function useCooldownTimer() {\n  var _a, _b;\n\n  var client = useChatContext('useCooldownTimer').client;\n  var channel = useChannelStateContext('useCooldownTimer').channel;\n  var cooldownInterval = (channel.data || {}).cooldown;\n\n  var _c = useState(),\n      cooldownRemaining = _c[0],\n      setCooldownRemaining = _c[1];\n\n  var globalRole = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) || '';\n  var channelRole = ((_b = channel.state.members[client.userID || '']) === null || _b === void 0 ? void 0 : _b.role) || '';\n  var skipCooldown = checkUserRoles(globalRole, channelRole);\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      var _a;\n\n      if (!skipCooldown && ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n        setCooldownRemaining(cooldownInterval);\n      }\n    };\n\n    if (cooldownInterval) channel.on('message.new', handleEvent);\n    return function () {\n      return channel.off('message.new', handleEvent);\n    };\n  }, [channel.id, cooldownInterval]);\n  return {\n    cooldownInterval: cooldownInterval || 0,\n    cooldownRemaining: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  };\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js"],"names":["React","useEffect","useState","useChatContext","useChannelStateContext","CooldownTimer","props","cooldownInterval","setCooldownRemaining","_a","seconds","setSeconds","countdownInterval","setInterval","clearInterval","createElement","rolesToSkip","admin","channel_moderator","moderator","checkUserRoles","globalRole","channelRole","skipGlobal","skipChannel","useCooldownTimer","_b","client","channel","data","cooldown","_c","cooldownRemaining","user","role","state","members","userID","skipCooldown","handleEvent","event","id","on","off"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n    var cooldownInterval = props.cooldownInterval, setCooldownRemaining = props.setCooldownRemaining;\n    var _a = useState(cooldownInterval), seconds = _a[0], setSeconds = _a[1];\n    useEffect(function () {\n        var countdownInterval = setInterval(function () {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            else {\n                setCooldownRemaining(0);\n            }\n        }, 1000);\n        return function () { return clearInterval(countdownInterval); };\n    });\n    return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nvar rolesToSkip = {\n    admin: true,\n    channel_moderator: true,\n    moderator: true,\n};\nvar checkUserRoles = function (globalRole, channelRole) {\n    var skipGlobal = !!rolesToSkip[globalRole];\n    var skipChannel = !!rolesToSkip[channelRole];\n    return skipGlobal || skipChannel;\n};\nexport var useCooldownTimer = function () {\n    var _a, _b;\n    var client = useChatContext('useCooldownTimer').client;\n    var channel = useChannelStateContext('useCooldownTimer').channel;\n    var cooldownInterval = (channel.data || {}).cooldown;\n    var _c = useState(), cooldownRemaining = _c[0], setCooldownRemaining = _c[1];\n    var globalRole = ((_a = client.user) === null || _a === void 0 ? void 0 : _a.role) || '';\n    var channelRole = ((_b = channel.state.members[client.userID || '']) === null || _b === void 0 ? void 0 : _b.role) || '';\n    var skipCooldown = checkUserRoles(globalRole, channelRole);\n    useEffect(function () {\n        var handleEvent = function (event) {\n            var _a;\n            if (!skipCooldown && ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {\n                setCooldownRemaining(cooldownInterval);\n            }\n        };\n        if (cooldownInterval)\n            channel.on('message.new', handleEvent);\n        return function () { return channel.off('message.new', handleEvent); };\n    }, [channel.id, cooldownInterval]);\n    return { cooldownInterval: cooldownInterval || 0, cooldownRemaining: cooldownRemaining, setCooldownRemaining: setCooldownRemaining };\n};\n"]},"metadata":{},"sourceType":"module"}