{"ast":null,"code":"import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\n\nexport var Chat = function (props) {\n  var children = props.children,\n      client = props.client,\n      customClasses = props.customClasses,\n      customStyles = props.customStyles,\n      _a = props.darkMode,\n      darkMode = _a === void 0 ? false : _a,\n      defaultLanguage = props.defaultLanguage,\n      i18nInstance = props.i18nInstance,\n      _b = props.initialNavOpen,\n      initialNavOpen = _b === void 0 ? true : _b,\n      _c = props.theme,\n      theme = _c === void 0 ? 'messaging light' : _c,\n      _d = props.useImageFlagEmojisOnWindows,\n      useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n\n  var _e = useChat({\n    client: client,\n    defaultLanguage: defaultLanguage,\n    i18nInstance: i18nInstance,\n    initialNavOpen: initialNavOpen\n  }),\n      channel = _e.channel,\n      closeMobileNav = _e.closeMobileNav,\n      getAppSettings = _e.getAppSettings,\n      mutes = _e.mutes,\n      navOpen = _e.navOpen,\n      openMobileNav = _e.openMobileNav,\n      setActiveChannel = _e.setActiveChannel,\n      translators = _e.translators;\n\n  useCustomStyles(darkMode ? darkModeTheme : customStyles);\n  var chatContextValue = useCreateChatContext({\n    channel: channel,\n    client: client,\n    closeMobileNav: closeMobileNav,\n    customClasses: customClasses,\n    getAppSettings: getAppSettings,\n    mutes: mutes,\n    navOpen: navOpen,\n    openMobileNav: openMobileNav,\n    setActiveChannel: setActiveChannel,\n    theme: theme,\n    useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows\n  });\n  if (!translators.t) return null;\n  return React.createElement(ChatProvider, {\n    value: chatContextValue\n  }, React.createElement(TranslationProvider, {\n    value: translators\n  }, children));\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/Chat/Chat.js"],"names":["React","useChat","useCreateChatContext","darkModeTheme","useCustomStyles","ChatProvider","TranslationProvider","Chat","props","children","client","customClasses","customStyles","_a","darkMode","defaultLanguage","i18nInstance","_b","initialNavOpen","_c","theme","_d","useImageFlagEmojisOnWindows","_e","channel","closeMobileNav","getAppSettings","mutes","navOpen","openMobileNav","setActiveChannel","translators","chatContextValue","t","createElement","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function (props) {\n    var children = props.children, client = props.client, customClasses = props.customClasses, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n    var _e = useChat({ client: client, defaultLanguage: defaultLanguage, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, getAppSettings = _e.getAppSettings, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;\n    useCustomStyles(darkMode ? darkModeTheme : customStyles);\n    var chatContextValue = useCreateChatContext({\n        channel: channel,\n        client: client,\n        closeMobileNav: closeMobileNav,\n        customClasses: customClasses,\n        getAppSettings: getAppSettings,\n        mutes: mutes,\n        navOpen: navOpen,\n        openMobileNav: openMobileNav,\n        setActiveChannel: setActiveChannel,\n        theme: theme,\n        useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,\n    });\n    if (!translators.t)\n        return null;\n    return (React.createElement(ChatProvider, { value: chatContextValue },\n        React.createElement(TranslationProvider, { value: translators }, children)));\n};\n"]},"metadata":{},"sourceType":"module"}