{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelUpdatedListener = function useChannelUpdatedListener(setChannels, customHandler, forceUpdate) {\n  var client = useChatContext('useChannelUpdatedListener').client;\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      setChannels(function (channels) {\n        var channelIndex = channels.findIndex(function (channel) {\n          var _a;\n\n          return channel.cid === ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid);\n        });\n\n        if (channelIndex > -1 && event.channel) {\n          var newChannels = channels;\n          newChannels[channelIndex].data = event.channel;\n          return __spreadArray([], newChannels);\n        }\n\n        return channels;\n      });\n\n      if (forceUpdate) {\n        forceUpdate();\n      }\n\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      }\n    };\n\n    client.on('channel.updated', handleEvent);\n    return function () {\n      client.off('channel.updated', handleEvent);\n    };\n  }, [customHandler]);\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelUpdatedListener.js"],"names":["__spreadArray","to","from","i","il","length","j","useEffect","useChatContext","useChannelUpdatedListener","setChannels","customHandler","forceUpdate","client","handleEvent","event","channels","channelIndex","findIndex","channel","_a","cid","newChannels","data","on","off"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACpE,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACG,MAArB,EAA6BC,CAAC,GAAGL,EAAE,CAACI,MAAzC,EAAiDF,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIG,CAAC,EAA/D;AACIL,IAAAA,EAAE,CAACK,CAAD,CAAF,GAAQJ,IAAI,CAACC,CAAD,CAAZ;AADJ;;AAEA,SAAOF,EAAP;AACH,CAJD;;AAKA,SAASM,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAO,IAAIC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,WAAtC,EAAmD;AACtF,MAAIC,MAAM,GAAGL,cAAc,CAAC,2BAAD,CAAd,CAA4CK,MAAzD;AACAN,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIO,WAAW,GAAG,SAAdA,WAAc,CAAUC,KAAV,EAAiB;AAC/BL,MAAAA,WAAW,CAAC,UAAUM,QAAV,EAAoB;AAC5B,YAAIC,YAAY,GAAGD,QAAQ,CAACE,SAAT,CAAmB,UAAUC,OAAV,EAAmB;AAAE,cAAIC,EAAJ;;AAAQ,iBAAOD,OAAO,CAACE,GAAR,MAAiB,CAACD,EAAE,GAAGL,KAAK,CAACI,OAAZ,MAAyB,IAAzB,IAAiCC,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACC,GAA9E,CAAP;AAA4F,SAA5I,CAAnB;;AACA,YAAIJ,YAAY,GAAG,CAAC,CAAhB,IAAqBF,KAAK,CAACI,OAA/B,EAAwC;AACpC,cAAIG,WAAW,GAAGN,QAAlB;AACAM,UAAAA,WAAW,CAACL,YAAD,CAAX,CAA0BM,IAA1B,GAAiCR,KAAK,CAACI,OAAvC;AACA,iBAAOnB,aAAa,CAAC,EAAD,EAAKsB,WAAL,CAApB;AACH;;AACD,eAAON,QAAP;AACH,OARU,CAAX;;AASA,UAAIJ,WAAJ,EAAiB;AACbA,QAAAA,WAAW;AACd;;AACD,UAAID,aAAa,IAAI,OAAOA,aAAP,KAAyB,UAA9C,EAA0D;AACtDA,QAAAA,aAAa,CAACD,WAAD,EAAcK,KAAd,CAAb;AACH;AACJ,KAhBD;;AAiBAF,IAAAA,MAAM,CAACW,EAAP,CAAU,iBAAV,EAA6BV,WAA7B;AACA,WAAO,YAAY;AACfD,MAAAA,MAAM,CAACY,GAAP,CAAW,iBAAX,EAA8BX,WAA9B;AACH,KAFD;AAGH,GAtBQ,EAsBN,CAACH,aAAD,CAtBM,CAAT;AAuBH,CAzBM","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelUpdatedListener = function (setChannels, customHandler, forceUpdate) {\n    var client = useChatContext('useChannelUpdatedListener').client;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            setChannels(function (channels) {\n                var channelIndex = channels.findIndex(function (channel) { var _a; return channel.cid === ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid); });\n                if (channelIndex > -1 && event.channel) {\n                    var newChannels = channels;\n                    newChannels[channelIndex].data = event.channel;\n                    return __spreadArray([], newChannels);\n                }\n                return channels;\n            });\n            if (forceUpdate) {\n                forceUpdate();\n            }\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n        };\n        client.on('channel.updated', handleEvent);\n        return function () {\n            client.off('channel.updated', handleEvent);\n        };\n    }, [customHandler]);\n};\n"]},"metadata":{},"sourceType":"module"}