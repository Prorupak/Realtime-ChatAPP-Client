{"ast":null,"code":"import React, { Suspense } from 'react';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\n\nvar filterEmoji = function (emoji) {\n  if (emoji.name === 'White Smiling Face' || emoji.name === 'White Frowning Face') {\n    return false;\n  }\n\n  return true;\n};\n\nexport var EmojiPicker = function (props) {\n  var small = props.small;\n\n  var _a = useEmojiContext('EmojiPicker'),\n      emojiConfig = _a.emojiConfig,\n      EmojiPickerComponent = _a.EmojiPicker;\n\n  var t = useTranslationContext('EmojiPicker').t;\n  var messageInput = useMessageInputContext('EmojiPicker');\n  var emojiData = (emojiConfig || {}).emojiData;\n\n  if (messageInput.emojiPickerIsOpen && emojiData) {\n    var className = small ? 'str-chat__small-message-input-emojipicker' : 'str-chat__input--emojipicker';\n    return React.createElement(\"div\", {\n      className: className,\n      ref: messageInput.emojiPickerRef\n    }, React.createElement(Suspense, {\n      fallback: null\n    }, React.createElement(EmojiPickerComponent, {\n      color: '#006CFF',\n      data: emojiData,\n      emoji: 'point_up',\n      emojisToShowFilter: filterEmoji,\n      native: true,\n      onSelect: messageInput.onSelectEmoji,\n      set: 'facebook',\n      showPreview: false,\n      showSkinTones: false,\n      title: t('Pick your emoji'),\n      useButton: true\n    })));\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/MessageInput/EmojiPicker.js"],"names":["React","Suspense","useEmojiContext","useTranslationContext","useMessageInputContext","filterEmoji","emoji","name","EmojiPicker","props","small","_a","emojiConfig","EmojiPickerComponent","t","messageInput","emojiData","emojiPickerIsOpen","className","createElement","ref","emojiPickerRef","fallback","color","data","emojisToShowFilter","native","onSelect","onSelectEmoji","set","showPreview","showSkinTones","title","useButton"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,sBAAT,QAAuC,mCAAvC;;AACA,IAAIC,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAC/B,MAAIA,KAAK,CAACC,IAAN,KAAe,oBAAf,IAAuCD,KAAK,CAACC,IAAN,KAAe,qBAA1D,EAAiF;AAC7E,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,CALD;;AAMA,OAAO,IAAIC,WAAW,GAAG,UAAUC,KAAV,EAAiB;AACtC,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;;AACA,MAAIC,EAAE,GAAGT,eAAe,CAAC,aAAD,CAAxB;AAAA,MAAyCU,WAAW,GAAGD,EAAE,CAACC,WAA1D;AAAA,MAAuEC,oBAAoB,GAAGF,EAAE,CAACH,WAAjG;;AACA,MAAIM,CAAC,GAAGX,qBAAqB,CAAC,aAAD,CAArB,CAAqCW,CAA7C;AACA,MAAIC,YAAY,GAAGX,sBAAsB,CAAC,aAAD,CAAzC;AACA,MAAIY,SAAS,GAAG,CAACJ,WAAW,IAAI,EAAhB,EAAoBI,SAApC;;AACA,MAAID,YAAY,CAACE,iBAAb,IAAkCD,SAAtC,EAAiD;AAC7C,QAAIE,SAAS,GAAGR,KAAK,GACf,2CADe,GAEf,8BAFN;AAGA,WAAQV,KAAK,CAACmB,aAAN,CAAoB,KAApB,EAA2B;AAAED,MAAAA,SAAS,EAAEA,SAAb;AAAwBE,MAAAA,GAAG,EAAEL,YAAY,CAACM;AAA1C,KAA3B,EACJrB,KAAK,CAACmB,aAAN,CAAoBlB,QAApB,EAA8B;AAAEqB,MAAAA,QAAQ,EAAE;AAAZ,KAA9B,EACItB,KAAK,CAACmB,aAAN,CAAoBN,oBAApB,EAA0C;AAAEU,MAAAA,KAAK,EAAE,SAAT;AAAoBC,MAAAA,IAAI,EAAER,SAA1B;AAAqCV,MAAAA,KAAK,EAAE,UAA5C;AAAwDmB,MAAAA,kBAAkB,EAAEpB,WAA5E;AAAyFqB,MAAAA,MAAM,EAAE,IAAjG;AAAuGC,MAAAA,QAAQ,EAAEZ,YAAY,CAACa,aAA9H;AAA6IC,MAAAA,GAAG,EAAE,UAAlJ;AAA8JC,MAAAA,WAAW,EAAE,KAA3K;AAAkLC,MAAAA,aAAa,EAAE,KAAjM;AAAwMC,MAAAA,KAAK,EAAElB,CAAC,CAAC,iBAAD,CAAhN;AAAqOmB,MAAAA,SAAS,EAAE;AAAhP,KAA1C,CADJ,CADI,CAAR;AAGH;;AACD,SAAO,IAAP;AACH,CAfM","sourcesContent":["import React, { Suspense } from 'react';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nvar filterEmoji = function (emoji) {\n    if (emoji.name === 'White Smiling Face' || emoji.name === 'White Frowning Face') {\n        return false;\n    }\n    return true;\n};\nexport var EmojiPicker = function (props) {\n    var small = props.small;\n    var _a = useEmojiContext('EmojiPicker'), emojiConfig = _a.emojiConfig, EmojiPickerComponent = _a.EmojiPicker;\n    var t = useTranslationContext('EmojiPicker').t;\n    var messageInput = useMessageInputContext('EmojiPicker');\n    var emojiData = (emojiConfig || {}).emojiData;\n    if (messageInput.emojiPickerIsOpen && emojiData) {\n        var className = small\n            ? 'str-chat__small-message-input-emojipicker'\n            : 'str-chat__input--emojipicker';\n        return (React.createElement(\"div\", { className: className, ref: messageInput.emojiPickerRef },\n            React.createElement(Suspense, { fallback: null },\n                React.createElement(EmojiPickerComponent, { color: '#006CFF', data: emojiData, emoji: 'point_up', emojisToShowFilter: filterEmoji, native: true, onSelect: messageInput.onSelectEmoji, set: 'facebook', showPreview: false, showSkinTones: false, title: t('Pick your emoji'), useButton: true }))));\n    }\n    return null;\n};\n"]},"metadata":{},"sourceType":"module"}