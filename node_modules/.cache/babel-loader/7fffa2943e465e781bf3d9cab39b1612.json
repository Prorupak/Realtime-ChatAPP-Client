{"ast":null,"code":"import React from 'react';\nimport { DeliveredCheckIcon } from './icons';\nimport { getReadByTooltipText } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { Tooltip } from '../Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\n\nvar UnMemoizedMessageStatus = function UnMemoizedMessageStatus(props) {\n  var _a;\n\n  var propAvatar = props.Avatar,\n      _b = props.messageType,\n      messageType = _b === void 0 ? 'simple' : _b;\n  var client = useChatContext('MessageStatus').client;\n  var contextAvatar = useComponentContext('MessageStatus').Avatar;\n\n  var _c = useMessageContext('MessageStatus'),\n      isMyMessage = _c.isMyMessage,\n      lastReceivedId = _c.lastReceivedId,\n      message = _c.message,\n      readBy = _c.readBy,\n      threadList = _c.threadList;\n\n  var t = useTranslationContext('MessageStatus').t;\n  var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n\n  if (!isMyMessage() || message.type === 'error') {\n    return null;\n  }\n\n  var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n\n  if (message.status === 'sending') {\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-sending'\n    }, React.createElement(Tooltip, null, t('Sending...')), React.createElement(LoadingIndicator, null));\n  }\n\n  if ((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe) {\n    var lastReadUser = readBy.filter(function (item) {\n      var _a;\n\n      return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n    })[0];\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-read-by'\n    }, React.createElement(Tooltip, null, getReadByTooltipText(readBy, t, client)), React.createElement(Avatar, {\n      image: lastReadUser.image,\n      name: lastReadUser.name || lastReadUser.id,\n      size: 15,\n      user: lastReadUser\n    }), readBy.length > 2 && React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status-number\",\n      \"data-testid\": 'message-status-read-by-many'\n    }, readBy.length - 1));\n  }\n\n  if (message.status === 'received' && message.id === lastReceivedId && !threadList) {\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-received'\n    }, React.createElement(Tooltip, null, t('Delivered')), React.createElement(DeliveredCheckIcon, null));\n  }\n\n  return null;\n};\n\nexport var MessageStatus = React.memo(UnMemoizedMessageStatus);","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/Message/MessageStatus.js"],"names":["React","DeliveredCheckIcon","getReadByTooltipText","Avatar","DefaultAvatar","LoadingIndicator","Tooltip","useChatContext","useComponentContext","useMessageContext","useTranslationContext","UnMemoizedMessageStatus","props","_a","propAvatar","_b","messageType","client","contextAvatar","_c","isMyMessage","lastReceivedId","message","readBy","threadList","t","type","justReadByMe","length","id","user","status","createElement","className","lastReadUser","filter","item","image","name","size","MessageStatus","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DeliveredCheckIcon } from './icons';\nimport { getReadByTooltipText } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { Tooltip } from '../Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedMessageStatus = function (props) {\n    var _a;\n    var propAvatar = props.Avatar, _b = props.messageType, messageType = _b === void 0 ? 'simple' : _b;\n    var client = useChatContext('MessageStatus').client;\n    var contextAvatar = useComponentContext('MessageStatus').Avatar;\n    var _c = useMessageContext('MessageStatus'), isMyMessage = _c.isMyMessage, lastReceivedId = _c.lastReceivedId, message = _c.message, readBy = _c.readBy, threadList = _c.threadList;\n    var t = useTranslationContext('MessageStatus').t;\n    var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n    if (!isMyMessage() || message.type === 'error') {\n        return null;\n    }\n    var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n    if (message.status === 'sending') {\n        return (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status\", \"data-testid\": 'message-status-sending' },\n            React.createElement(Tooltip, null, t('Sending...')),\n            React.createElement(LoadingIndicator, null)));\n    }\n    if ((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe) {\n        var lastReadUser = readBy.filter(function (item) { var _a; return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id); })[0];\n        return (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status\", \"data-testid\": 'message-status-read-by' },\n            React.createElement(Tooltip, null, getReadByTooltipText(readBy, t, client)),\n            React.createElement(Avatar, { image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, size: 15, user: lastReadUser }),\n            readBy.length > 2 && (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status-number\", \"data-testid\": 'message-status-read-by-many' }, readBy.length - 1))));\n    }\n    if (message.status === 'received' && message.id === lastReceivedId && !threadList) {\n        return (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status\", \"data-testid\": 'message-status-received' },\n            React.createElement(Tooltip, null, t('Delivered')),\n            React.createElement(DeliveredCheckIcon, null)));\n    }\n    return null;\n};\nexport var MessageStatus = React.memo(UnMemoizedMessageStatus);\n"]},"metadata":{},"sourceType":"module"}