{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.JUMP_OFFSET_BASE = exports.BinTrieFlags = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\n\nvar decode_data_html_1 = __importDefault(require(\"./generated/decode-data-html\"));\n\nexports.htmlDecodeTree = decode_data_html_1.default;\n\nvar decode_data_xml_1 = __importDefault(require(\"./generated/decode-data-xml\"));\n\nexports.xmlDecodeTree = decode_data_xml_1.default;\n\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\n\nvar BinTrieFlags;\n\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"HAS_VALUE\"] = 32768] = \"HAS_VALUE\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 32512] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"MULTI_BYTE\"] = 128] = \"MULTI_BYTE\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\n\nexports.JUMP_OFFSET_BASE = 48\n/* ZERO */\n- 1;\n\nfunction getDecoder(decodeTree) {\n  return function decodeHTMLBinary(str, strict) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var strIdx = 0;\n\n    while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n      ret += str.slice(lastIdx, strIdx);\n      lastIdx = strIdx; // Skip the \"&\"\n\n      strIdx += 1; // If we have a numeric entity, handle this separately.\n\n      if (str.charCodeAt(strIdx) === 35\n      /* NUM */\n      ) {\n          // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n          var start = strIdx + 1;\n          var base = 10;\n          var cp = str.charCodeAt(start);\n\n          if ((cp | 32\n          /* To_LOWER_BIT */\n          ) === 120\n          /* LOWER_X */\n          ) {\n              base = 16;\n              strIdx += 1;\n              start += 1;\n            }\n\n          while ((cp = str.charCodeAt(++strIdx)) >= 48\n          /* ZERO */\n          && cp <= 57\n          /* NINE */\n          || base === 16 && (cp | 32\n          /* To_LOWER_BIT */\n          ) >= 97\n          /* LOWER_A */\n          && (cp | 32\n          /* To_LOWER_BIT */\n          ) <= 102\n          /* LOWER_F */\n          );\n\n          if (start !== strIdx) {\n            var entity = str.substring(start, strIdx);\n            var parsed = parseInt(entity, base);\n\n            if (str.charCodeAt(strIdx) === 59\n            /* SEMI */\n            ) {\n                strIdx += 1;\n              } else if (strict) {\n              continue;\n            }\n\n            ret += decode_codepoint_1.default(parsed);\n            lastIdx = strIdx;\n          }\n\n          continue;\n        }\n\n      var result = null;\n      var excess = 1;\n      var treeIdx = 0;\n      var current = decodeTree[treeIdx];\n\n      for (; strIdx < str.length; strIdx++, excess++) {\n        treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n        if (treeIdx < 0) break;\n        current = decodeTree[treeIdx]; // If the branch is a value, store it and continue\n\n        if (current & BinTrieFlags.HAS_VALUE) {\n          // If we have a legacy entity while parsing strictly, just skip the number of bytes\n          if (strict && str.charCodeAt(strIdx) !== 59\n          /* SEMI */\n          ) {\n              // No need to consider multi-byte values, as the legacy entity is always a single byte\n              treeIdx += 1;\n            } else {\n            // If this is a surrogate pair, combine the higher bits from the node with the next byte\n            result = current & BinTrieFlags.MULTI_BYTE ? String.fromCharCode(decodeTree[++treeIdx], decodeTree[++treeIdx]) : String.fromCharCode(decodeTree[++treeIdx]);\n            excess = 0;\n          }\n        }\n      }\n\n      if (result != null) {\n        ret += result;\n        lastIdx = strIdx - excess + 1;\n      }\n    }\n\n    return ret + str.slice(lastIdx);\n  };\n}\n\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n  if (current <= 128) {\n    return char === current ? nodeIdx : -1;\n  }\n\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 8;\n\n  if (branchCount === 0) {\n    return -1;\n  }\n\n  if (branchCount === 1) {\n    return char === decodeTree[nodeIdx] ? nodeIdx + 1 : -1;\n  }\n\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n\n  if (jumpOffset) {\n    var value = char - exports.JUMP_OFFSET_BASE - jumpOffset;\n    return value < 0 || value > branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  } // Binary search for the character.\n\n\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n}\n\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_1.default);\n\nfunction decodeHTML(str) {\n  return htmlDecoder(str, false);\n}\n\nexports.decodeHTML = decodeHTML;\n\nfunction decodeHTMLStrict(str) {\n  return htmlDecoder(str, true);\n}\n\nexports.decodeHTMLStrict = decodeHTMLStrict;\n\nfunction decodeXML(str) {\n  return xmlDecoder(str, true);\n}\n\nexports.decodeXML = decodeXML;","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/htmlparser2/node_modules/entities/lib/decode.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","decodeXML","decodeHTMLStrict","decodeHTML","determineBranch","JUMP_OFFSET_BASE","BinTrieFlags","xmlDecodeTree","htmlDecodeTree","decode_data_html_1","require","default","decode_data_xml_1","decode_codepoint_1","getDecoder","decodeTree","decodeHTMLBinary","str","strict","ret","lastIdx","strIdx","indexOf","slice","charCodeAt","start","base","cp","entity","substring","parsed","parseInt","result","excess","treeIdx","current","length","HAS_VALUE","MULTI_BYTE","String","fromCharCode","nodeIdx","char","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midVal","htmlDecoder","xmlDecoder"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACG,gBAAR,GAA2BH,OAAO,CAACI,UAAR,GAAqBJ,OAAO,CAACK,eAAR,GAA0BL,OAAO,CAACM,gBAAR,GAA2BN,OAAO,CAACO,YAAR,GAAuBP,OAAO,CAACQ,aAAR,GAAwBR,OAAO,CAACS,cAAR,GAAyB,KAAK,CAAtM;;AACA,IAAIC,kBAAkB,GAAGf,eAAe,CAACgB,OAAO,CAAC,8BAAD,CAAR,CAAxC;;AACAX,OAAO,CAACS,cAAR,GAAyBC,kBAAkB,CAACE,OAA5C;;AACA,IAAIC,iBAAiB,GAAGlB,eAAe,CAACgB,OAAO,CAAC,6BAAD,CAAR,CAAvC;;AACAX,OAAO,CAACQ,aAAR,GAAwBK,iBAAiB,CAACD,OAA1C;;AACA,IAAIE,kBAAkB,GAAGnB,eAAe,CAACgB,OAAO,CAAC,oBAAD,CAAR,CAAxC;;AACA,IAAIJ,YAAJ;;AACA,CAAC,UAAUA,YAAV,EAAwB;AACrBA,EAAAA,YAAY,CAACA,YAAY,CAAC,WAAD,CAAZ,GAA4B,KAA7B,CAAZ,GAAkD,WAAlD;AACAA,EAAAA,YAAY,CAACA,YAAY,CAAC,eAAD,CAAZ,GAAgC,KAAjC,CAAZ,GAAsD,eAAtD;AACAA,EAAAA,YAAY,CAACA,YAAY,CAAC,YAAD,CAAZ,GAA6B,GAA9B,CAAZ,GAAiD,YAAjD;AACAA,EAAAA,YAAY,CAACA,YAAY,CAAC,YAAD,CAAZ,GAA6B,GAA9B,CAAZ,GAAiD,YAAjD;AACH,CALD,EAKGA,YAAY,GAAGP,OAAO,CAACO,YAAR,KAAyBP,OAAO,CAACO,YAAR,GAAuB,EAAhD,CALlB;;AAMAP,OAAO,CAACM,gBAAR,GAA2B;AAAG;AAAH,EAAgB,CAA3C;;AACA,SAASS,UAAT,CAAoBC,UAApB,EAAgC;AAC5B,SAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BC,MAA/B,EAAuC;AAC1C,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,MAAM,GAAG,CAAb;;AACA,WAAO,CAACA,MAAM,GAAGJ,GAAG,CAACK,OAAJ,CAAY,GAAZ,EAAiBD,MAAjB,CAAV,KAAuC,CAA9C,EAAiD;AAC7CF,MAAAA,GAAG,IAAIF,GAAG,CAACM,KAAJ,CAAUH,OAAV,EAAmBC,MAAnB,CAAP;AACAD,MAAAA,OAAO,GAAGC,MAAV,CAF6C,CAG7C;;AACAA,MAAAA,MAAM,IAAI,CAAV,CAJ6C,CAK7C;;AACA,UAAIJ,GAAG,CAACO,UAAJ,CAAeH,MAAf,MAA2B;AAAG;AAAlC,QAA6C;AACzC;AACA,cAAII,KAAK,GAAGJ,MAAM,GAAG,CAArB;AACA,cAAIK,IAAI,GAAG,EAAX;AACA,cAAIC,EAAE,GAAGV,GAAG,CAACO,UAAJ,CAAeC,KAAf,CAAT;;AACA,cAAI,CAACE,EAAE,GAAG;AAAG;AAAT,gBAAiC;AAAI;AAAzC,YAAwD;AACpDD,cAAAA,IAAI,GAAG,EAAP;AACAL,cAAAA,MAAM,IAAI,CAAV;AACAI,cAAAA,KAAK,IAAI,CAAT;AACH;;AACD,iBAAQ,CAACE,EAAE,GAAGV,GAAG,CAACO,UAAJ,CAAe,EAAEH,MAAjB,CAAN,KAAmC;AAAG;AAAtC,aACJM,EAAE,IAAI;AAAG;AADN,aAEFD,IAAI,KAAK,EAAT,IACG,CAACC,EAAE,GAAG;AAAG;AAAT,eAAgC;AAAG;AADtC,aAEG,CAACA,EAAE,GAAG;AAAG;AAAT,eAAgC;AAAI;AAJ5C,WAKI;;AACJ,cAAIF,KAAK,KAAKJ,MAAd,EAAsB;AAClB,gBAAIO,MAAM,GAAGX,GAAG,CAACY,SAAJ,CAAcJ,KAAd,EAAqBJ,MAArB,CAAb;AACA,gBAAIS,MAAM,GAAGC,QAAQ,CAACH,MAAD,EAASF,IAAT,CAArB;;AACA,gBAAIT,GAAG,CAACO,UAAJ,CAAeH,MAAf,MAA2B;AAAG;AAAlC,cAA8C;AAC1CA,gBAAAA,MAAM,IAAI,CAAV;AACH,eAFD,MAGK,IAAIH,MAAJ,EAAY;AACb;AACH;;AACDC,YAAAA,GAAG,IAAIN,kBAAkB,CAACF,OAAnB,CAA2BmB,MAA3B,CAAP;AACAV,YAAAA,OAAO,GAAGC,MAAV;AACH;;AACD;AACH;;AACD,UAAIW,MAAM,GAAG,IAAb;AACA,UAAIC,MAAM,GAAG,CAAb;AACA,UAAIC,OAAO,GAAG,CAAd;AACA,UAAIC,OAAO,GAAGpB,UAAU,CAACmB,OAAD,CAAxB;;AACA,aAAOb,MAAM,GAAGJ,GAAG,CAACmB,MAApB,EAA4Bf,MAAM,IAAIY,MAAM,EAA5C,EAAgD;AAC5CC,QAAAA,OAAO,GAAG9B,eAAe,CAACW,UAAD,EAAaoB,OAAb,EAAsBD,OAAO,GAAG,CAAhC,EAAmCjB,GAAG,CAACO,UAAJ,CAAeH,MAAf,CAAnC,CAAzB;AACA,YAAIa,OAAO,GAAG,CAAd,EACI;AACJC,QAAAA,OAAO,GAAGpB,UAAU,CAACmB,OAAD,CAApB,CAJ4C,CAK5C;;AACA,YAAIC,OAAO,GAAG7B,YAAY,CAAC+B,SAA3B,EAAsC;AAClC;AACA,cAAInB,MAAM,IAAID,GAAG,CAACO,UAAJ,CAAeH,MAAf,MAA2B;AAAG;AAA5C,YAAwD;AACpD;AACAa,cAAAA,OAAO,IAAI,CAAX;AACH,aAHD,MAIK;AACD;AACAF,YAAAA,MAAM,GACFG,OAAO,GAAG7B,YAAY,CAACgC,UAAvB,GACMC,MAAM,CAACC,YAAP,CAAoBzB,UAAU,CAAC,EAAEmB,OAAH,CAA9B,EAA2CnB,UAAU,CAAC,EAAEmB,OAAH,CAArD,CADN,GAEMK,MAAM,CAACC,YAAP,CAAoBzB,UAAU,CAAC,EAAEmB,OAAH,CAA9B,CAHV;AAIAD,YAAAA,MAAM,GAAG,CAAT;AACH;AACJ;AACJ;;AACD,UAAID,MAAM,IAAI,IAAd,EAAoB;AAChBb,QAAAA,GAAG,IAAIa,MAAP;AACAZ,QAAAA,OAAO,GAAGC,MAAM,GAAGY,MAAT,GAAkB,CAA5B;AACH;AACJ;;AACD,WAAOd,GAAG,GAAGF,GAAG,CAACM,KAAJ,CAAUH,OAAV,CAAb;AACH,GAxED;AAyEH;;AACD,SAAShB,eAAT,CAAyBW,UAAzB,EAAqCoB,OAArC,EAA8CM,OAA9C,EAAuDC,IAAvD,EAA6D;AACzD,MAAIP,OAAO,IAAI,GAAf,EAAoB;AAChB,WAAOO,IAAI,KAAKP,OAAT,GAAmBM,OAAnB,GAA6B,CAAC,CAArC;AACH;;AACD,MAAIE,WAAW,GAAG,CAACR,OAAO,GAAG7B,YAAY,CAACsC,aAAxB,KAA0C,CAA5D;;AACA,MAAID,WAAW,KAAK,CAApB,EAAuB;AACnB,WAAO,CAAC,CAAR;AACH;;AACD,MAAIA,WAAW,KAAK,CAApB,EAAuB;AACnB,WAAOD,IAAI,KAAK3B,UAAU,CAAC0B,OAAD,CAAnB,GAA+BA,OAAO,GAAG,CAAzC,GAA6C,CAAC,CAArD;AACH;;AACD,MAAII,UAAU,GAAGV,OAAO,GAAG7B,YAAY,CAACwC,UAAxC;;AACA,MAAID,UAAJ,EAAgB;AACZ,QAAI7C,KAAK,GAAG0C,IAAI,GAAG3C,OAAO,CAACM,gBAAf,GAAkCwC,UAA9C;AACA,WAAO7C,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG2C,WAArB,GACD,CAAC,CADA,GAED5B,UAAU,CAAC0B,OAAO,GAAGzC,KAAX,CAAV,GAA8B,CAFpC;AAGH,GAjBwD,CAkBzD;;;AACA,MAAI+C,EAAE,GAAGN,OAAT;AACA,MAAIO,EAAE,GAAGD,EAAE,GAAGJ,WAAL,GAAmB,CAA5B;;AACA,SAAOI,EAAE,IAAIC,EAAb,EAAiB;AACb,QAAIC,GAAG,GAAIF,EAAE,GAAGC,EAAN,KAAc,CAAxB;AACA,QAAIE,MAAM,GAAGnC,UAAU,CAACkC,GAAD,CAAvB;;AACA,QAAIC,MAAM,GAAGR,IAAb,EAAmB;AACfK,MAAAA,EAAE,GAAGE,GAAG,GAAG,CAAX;AACH,KAFD,MAGK,IAAIC,MAAM,GAAGR,IAAb,EAAmB;AACpBM,MAAAA,EAAE,GAAGC,GAAG,GAAG,CAAX;AACH,KAFI,MAGA;AACD,aAAOlC,UAAU,CAACkC,GAAG,GAAGN,WAAP,CAAjB;AACH;AACJ;;AACD,SAAO,CAAC,CAAR;AACH;;AACD5C,OAAO,CAACK,eAAR,GAA0BA,eAA1B;AACA,IAAI+C,WAAW,GAAGrC,UAAU,CAACL,kBAAkB,CAACE,OAApB,CAA5B;AACA,IAAIyC,UAAU,GAAGtC,UAAU,CAACF,iBAAiB,CAACD,OAAnB,CAA3B;;AACA,SAASR,UAAT,CAAoBc,GAApB,EAAyB;AACrB,SAAOkC,WAAW,CAAClC,GAAD,EAAM,KAAN,CAAlB;AACH;;AACDlB,OAAO,CAACI,UAAR,GAAqBA,UAArB;;AACA,SAASD,gBAAT,CAA0Be,GAA1B,EAA+B;AAC3B,SAAOkC,WAAW,CAAClC,GAAD,EAAM,IAAN,CAAlB;AACH;;AACDlB,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;;AACA,SAASD,SAAT,CAAmBgB,GAAnB,EAAwB;AACpB,SAAOmC,UAAU,CAACnC,GAAD,EAAM,IAAN,CAAjB;AACH;;AACDlB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTML = exports.determineBranch = exports.JUMP_OFFSET_BASE = exports.BinTrieFlags = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_1 = __importDefault(require(\"./generated/decode-data-html\"));\nexports.htmlDecodeTree = decode_data_html_1.default;\nvar decode_data_xml_1 = __importDefault(require(\"./generated/decode-data-xml\"));\nexports.xmlDecodeTree = decode_data_xml_1.default;\nvar decode_codepoint_1 = __importDefault(require(\"./decode_codepoint\"));\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"HAS_VALUE\"] = 32768] = \"HAS_VALUE\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 32512] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"MULTI_BYTE\"] = 128] = \"MULTI_BYTE\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nexports.JUMP_OFFSET_BASE = 48 /* ZERO */ - 1;\nfunction getDecoder(decodeTree) {\n    return function decodeHTMLBinary(str, strict) {\n        var ret = \"\";\n        var lastIdx = 0;\n        var strIdx = 0;\n        while ((strIdx = str.indexOf(\"&\", strIdx)) >= 0) {\n            ret += str.slice(lastIdx, strIdx);\n            lastIdx = strIdx;\n            // Skip the \"&\"\n            strIdx += 1;\n            // If we have a numeric entity, handle this separately.\n            if (str.charCodeAt(strIdx) === 35 /* NUM */) {\n                // Skip the leading \"&#\". For hex entities, also skip the leading \"x\".\n                var start = strIdx + 1;\n                var base = 10;\n                var cp = str.charCodeAt(start);\n                if ((cp | 32 /* To_LOWER_BIT */) === 120 /* LOWER_X */) {\n                    base = 16;\n                    strIdx += 1;\n                    start += 1;\n                }\n                while (((cp = str.charCodeAt(++strIdx)) >= 48 /* ZERO */ &&\n                    cp <= 57 /* NINE */) ||\n                    (base === 16 &&\n                        (cp | 32 /* To_LOWER_BIT */) >= 97 /* LOWER_A */ &&\n                        (cp | 32 /* To_LOWER_BIT */) <= 102 /* LOWER_F */))\n                    ;\n                if (start !== strIdx) {\n                    var entity = str.substring(start, strIdx);\n                    var parsed = parseInt(entity, base);\n                    if (str.charCodeAt(strIdx) === 59 /* SEMI */) {\n                        strIdx += 1;\n                    }\n                    else if (strict) {\n                        continue;\n                    }\n                    ret += decode_codepoint_1.default(parsed);\n                    lastIdx = strIdx;\n                }\n                continue;\n            }\n            var result = null;\n            var excess = 1;\n            var treeIdx = 0;\n            var current = decodeTree[treeIdx];\n            for (; strIdx < str.length; strIdx++, excess++) {\n                treeIdx = determineBranch(decodeTree, current, treeIdx + 1, str.charCodeAt(strIdx));\n                if (treeIdx < 0)\n                    break;\n                current = decodeTree[treeIdx];\n                // If the branch is a value, store it and continue\n                if (current & BinTrieFlags.HAS_VALUE) {\n                    // If we have a legacy entity while parsing strictly, just skip the number of bytes\n                    if (strict && str.charCodeAt(strIdx) !== 59 /* SEMI */) {\n                        // No need to consider multi-byte values, as the legacy entity is always a single byte\n                        treeIdx += 1;\n                    }\n                    else {\n                        // If this is a surrogate pair, combine the higher bits from the node with the next byte\n                        result =\n                            current & BinTrieFlags.MULTI_BYTE\n                                ? String.fromCharCode(decodeTree[++treeIdx], decodeTree[++treeIdx])\n                                : String.fromCharCode(decodeTree[++treeIdx]);\n                        excess = 0;\n                    }\n                }\n            }\n            if (result != null) {\n                ret += result;\n                lastIdx = strIdx - excess + 1;\n            }\n        }\n        return ret + str.slice(lastIdx);\n    };\n}\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    if (current <= 128) {\n        return char === current ? nodeIdx : -1;\n    }\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 8;\n    if (branchCount === 0) {\n        return -1;\n    }\n    if (branchCount === 1) {\n        return char === decodeTree[nodeIdx] ? nodeIdx + 1 : -1;\n    }\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    if (jumpOffset) {\n        var value = char - exports.JUMP_OFFSET_BASE - jumpOffset;\n        return value < 0 || value > branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_1.default);\nfunction decodeHTML(str) {\n    return htmlDecoder(str, false);\n}\nexports.decodeHTML = decodeHTML;\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, true);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\nfunction decodeXML(str) {\n    return xmlDecoder(str, true);\n}\nexports.decodeXML = decodeXML;\n"]},"metadata":{},"sourceType":"script"}