{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.start = exports.run = exports.TOKENS = exports.State = undefined;\n\nvar _state = require('./state');\n\nvar _multi = require('./tokens/multi');\n\nvar MULTI_TOKENS = _interopRequireWildcard(_multi);\n\nvar _text = require('./tokens/text');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/Email_address (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main parser\n*/\n\n\nvar makeState = function makeState(tokenClass) {\n  return new _state.TokenState(tokenClass);\n}; // The universal starting state.\n\n\nvar S_START = makeState(); // Intermediate states for URLs. Note that domains that begin with a protocol\n// are treated slighly differently from those that don't.\n\nvar S_PROTOCOL = makeState(); // e.g., 'http:'\n\nvar S_MAILTO = makeState(); // 'mailto:'\n\nvar S_PROTOCOL_SLASH = makeState(); // e.g., '/', 'http:/''\n\nvar S_PROTOCOL_SLASH_SLASH = makeState(); // e.g., '//', 'http://'\n\nvar S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)\n\nvar S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT\n\nvar S_TLD = makeState(_multi.URL); // (A) Simplest possible URL with no query string\n\nvar S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)\n\nvar S_TLD_PORT = makeState(_multi.URL); // TLD followed by a port number\n\nvar S_URL = makeState(_multi.URL); // Long URL with optional port and maybe query string\n\nvar S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\nvar S_URL_OPENBRACE = makeState(); // URL followed by {\n\nvar S_URL_OPENBRACKET = makeState(); // URL followed by [\n\nvar S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <\n\nvar S_URL_OPENPAREN = makeState(); // URL followed by (\n\nvar S_URL_OPENBRACE_Q = makeState(_multi.URL); // URL followed by { and some symbols that the URL can end it\n\nvar S_URL_OPENBRACKET_Q = makeState(_multi.URL); // URL followed by [ and some symbols that the URL can end it\n\nvar S_URL_OPENANGLEBRACKET_Q = makeState(_multi.URL); // URL followed by < and some symbols that the URL can end it\n\nvar S_URL_OPENPAREN_Q = makeState(_multi.URL); // URL followed by ( and some symbols that the URL can end it\n\nvar S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it\n\nvar S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it\n\nvar S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it\n\nvar S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it\n\nvar S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)\n\nvar S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT\n\nvar S_EMAIL = makeState(_multi.EMAIL); // (C) Possible email address (could have more tlds)\n\nvar S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)\n\nvar S_EMAIL_PORT = makeState(_multi.EMAIL); // (C) Email address with a port\n\nvar S_MAILTO_EMAIL = makeState(_multi.MAILTOEMAIL); // Email that begins with the mailto prefix (D)\n\nvar S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars\n\nvar S_LOCALPART = makeState(); // Local part of the email address\n\nvar S_LOCALPART_AT = makeState(); // Local part of the email address plus @\n\nvar S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)\n\nvar S_NL = makeState(_multi.NL); // single new line\n// Make path from start to protocol (with '//')\n\nS_START.on(_text.NL, S_NL).on(_text.PROTOCOL, S_PROTOCOL).on(_text.MAILTO, S_MAILTO).on(_text.SLASH, S_PROTOCOL_SLASH);\nS_PROTOCOL.on(_text.SLASH, S_PROTOCOL_SLASH);\nS_PROTOCOL_SLASH.on(_text.SLASH, S_PROTOCOL_SLASH_SLASH); // The very first potential domain name\n\nS_START.on(_text.TLD, S_DOMAIN).on(_text.DOMAIN, S_DOMAIN).on(_text.LOCALHOST, S_TLD).on(_text.NUM, S_DOMAIN); // Force URL for protocol followed by anything sane\n\nS_PROTOCOL_SLASH_SLASH.on(_text.TLD, S_URL).on(_text.DOMAIN, S_URL).on(_text.NUM, S_URL).on(_text.LOCALHOST, S_URL); // Account for dots and hyphens\n// hyphens are usually parts of domain names\n\nS_DOMAIN.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL_DOMAIN.on(_text.DOT, S_EMAIL_DOMAIN_DOT); // Hyphen can jump back to a domain name\n// After the first domain and a dot, we can find either a URL or another domain\n\nS_DOMAIN_DOT.on(_text.TLD, S_TLD).on(_text.DOMAIN, S_DOMAIN).on(_text.NUM, S_DOMAIN).on(_text.LOCALHOST, S_DOMAIN);\nS_EMAIL_DOMAIN_DOT.on(_text.TLD, S_EMAIL).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.NUM, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL_DOMAIN); // S_TLD accepts! But the URL could be longer, try to find a match greedily\n// The `run` function should be able to \"rollback\" to the accepting state\n\nS_TLD.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL.on(_text.DOT, S_EMAIL_DOMAIN_DOT); // Become real URLs after `SLASH` or `COLON NUM SLASH`\n// Here PSS and non-PSS converge\n\nS_TLD.on(_text.COLON, S_TLD_COLON).on(_text.SLASH, S_URL);\nS_TLD_COLON.on(_text.NUM, S_TLD_PORT);\nS_TLD_PORT.on(_text.SLASH, S_URL);\nS_EMAIL.on(_text.COLON, S_EMAIL_COLON);\nS_EMAIL_COLON.on(_text.NUM, S_EMAIL_PORT); // Types of characters the URL can definitely end in\n\nvar qsAccepting = [_text.DOMAIN, _text.AT, _text.LOCALHOST, _text.NUM, _text.PLUS, _text.POUND, _text.PROTOCOL, _text.SLASH, _text.TLD, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND]; // Types of tokens that can follow a URL and be part of the query string\n// but cannot be the very last characters\n// Characters that cannot appear in the URL at all should be excluded\n\nvar qsNonAccepting = [_text.COLON, _text.DOT, _text.QUERY, _text.PUNCTUATION, _text.CLOSEBRACE, _text.CLOSEBRACKET, _text.CLOSEANGLEBRACKET, _text.CLOSEPAREN, _text.OPENBRACE, _text.OPENBRACKET, _text.OPENANGLEBRACKET, _text.OPENPAREN]; // These states are responsible primarily for determining whether or not to\n// include the final round bracket.\n// URL, followed by an opening bracket\n\nS_URL.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN); // URL with extra symbols at the end, followed by an opening bracket\n\nS_URL_NON_ACCEPTING.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN); // Closing bracket component. This character WILL be included in the URL\n\nS_URL_OPENBRACE.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_Q.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_Q.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_Q.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_Q.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_SYMS.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_SYMS.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_SYMS.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_SYMS.on(_text.CLOSEPAREN, S_URL); // URL that beings with an opening bracket, followed by a symbols.\n// Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only\n// has a single opening bracket for some reason).\n\nS_URL_OPENBRACE.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN.on(qsNonAccepting, S_URL_OPENPAREN_SYMS); // URL that begins with an opening bracket, followed by some symbols\n\nS_URL_OPENBRACE_Q.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_Q.on(qsNonAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsNonAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsNonAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_SYMS.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_SYMS.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_SYMS.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_SYMS.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN_SYMS.on(qsNonAccepting, S_URL_OPENPAREN_SYMS); // Account for the query string\n\nS_URL.on(qsAccepting, S_URL);\nS_URL_NON_ACCEPTING.on(qsAccepting, S_URL);\nS_URL.on(qsNonAccepting, S_URL_NON_ACCEPTING);\nS_URL_NON_ACCEPTING.on(qsNonAccepting, S_URL_NON_ACCEPTING); // Email address-specific state definitions\n// Note: We are not allowing '/' in email addresses since this would interfere\n// with real URLs\n// For addresses with the mailto prefix\n// 'mailto:' followed by anything sane is a valid email\n\nS_MAILTO.on(_text.TLD, S_MAILTO_EMAIL).on(_text.DOMAIN, S_MAILTO_EMAIL).on(_text.NUM, S_MAILTO_EMAIL).on(_text.LOCALHOST, S_MAILTO_EMAIL); // Greedily get more potential valid email values\n\nS_MAILTO_EMAIL.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\nS_MAILTO_EMAIL_NON_ACCEPTING.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING); // For addresses without the mailto prefix\n// Tokens allowed in the localpart of the email\n\nvar localpartAccepting = [_text.DOMAIN, _text.NUM, _text.PLUS, _text.POUND, _text.QUERY, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND, _text.TLD]; // Some of the tokens in `localpartAccepting` are already accounted for here and\n// will not be overwritten (don't worry)\n\nS_DOMAIN.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_TLD.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_DOMAIN_DOT.on(localpartAccepting, S_LOCALPART); // Okay we're on a localpart. Now what?\n// TODO: IP addresses and what if the email starts with numbers?\n\nS_LOCALPART.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT) // close to an email address now\n.on(_text.DOT, S_LOCALPART_DOT);\nS_LOCALPART_DOT.on(localpartAccepting, S_LOCALPART);\nS_LOCALPART_AT.on(_text.TLD, S_EMAIL_DOMAIN).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL); // States following `@` defined above\n\nvar run = function run(tokens) {\n  var len = tokens.length;\n  var cursor = 0;\n  var multis = [];\n  var textTokens = [];\n\n  while (cursor < len) {\n    var state = S_START;\n    var secondState = null;\n    var nextState = null;\n    var multiLength = 0;\n    var latestAccepting = null;\n    var sinceAccepts = -1;\n\n    while (cursor < len && !(secondState = state.next(tokens[cursor]))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n\n    while (cursor < len && (nextState = secondState || state.next(tokens[cursor]))) {\n      // Get the next state\n      secondState = null;\n      state = nextState; // Keep track of the latest accepting state\n\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n\n      cursor++;\n      multiLength++;\n    }\n\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token\n      // Add all the tokens we looked at to the text tokens array\n      for (var i = cursor - multiLength; i < cursor; i++) {\n        textTokens.push(tokens[i]);\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(new _multi.TEXT(textTokens));\n        textTokens = [];\n      } // Roll back to the latest accepting state\n\n\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts; // Create a new multitoken\n\n      var MULTI = latestAccepting.emit();\n      multis.push(new MULTI(tokens.slice(cursor - multiLength, cursor)));\n    }\n  } // Finally close off the textTokens (if available)\n\n\n  if (textTokens.length > 0) {\n    multis.push(new _multi.TEXT(textTokens));\n  }\n\n  return multis;\n};\n\nexports.State = _state.TokenState;\nexports.TOKENS = MULTI_TOKENS;\nexports.run = run;\nexports.start = S_START;","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/linkifyjs/lib/linkify/core/parser.js"],"names":["exports","__esModule","start","run","TOKENS","State","undefined","_state","require","_multi","MULTI_TOKENS","_interopRequireWildcard","_text","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","makeState","tokenClass","TokenState","S_START","S_PROTOCOL","S_MAILTO","S_PROTOCOL_SLASH","S_PROTOCOL_SLASH_SLASH","S_DOMAIN","S_DOMAIN_DOT","S_TLD","URL","S_TLD_COLON","S_TLD_PORT","S_URL","S_URL_NON_ACCEPTING","S_URL_OPENBRACE","S_URL_OPENBRACKET","S_URL_OPENANGLEBRACKET","S_URL_OPENPAREN","S_URL_OPENBRACE_Q","S_URL_OPENBRACKET_Q","S_URL_OPENANGLEBRACKET_Q","S_URL_OPENPAREN_Q","S_URL_OPENBRACE_SYMS","S_URL_OPENBRACKET_SYMS","S_URL_OPENANGLEBRACKET_SYMS","S_URL_OPENPAREN_SYMS","S_EMAIL_DOMAIN","S_EMAIL_DOMAIN_DOT","S_EMAIL","EMAIL","S_EMAIL_COLON","S_EMAIL_PORT","S_MAILTO_EMAIL","MAILTOEMAIL","S_MAILTO_EMAIL_NON_ACCEPTING","S_LOCALPART","S_LOCALPART_AT","S_LOCALPART_DOT","S_NL","NL","on","PROTOCOL","MAILTO","SLASH","TLD","DOMAIN","LOCALHOST","NUM","DOT","COLON","qsAccepting","AT","PLUS","POUND","UNDERSCORE","SYM","AMPERSAND","qsNonAccepting","QUERY","PUNCTUATION","CLOSEBRACE","CLOSEBRACKET","CLOSEANGLEBRACKET","CLOSEPAREN","OPENBRACE","OPENBRACKET","OPENANGLEBRACKET","OPENPAREN","localpartAccepting","tokens","len","length","cursor","multis","textTokens","state","secondState","nextState","multiLength","latestAccepting","sinceAccepts","next","push","accepts","i","TEXT","MULTI","emit","slice"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,GAAR,GAAcH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,KAAR,GAAgBC,SAA/D;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AAEA,IAAIE,YAAY,GAAGC,uBAAuB,CAACF,MAAD,CAA1C;;AAEA,IAAIG,KAAK,GAAGJ,OAAO,CAAC,eAAD,CAAnB;;AAEA,SAASG,uBAAT,CAAiCE,GAAjC,EAAsC;AAAE,MAAIA,GAAG,IAAIA,GAAG,CAACZ,UAAf,EAA2B;AAAE,WAAOY,GAAP;AAAa,GAA1C,MAAgD;AAAE,QAAIC,MAAM,GAAG,EAAb;;AAAiB,QAAID,GAAG,IAAI,IAAX,EAAiB;AAAE,WAAK,IAAIE,GAAT,IAAgBF,GAAhB,EAAqB;AAAE,YAAIG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,GAArC,EAA0CE,GAA1C,CAAJ,EAAoDD,MAAM,CAACC,GAAD,CAAN,GAAcF,GAAG,CAACE,GAAD,CAAjB;AAAyB;AAAE;;AAACD,IAAAA,MAAM,CAACM,OAAP,GAAiBP,GAAjB;AAAsB,WAAOC,MAAP;AAAgB;AAAE;AAE7Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIO,SAAS,GAAG,SAASA,SAAT,CAAmBC,UAAnB,EAA+B;AAC9C,SAAO,IAAIf,MAAM,CAACgB,UAAX,CAAsBD,UAAtB,CAAP;AACA,CAFD,C,CAIA;;;AACA,IAAIE,OAAO,GAAGH,SAAS,EAAvB,C,CAEA;AACA;;AACA,IAAII,UAAU,GAAGJ,SAAS,EAA1B,C,CAA8B;;AAC9B,IAAIK,QAAQ,GAAGL,SAAS,EAAxB,C,CAA4B;;AAC5B,IAAIM,gBAAgB,GAAGN,SAAS,EAAhC,C,CAAoC;;AACpC,IAAIO,sBAAsB,GAAGP,SAAS,EAAtC,C,CAA0C;;AAC1C,IAAIQ,QAAQ,GAAGR,SAAS,EAAxB,C,CAA4B;;AAC5B,IAAIS,YAAY,GAAGT,SAAS,EAA5B,C,CAAgC;;AAChC,IAAIU,KAAK,GAAGV,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAArB,C,CAAmC;;AACnC,IAAIC,WAAW,GAAGZ,SAAS,EAA3B,C,CAA+B;;AAC/B,IAAIa,UAAU,GAAGb,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAA1B,C,CAAwC;;AACxC,IAAIG,KAAK,GAAGd,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAArB,C,CAAmC;;AACnC,IAAII,mBAAmB,GAAGf,SAAS,EAAnC,C,CAAuC;;AACvC,IAAIgB,eAAe,GAAGhB,SAAS,EAA/B,C,CAAmC;;AACnC,IAAIiB,iBAAiB,GAAGjB,SAAS,EAAjC,C,CAAqC;;AACrC,IAAIkB,sBAAsB,GAAGlB,SAAS,EAAtC,C,CAA0C;;AAC1C,IAAImB,eAAe,GAAGnB,SAAS,EAA/B,C,CAAmC;;AACnC,IAAIoB,iBAAiB,GAAGpB,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAAjC,C,CAA+C;;AAC/C,IAAIU,mBAAmB,GAAGrB,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAAnC,C,CAAiD;;AACjD,IAAIW,wBAAwB,GAAGtB,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAAxC,C,CAAsD;;AACtD,IAAIY,iBAAiB,GAAGvB,SAAS,CAACZ,MAAM,CAACuB,GAAR,CAAjC,C,CAA+C;;AAC/C,IAAIa,oBAAoB,GAAGxB,SAAS,EAApC,C,CAAwC;;AACxC,IAAIyB,sBAAsB,GAAGzB,SAAS,EAAtC,C,CAA0C;;AAC1C,IAAI0B,2BAA2B,GAAG1B,SAAS,EAA3C,C,CAA+C;;AAC/C,IAAI2B,oBAAoB,GAAG3B,SAAS,EAApC,C,CAAwC;;AACxC,IAAI4B,cAAc,GAAG5B,SAAS,EAA9B,C,CAAkC;;AAClC,IAAI6B,kBAAkB,GAAG7B,SAAS,EAAlC,C,CAAsC;;AACtC,IAAI8B,OAAO,GAAG9B,SAAS,CAACZ,MAAM,CAAC2C,KAAR,CAAvB,C,CAAuC;;AACvC,IAAIC,aAAa,GAAGhC,SAAS,EAA7B,C,CAAiC;;AACjC,IAAIiC,YAAY,GAAGjC,SAAS,CAACZ,MAAM,CAAC2C,KAAR,CAA5B,C,CAA4C;;AAC5C,IAAIG,cAAc,GAAGlC,SAAS,CAACZ,MAAM,CAAC+C,WAAR,CAA9B,C,CAAoD;;AACpD,IAAIC,4BAA4B,GAAGpC,SAAS,EAA5C,C,CAAgD;;AAChD,IAAIqC,WAAW,GAAGrC,SAAS,EAA3B,C,CAA+B;;AAC/B,IAAIsC,cAAc,GAAGtC,SAAS,EAA9B,C,CAAkC;;AAClC,IAAIuC,eAAe,GAAGvC,SAAS,EAA/B,C,CAAmC;;AACnC,IAAIwC,IAAI,GAAGxC,SAAS,CAACZ,MAAM,CAACqD,EAAR,CAApB,C,CAAiC;AAEjC;;AACAtC,OAAO,CAACuC,EAAR,CAAWnD,KAAK,CAACkD,EAAjB,EAAqBD,IAArB,EAA2BE,EAA3B,CAA8BnD,KAAK,CAACoD,QAApC,EAA8CvC,UAA9C,EAA0DsC,EAA1D,CAA6DnD,KAAK,CAACqD,MAAnE,EAA2EvC,QAA3E,EAAqFqC,EAArF,CAAwFnD,KAAK,CAACsD,KAA9F,EAAqGvC,gBAArG;AAEAF,UAAU,CAACsC,EAAX,CAAcnD,KAAK,CAACsD,KAApB,EAA2BvC,gBAA3B;AACAA,gBAAgB,CAACoC,EAAjB,CAAoBnD,KAAK,CAACsD,KAA1B,EAAiCtC,sBAAjC,E,CAEA;;AACAJ,OAAO,CAACuC,EAAR,CAAWnD,KAAK,CAACuD,GAAjB,EAAsBtC,QAAtB,EAAgCkC,EAAhC,CAAmCnD,KAAK,CAACwD,MAAzC,EAAiDvC,QAAjD,EAA2DkC,EAA3D,CAA8DnD,KAAK,CAACyD,SAApE,EAA+EtC,KAA/E,EAAsFgC,EAAtF,CAAyFnD,KAAK,CAAC0D,GAA/F,EAAoGzC,QAApG,E,CAEA;;AACAD,sBAAsB,CAACmC,EAAvB,CAA0BnD,KAAK,CAACuD,GAAhC,EAAqChC,KAArC,EAA4C4B,EAA5C,CAA+CnD,KAAK,CAACwD,MAArD,EAA6DjC,KAA7D,EAAoE4B,EAApE,CAAuEnD,KAAK,CAAC0D,GAA7E,EAAkFnC,KAAlF,EAAyF4B,EAAzF,CAA4FnD,KAAK,CAACyD,SAAlG,EAA6GlC,KAA7G,E,CAEA;AACA;;AACAN,QAAQ,CAACkC,EAAT,CAAYnD,KAAK,CAAC2D,GAAlB,EAAuBzC,YAAvB;AACAmB,cAAc,CAACc,EAAf,CAAkBnD,KAAK,CAAC2D,GAAxB,EAA6BrB,kBAA7B,E,CAEA;AAEA;;AACApB,YAAY,CAACiC,EAAb,CAAgBnD,KAAK,CAACuD,GAAtB,EAA2BpC,KAA3B,EAAkCgC,EAAlC,CAAqCnD,KAAK,CAACwD,MAA3C,EAAmDvC,QAAnD,EAA6DkC,EAA7D,CAAgEnD,KAAK,CAAC0D,GAAtE,EAA2EzC,QAA3E,EAAqFkC,EAArF,CAAwFnD,KAAK,CAACyD,SAA9F,EAAyGxC,QAAzG;AAEAqB,kBAAkB,CAACa,EAAnB,CAAsBnD,KAAK,CAACuD,GAA5B,EAAiChB,OAAjC,EAA0CY,EAA1C,CAA6CnD,KAAK,CAACwD,MAAnD,EAA2DnB,cAA3D,EAA2Ec,EAA3E,CAA8EnD,KAAK,CAAC0D,GAApF,EAAyFrB,cAAzF,EAAyGc,EAAzG,CAA4GnD,KAAK,CAACyD,SAAlH,EAA6HpB,cAA7H,E,CAEA;AACA;;AACAlB,KAAK,CAACgC,EAAN,CAASnD,KAAK,CAAC2D,GAAf,EAAoBzC,YAApB;AACAqB,OAAO,CAACY,EAAR,CAAWnD,KAAK,CAAC2D,GAAjB,EAAsBrB,kBAAtB,E,CAEA;AACA;;AACAnB,KAAK,CAACgC,EAAN,CAASnD,KAAK,CAAC4D,KAAf,EAAsBvC,WAAtB,EAAmC8B,EAAnC,CAAsCnD,KAAK,CAACsD,KAA5C,EAAmD/B,KAAnD;AACAF,WAAW,CAAC8B,EAAZ,CAAenD,KAAK,CAAC0D,GAArB,EAA0BpC,UAA1B;AACAA,UAAU,CAAC6B,EAAX,CAAcnD,KAAK,CAACsD,KAApB,EAA2B/B,KAA3B;AACAgB,OAAO,CAACY,EAAR,CAAWnD,KAAK,CAAC4D,KAAjB,EAAwBnB,aAAxB;AACAA,aAAa,CAACU,EAAd,CAAiBnD,KAAK,CAAC0D,GAAvB,EAA4BhB,YAA5B,E,CAEA;;AACA,IAAImB,WAAW,GAAG,CAAC7D,KAAK,CAACwD,MAAP,EAAexD,KAAK,CAAC8D,EAArB,EAAyB9D,KAAK,CAACyD,SAA/B,EAA0CzD,KAAK,CAAC0D,GAAhD,EAAqD1D,KAAK,CAAC+D,IAA3D,EAAiE/D,KAAK,CAACgE,KAAvE,EAA8EhE,KAAK,CAACoD,QAApF,EAA8FpD,KAAK,CAACsD,KAApG,EAA2GtD,KAAK,CAACuD,GAAjH,EAAsHvD,KAAK,CAACiE,UAA5H,EAAwIjE,KAAK,CAACkE,GAA9I,EAAmJlE,KAAK,CAACmE,SAAzJ,CAAlB,C,CAEA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,CAACpE,KAAK,CAAC4D,KAAP,EAAc5D,KAAK,CAAC2D,GAApB,EAAyB3D,KAAK,CAACqE,KAA/B,EAAsCrE,KAAK,CAACsE,WAA5C,EAAyDtE,KAAK,CAACuE,UAA/D,EAA2EvE,KAAK,CAACwE,YAAjF,EAA+FxE,KAAK,CAACyE,iBAArG,EAAwHzE,KAAK,CAAC0E,UAA9H,EAA0I1E,KAAK,CAAC2E,SAAhJ,EAA2J3E,KAAK,CAAC4E,WAAjK,EAA8K5E,KAAK,CAAC6E,gBAApL,EAAsM7E,KAAK,CAAC8E,SAA5M,CAArB,C,CAEA;AACA;AAEA;;AACAvD,KAAK,CAAC4B,EAAN,CAASnD,KAAK,CAAC2E,SAAf,EAA0BlD,eAA1B,EAA2C0B,EAA3C,CAA8CnD,KAAK,CAAC4E,WAApD,EAAiElD,iBAAjE,EAAoFyB,EAApF,CAAuFnD,KAAK,CAAC6E,gBAA7F,EAA+GlD,sBAA/G,EAAuIwB,EAAvI,CAA0InD,KAAK,CAAC8E,SAAhJ,EAA2JlD,eAA3J,E,CAEA;;AACAJ,mBAAmB,CAAC2B,EAApB,CAAuBnD,KAAK,CAAC2E,SAA7B,EAAwClD,eAAxC,EAAyD0B,EAAzD,CAA4DnD,KAAK,CAAC4E,WAAlE,EAA+ElD,iBAA/E,EAAkGyB,EAAlG,CAAqGnD,KAAK,CAAC6E,gBAA3G,EAA6HlD,sBAA7H,EAAqJwB,EAArJ,CAAwJnD,KAAK,CAAC8E,SAA9J,EAAyKlD,eAAzK,E,CAEA;;AACAH,eAAe,CAAC0B,EAAhB,CAAmBnD,KAAK,CAACuE,UAAzB,EAAqChD,KAArC;AACAG,iBAAiB,CAACyB,EAAlB,CAAqBnD,KAAK,CAACwE,YAA3B,EAAyCjD,KAAzC;AACAI,sBAAsB,CAACwB,EAAvB,CAA0BnD,KAAK,CAACyE,iBAAhC,EAAmDlD,KAAnD;AACAK,eAAe,CAACuB,EAAhB,CAAmBnD,KAAK,CAAC0E,UAAzB,EAAqCnD,KAArC;AACAM,iBAAiB,CAACsB,EAAlB,CAAqBnD,KAAK,CAACuE,UAA3B,EAAuChD,KAAvC;AACAO,mBAAmB,CAACqB,EAApB,CAAuBnD,KAAK,CAACwE,YAA7B,EAA2CjD,KAA3C;AACAQ,wBAAwB,CAACoB,EAAzB,CAA4BnD,KAAK,CAACyE,iBAAlC,EAAqDlD,KAArD;AACAS,iBAAiB,CAACmB,EAAlB,CAAqBnD,KAAK,CAAC0E,UAA3B,EAAuCnD,KAAvC;AACAU,oBAAoB,CAACkB,EAArB,CAAwBnD,KAAK,CAACuE,UAA9B,EAA0ChD,KAA1C;AACAW,sBAAsB,CAACiB,EAAvB,CAA0BnD,KAAK,CAACwE,YAAhC,EAA8CjD,KAA9C;AACAY,2BAA2B,CAACgB,EAA5B,CAA+BnD,KAAK,CAACyE,iBAArC,EAAwDlD,KAAxD;AACAa,oBAAoB,CAACe,EAArB,CAAwBnD,KAAK,CAAC0E,UAA9B,EAA0CnD,KAA1C,E,CAEA;AACA;AACA;;AACAE,eAAe,CAAC0B,EAAhB,CAAmBU,WAAnB,EAAgChC,iBAAhC;AACAH,iBAAiB,CAACyB,EAAlB,CAAqBU,WAArB,EAAkC/B,mBAAlC;AACAH,sBAAsB,CAACwB,EAAvB,CAA0BU,WAA1B,EAAuC9B,wBAAvC;AACAH,eAAe,CAACuB,EAAhB,CAAmBU,WAAnB,EAAgC7B,iBAAhC;AACAP,eAAe,CAAC0B,EAAhB,CAAmBiB,cAAnB,EAAmCnC,oBAAnC;AACAP,iBAAiB,CAACyB,EAAlB,CAAqBiB,cAArB,EAAqClC,sBAArC;AACAP,sBAAsB,CAACwB,EAAvB,CAA0BiB,cAA1B,EAA0CjC,2BAA1C;AACAP,eAAe,CAACuB,EAAhB,CAAmBiB,cAAnB,EAAmChC,oBAAnC,E,CAEA;;AACAP,iBAAiB,CAACsB,EAAlB,CAAqBU,WAArB,EAAkChC,iBAAlC;AACAC,mBAAmB,CAACqB,EAApB,CAAuBU,WAAvB,EAAoC/B,mBAApC;AACAC,wBAAwB,CAACoB,EAAzB,CAA4BU,WAA5B,EAAyC9B,wBAAzC;AACAC,iBAAiB,CAACmB,EAAlB,CAAqBU,WAArB,EAAkC7B,iBAAlC;AACAH,iBAAiB,CAACsB,EAAlB,CAAqBiB,cAArB,EAAqCvC,iBAArC;AACAC,mBAAmB,CAACqB,EAApB,CAAuBiB,cAAvB,EAAuCtC,mBAAvC;AACAC,wBAAwB,CAACoB,EAAzB,CAA4BiB,cAA5B,EAA4CrC,wBAA5C;AACAC,iBAAiB,CAACmB,EAAlB,CAAqBiB,cAArB,EAAqCpC,iBAArC;AAEAC,oBAAoB,CAACkB,EAArB,CAAwBU,WAAxB,EAAqChC,iBAArC;AACAK,sBAAsB,CAACiB,EAAvB,CAA0BU,WAA1B,EAAuC/B,mBAAvC;AACAK,2BAA2B,CAACgB,EAA5B,CAA+BU,WAA/B,EAA4C9B,wBAA5C;AACAK,oBAAoB,CAACe,EAArB,CAAwBU,WAAxB,EAAqC7B,iBAArC;AACAC,oBAAoB,CAACkB,EAArB,CAAwBiB,cAAxB,EAAwCnC,oBAAxC;AACAC,sBAAsB,CAACiB,EAAvB,CAA0BiB,cAA1B,EAA0ClC,sBAA1C;AACAC,2BAA2B,CAACgB,EAA5B,CAA+BiB,cAA/B,EAA+CjC,2BAA/C;AACAC,oBAAoB,CAACe,EAArB,CAAwBiB,cAAxB,EAAwChC,oBAAxC,E,CAEA;;AACAb,KAAK,CAAC4B,EAAN,CAASU,WAAT,EAAsBtC,KAAtB;AACAC,mBAAmB,CAAC2B,EAApB,CAAuBU,WAAvB,EAAoCtC,KAApC;AAEAA,KAAK,CAAC4B,EAAN,CAASiB,cAAT,EAAyB5C,mBAAzB;AACAA,mBAAmB,CAAC2B,EAApB,CAAuBiB,cAAvB,EAAuC5C,mBAAvC,E,CAEA;AACA;AACA;AAEA;AACA;;AACAV,QAAQ,CAACqC,EAAT,CAAYnD,KAAK,CAACuD,GAAlB,EAAuBZ,cAAvB,EAAuCQ,EAAvC,CAA0CnD,KAAK,CAACwD,MAAhD,EAAwDb,cAAxD,EAAwEQ,EAAxE,CAA2EnD,KAAK,CAAC0D,GAAjF,EAAsFf,cAAtF,EAAsGQ,EAAtG,CAAyGnD,KAAK,CAACyD,SAA/G,EAA0Hd,cAA1H,E,CAEA;;AACAA,cAAc,CAACQ,EAAf,CAAkBU,WAAlB,EAA+BlB,cAA/B,EAA+CQ,EAA/C,CAAkDiB,cAAlD,EAAkEvB,4BAAlE;AACAA,4BAA4B,CAACM,EAA7B,CAAgCU,WAAhC,EAA6ClB,cAA7C,EAA6DQ,EAA7D,CAAgEiB,cAAhE,EAAgFvB,4BAAhF,E,CAEA;AACA;;AACA,IAAIkC,kBAAkB,GAAG,CAAC/E,KAAK,CAACwD,MAAP,EAAexD,KAAK,CAAC0D,GAArB,EAA0B1D,KAAK,CAAC+D,IAAhC,EAAsC/D,KAAK,CAACgE,KAA5C,EAAmDhE,KAAK,CAACqE,KAAzD,EAAgErE,KAAK,CAACiE,UAAtE,EAAkFjE,KAAK,CAACkE,GAAxF,EAA6FlE,KAAK,CAACmE,SAAnG,EAA8GnE,KAAK,CAACuD,GAApH,CAAzB,C,CAEA;AACA;;AACAtC,QAAQ,CAACkC,EAAT,CAAY4B,kBAAZ,EAAgCjC,WAAhC,EAA6CK,EAA7C,CAAgDnD,KAAK,CAAC8D,EAAtD,EAA0Df,cAA1D;AACA5B,KAAK,CAACgC,EAAN,CAAS4B,kBAAT,EAA6BjC,WAA7B,EAA0CK,EAA1C,CAA6CnD,KAAK,CAAC8D,EAAnD,EAAuDf,cAAvD;AACA7B,YAAY,CAACiC,EAAb,CAAgB4B,kBAAhB,EAAoCjC,WAApC,E,CAEA;AACA;;AACAA,WAAW,CAACK,EAAZ,CAAe4B,kBAAf,EAAmCjC,WAAnC,EAAgDK,EAAhD,CAAmDnD,KAAK,CAAC8D,EAAzD,EAA6Df,cAA7D,EAA6E;AAA7E,CACCI,EADD,CACInD,KAAK,CAAC2D,GADV,EACeX,eADf;AAEAA,eAAe,CAACG,EAAhB,CAAmB4B,kBAAnB,EAAuCjC,WAAvC;AACAC,cAAc,CAACI,EAAf,CAAkBnD,KAAK,CAACuD,GAAxB,EAA6BlB,cAA7B,EAA6Cc,EAA7C,CAAgDnD,KAAK,CAACwD,MAAtD,EAA8DnB,cAA9D,EAA8Ec,EAA9E,CAAiFnD,KAAK,CAACyD,SAAvF,EAAkGlB,OAAlG,E,CACA;;AAEA,IAAIhD,GAAG,GAAG,SAASA,GAAT,CAAayF,MAAb,EAAqB;AAC9B,MAAIC,GAAG,GAAGD,MAAM,CAACE,MAAjB;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,SAAOF,MAAM,GAAGF,GAAhB,EAAqB;AACpB,QAAIK,KAAK,GAAG1E,OAAZ;AACA,QAAI2E,WAAW,GAAG,IAAlB;AACA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,eAAe,GAAG,IAAtB;AACA,QAAIC,YAAY,GAAG,CAAC,CAApB;;AAEA,WAAOR,MAAM,GAAGF,GAAT,IAAgB,EAAEM,WAAW,GAAGD,KAAK,CAACM,IAAN,CAAWZ,MAAM,CAACG,MAAD,CAAjB,CAAhB,CAAvB,EAAoE;AACnE;AACA;AACAE,MAAAA,UAAU,CAACQ,IAAX,CAAgBb,MAAM,CAACG,MAAM,EAAP,CAAtB;AACA;;AAED,WAAOA,MAAM,GAAGF,GAAT,KAAiBO,SAAS,GAAGD,WAAW,IAAID,KAAK,CAACM,IAAN,CAAWZ,MAAM,CAACG,MAAD,CAAjB,CAA5C,CAAP,EAAgF;AAE/E;AACAI,MAAAA,WAAW,GAAG,IAAd;AACAD,MAAAA,KAAK,GAAGE,SAAR,CAJ+E,CAM/E;;AACA,UAAIF,KAAK,CAACQ,OAAN,EAAJ,EAAqB;AACpBH,QAAAA,YAAY,GAAG,CAAf;AACAD,QAAAA,eAAe,GAAGJ,KAAlB;AACA,OAHD,MAGO,IAAIK,YAAY,IAAI,CAApB,EAAuB;AAC7BA,QAAAA,YAAY;AACZ;;AAEDR,MAAAA,MAAM;AACNM,MAAAA,WAAW;AACX;;AAED,QAAIE,YAAY,GAAG,CAAnB,EAAsB;AAErB;AACA;AACA,WAAK,IAAII,CAAC,GAAGZ,MAAM,GAAGM,WAAtB,EAAmCM,CAAC,GAAGZ,MAAvC,EAA+CY,CAAC,EAAhD,EAAoD;AACnDV,QAAAA,UAAU,CAACQ,IAAX,CAAgBb,MAAM,CAACe,CAAD,CAAtB;AACA;AACD,KAPD,MAOO;AAEN;AAEA;AACA,UAAIV,UAAU,CAACH,MAAX,GAAoB,CAAxB,EAA2B;AAC1BE,QAAAA,MAAM,CAACS,IAAP,CAAY,IAAIhG,MAAM,CAACmG,IAAX,CAAgBX,UAAhB,CAAZ;AACAA,QAAAA,UAAU,GAAG,EAAb;AACA,OARK,CAUN;;;AACAF,MAAAA,MAAM,IAAIQ,YAAV;AACAF,MAAAA,WAAW,IAAIE,YAAf,CAZM,CAcN;;AACA,UAAIM,KAAK,GAAGP,eAAe,CAACQ,IAAhB,EAAZ;AACAd,MAAAA,MAAM,CAACS,IAAP,CAAY,IAAII,KAAJ,CAAUjB,MAAM,CAACmB,KAAP,CAAahB,MAAM,GAAGM,WAAtB,EAAmCN,MAAnC,CAAV,CAAZ;AACA;AACD,GA/D6B,CAiE9B;;;AACA,MAAIE,UAAU,CAACH,MAAX,GAAoB,CAAxB,EAA2B;AAC1BE,IAAAA,MAAM,CAACS,IAAP,CAAY,IAAIhG,MAAM,CAACmG,IAAX,CAAgBX,UAAhB,CAAZ;AACA;;AAED,SAAOD,MAAP;AACA,CAvED;;AAyEAhG,OAAO,CAACK,KAAR,GAAgBE,MAAM,CAACgB,UAAvB;AACAvB,OAAO,CAACI,MAAR,GAAiBM,YAAjB;AACAV,OAAO,CAACG,GAAR,GAAcA,GAAd;AACAH,OAAO,CAACE,KAAR,GAAgBsB,OAAhB","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.start = exports.run = exports.TOKENS = exports.State = undefined;\n\nvar _state = require('./state');\n\nvar _multi = require('./tokens/multi');\n\nvar MULTI_TOKENS = _interopRequireWildcard(_multi);\n\nvar _text = require('./tokens/text');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/Email_address (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main parser\n*/\n\nvar makeState = function makeState(tokenClass) {\n\treturn new _state.TokenState(tokenClass);\n};\n\n// The universal starting state.\nvar S_START = makeState();\n\n// Intermediate states for URLs. Note that domains that begin with a protocol\n// are treated slighly differently from those that don't.\nvar S_PROTOCOL = makeState(); // e.g., 'http:'\nvar S_MAILTO = makeState(); // 'mailto:'\nvar S_PROTOCOL_SLASH = makeState(); // e.g., '/', 'http:/''\nvar S_PROTOCOL_SLASH_SLASH = makeState(); // e.g., '//', 'http://'\nvar S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)\nvar S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT\nvar S_TLD = makeState(_multi.URL); // (A) Simplest possible URL with no query string\nvar S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)\nvar S_TLD_PORT = makeState(_multi.URL); // TLD followed by a port number\nvar S_URL = makeState(_multi.URL); // Long URL with optional port and maybe query string\nvar S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)\nvar S_URL_OPENBRACE = makeState(); // URL followed by {\nvar S_URL_OPENBRACKET = makeState(); // URL followed by [\nvar S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <\nvar S_URL_OPENPAREN = makeState(); // URL followed by (\nvar S_URL_OPENBRACE_Q = makeState(_multi.URL); // URL followed by { and some symbols that the URL can end it\nvar S_URL_OPENBRACKET_Q = makeState(_multi.URL); // URL followed by [ and some symbols that the URL can end it\nvar S_URL_OPENANGLEBRACKET_Q = makeState(_multi.URL); // URL followed by < and some symbols that the URL can end it\nvar S_URL_OPENPAREN_Q = makeState(_multi.URL); // URL followed by ( and some symbols that the URL can end it\nvar S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it\nvar S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it\nvar S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it\nvar S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it\nvar S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)\nvar S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT\nvar S_EMAIL = makeState(_multi.EMAIL); // (C) Possible email address (could have more tlds)\nvar S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)\nvar S_EMAIL_PORT = makeState(_multi.EMAIL); // (C) Email address with a port\nvar S_MAILTO_EMAIL = makeState(_multi.MAILTOEMAIL); // Email that begins with the mailto prefix (D)\nvar S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars\nvar S_LOCALPART = makeState(); // Local part of the email address\nvar S_LOCALPART_AT = makeState(); // Local part of the email address plus @\nvar S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)\nvar S_NL = makeState(_multi.NL); // single new line\n\n// Make path from start to protocol (with '//')\nS_START.on(_text.NL, S_NL).on(_text.PROTOCOL, S_PROTOCOL).on(_text.MAILTO, S_MAILTO).on(_text.SLASH, S_PROTOCOL_SLASH);\n\nS_PROTOCOL.on(_text.SLASH, S_PROTOCOL_SLASH);\nS_PROTOCOL_SLASH.on(_text.SLASH, S_PROTOCOL_SLASH_SLASH);\n\n// The very first potential domain name\nS_START.on(_text.TLD, S_DOMAIN).on(_text.DOMAIN, S_DOMAIN).on(_text.LOCALHOST, S_TLD).on(_text.NUM, S_DOMAIN);\n\n// Force URL for protocol followed by anything sane\nS_PROTOCOL_SLASH_SLASH.on(_text.TLD, S_URL).on(_text.DOMAIN, S_URL).on(_text.NUM, S_URL).on(_text.LOCALHOST, S_URL);\n\n// Account for dots and hyphens\n// hyphens are usually parts of domain names\nS_DOMAIN.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL_DOMAIN.on(_text.DOT, S_EMAIL_DOMAIN_DOT);\n\n// Hyphen can jump back to a domain name\n\n// After the first domain and a dot, we can find either a URL or another domain\nS_DOMAIN_DOT.on(_text.TLD, S_TLD).on(_text.DOMAIN, S_DOMAIN).on(_text.NUM, S_DOMAIN).on(_text.LOCALHOST, S_DOMAIN);\n\nS_EMAIL_DOMAIN_DOT.on(_text.TLD, S_EMAIL).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.NUM, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL_DOMAIN);\n\n// S_TLD accepts! But the URL could be longer, try to find a match greedily\n// The `run` function should be able to \"rollback\" to the accepting state\nS_TLD.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL.on(_text.DOT, S_EMAIL_DOMAIN_DOT);\n\n// Become real URLs after `SLASH` or `COLON NUM SLASH`\n// Here PSS and non-PSS converge\nS_TLD.on(_text.COLON, S_TLD_COLON).on(_text.SLASH, S_URL);\nS_TLD_COLON.on(_text.NUM, S_TLD_PORT);\nS_TLD_PORT.on(_text.SLASH, S_URL);\nS_EMAIL.on(_text.COLON, S_EMAIL_COLON);\nS_EMAIL_COLON.on(_text.NUM, S_EMAIL_PORT);\n\n// Types of characters the URL can definitely end in\nvar qsAccepting = [_text.DOMAIN, _text.AT, _text.LOCALHOST, _text.NUM, _text.PLUS, _text.POUND, _text.PROTOCOL, _text.SLASH, _text.TLD, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND];\n\n// Types of tokens that can follow a URL and be part of the query string\n// but cannot be the very last characters\n// Characters that cannot appear in the URL at all should be excluded\nvar qsNonAccepting = [_text.COLON, _text.DOT, _text.QUERY, _text.PUNCTUATION, _text.CLOSEBRACE, _text.CLOSEBRACKET, _text.CLOSEANGLEBRACKET, _text.CLOSEPAREN, _text.OPENBRACE, _text.OPENBRACKET, _text.OPENANGLEBRACKET, _text.OPENPAREN];\n\n// These states are responsible primarily for determining whether or not to\n// include the final round bracket.\n\n// URL, followed by an opening bracket\nS_URL.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);\n\n// URL with extra symbols at the end, followed by an opening bracket\nS_URL_NON_ACCEPTING.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);\n\n// Closing bracket component. This character WILL be included in the URL\nS_URL_OPENBRACE.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_Q.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_Q.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_Q.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_Q.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_SYMS.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_SYMS.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_SYMS.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_SYMS.on(_text.CLOSEPAREN, S_URL);\n\n// URL that beings with an opening bracket, followed by a symbols.\n// Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only\n// has a single opening bracket for some reason).\nS_URL_OPENBRACE.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);\n\n// URL that begins with an opening bracket, followed by some symbols\nS_URL_OPENBRACE_Q.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_Q.on(qsNonAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsNonAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsNonAccepting, S_URL_OPENPAREN_Q);\n\nS_URL_OPENBRACE_SYMS.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_SYMS.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_SYMS.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_SYMS.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN_SYMS.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);\n\n// Account for the query string\nS_URL.on(qsAccepting, S_URL);\nS_URL_NON_ACCEPTING.on(qsAccepting, S_URL);\n\nS_URL.on(qsNonAccepting, S_URL_NON_ACCEPTING);\nS_URL_NON_ACCEPTING.on(qsNonAccepting, S_URL_NON_ACCEPTING);\n\n// Email address-specific state definitions\n// Note: We are not allowing '/' in email addresses since this would interfere\n// with real URLs\n\n// For addresses with the mailto prefix\n// 'mailto:' followed by anything sane is a valid email\nS_MAILTO.on(_text.TLD, S_MAILTO_EMAIL).on(_text.DOMAIN, S_MAILTO_EMAIL).on(_text.NUM, S_MAILTO_EMAIL).on(_text.LOCALHOST, S_MAILTO_EMAIL);\n\n// Greedily get more potential valid email values\nS_MAILTO_EMAIL.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\nS_MAILTO_EMAIL_NON_ACCEPTING.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\n\n// For addresses without the mailto prefix\n// Tokens allowed in the localpart of the email\nvar localpartAccepting = [_text.DOMAIN, _text.NUM, _text.PLUS, _text.POUND, _text.QUERY, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND, _text.TLD];\n\n// Some of the tokens in `localpartAccepting` are already accounted for here and\n// will not be overwritten (don't worry)\nS_DOMAIN.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_TLD.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_DOMAIN_DOT.on(localpartAccepting, S_LOCALPART);\n\n// Okay we're on a localpart. Now what?\n// TODO: IP addresses and what if the email starts with numbers?\nS_LOCALPART.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT) // close to an email address now\n.on(_text.DOT, S_LOCALPART_DOT);\nS_LOCALPART_DOT.on(localpartAccepting, S_LOCALPART);\nS_LOCALPART_AT.on(_text.TLD, S_EMAIL_DOMAIN).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL);\n// States following `@` defined above\n\nvar run = function run(tokens) {\n\tvar len = tokens.length;\n\tvar cursor = 0;\n\tvar multis = [];\n\tvar textTokens = [];\n\n\twhile (cursor < len) {\n\t\tvar state = S_START;\n\t\tvar secondState = null;\n\t\tvar nextState = null;\n\t\tvar multiLength = 0;\n\t\tvar latestAccepting = null;\n\t\tvar sinceAccepts = -1;\n\n\t\twhile (cursor < len && !(secondState = state.next(tokens[cursor]))) {\n\t\t\t// Starting tokens with nowhere to jump to.\n\t\t\t// Consider these to be just plain text\n\t\t\ttextTokens.push(tokens[cursor++]);\n\t\t}\n\n\t\twhile (cursor < len && (nextState = secondState || state.next(tokens[cursor]))) {\n\n\t\t\t// Get the next state\n\t\t\tsecondState = null;\n\t\t\tstate = nextState;\n\n\t\t\t// Keep track of the latest accepting state\n\t\t\tif (state.accepts()) {\n\t\t\t\tsinceAccepts = 0;\n\t\t\t\tlatestAccepting = state;\n\t\t\t} else if (sinceAccepts >= 0) {\n\t\t\t\tsinceAccepts++;\n\t\t\t}\n\n\t\t\tcursor++;\n\t\t\tmultiLength++;\n\t\t}\n\n\t\tif (sinceAccepts < 0) {\n\n\t\t\t// No accepting state was found, part of a regular text token\n\t\t\t// Add all the tokens we looked at to the text tokens array\n\t\t\tfor (var i = cursor - multiLength; i < cursor; i++) {\n\t\t\t\ttextTokens.push(tokens[i]);\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Accepting state!\n\n\t\t\t// First close off the textTokens (if available)\n\t\t\tif (textTokens.length > 0) {\n\t\t\t\tmultis.push(new _multi.TEXT(textTokens));\n\t\t\t\ttextTokens = [];\n\t\t\t}\n\n\t\t\t// Roll back to the latest accepting state\n\t\t\tcursor -= sinceAccepts;\n\t\t\tmultiLength -= sinceAccepts;\n\n\t\t\t// Create a new multitoken\n\t\t\tvar MULTI = latestAccepting.emit();\n\t\t\tmultis.push(new MULTI(tokens.slice(cursor - multiLength, cursor)));\n\t\t}\n\t}\n\n\t// Finally close off the textTokens (if available)\n\tif (textTokens.length > 0) {\n\t\tmultis.push(new _multi.TEXT(textTokens));\n\t}\n\n\treturn multis;\n};\n\nexports.State = _state.TokenState;\nexports.TOKENS = MULTI_TOKENS;\nexports.run = run;\nexports.start = S_START;"]},"metadata":{},"sourceType":"script"}