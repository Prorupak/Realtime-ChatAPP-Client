{"ast":null,"code":"import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { isDayOrMoment, useTranslationContext } from '../../context/TranslationContext';\n/**\n * Component to display system and channel event messages\n */\n\nvar UnMemoizedEventComponent = function UnMemoizedEventComponent(props) {\n  var _a, _b, _c;\n\n  var _d = props.Avatar,\n      Avatar = _d === void 0 ? DefaultAvatar : _d,\n      message = props.message;\n  var tDateTimeParser = useTranslationContext('EventComponent').tDateTimeParser;\n  var _e = message.created_at,\n      created_at = _e === void 0 ? '' : _e,\n      event = message.event,\n      text = message.text,\n      type = message.type;\n\n  var dateFormatter = function dateFormatter(date, format) {\n    var parsedDate = tDateTimeParser(date);\n    var formattedDate = isDayOrMoment(parsedDate) ? parsedDate.format(format) : parsedDate;\n    return formattedDate;\n  };\n\n  if (type === 'system') return React.createElement(\"div\", {\n    className: 'str-chat__message--system'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message--system__text'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message--system__line'\n  }), React.createElement(\"p\", null, text), React.createElement(\"div\", {\n    className: 'str-chat__message--system__line'\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message--system__date'\n  }, React.createElement(\"strong\", null, dateFormatter(created_at, 'dddd'), \" \"), \"at \", dateFormatter(created_at, 'hh:mm A')));\n\n  if ((event === null || event === void 0 ? void 0 : event.type) === 'member.removed' || (event === null || event === void 0 ? void 0 : event.type) === 'member.added') {\n    var name_1 = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = event.user) === null || _b === void 0 ? void 0 : _b.id);\n    var sentence = name_1 + \" \" + (event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat');\n    return React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event'\n    }, React.createElement(Avatar, {\n      image: (_c = event.user) === null || _c === void 0 ? void 0 : _c.image,\n      name: name_1,\n      user: event.user\n    }), React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event__content'\n    }, React.createElement(\"em\", {\n      className: 'str-chat__event-component__channel-event__sentence'\n    }, sentence), React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event__date'\n    }, dateFormatter(created_at, 'LT'))));\n  }\n\n  return null;\n};\n\nexport var EventComponent = React.memo(UnMemoizedEventComponent);","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/EventComponent/EventComponent.js"],"names":["React","Avatar","DefaultAvatar","isDayOrMoment","useTranslationContext","UnMemoizedEventComponent","props","_a","_b","_c","_d","message","tDateTimeParser","_e","created_at","event","text","type","dateFormatter","date","format","parsedDate","formattedDate","createElement","className","name_1","user","name","id","sentence","image","EventComponent","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { isDayOrMoment, useTranslationContext } from '../../context/TranslationContext';\n/**\n * Component to display system and channel event messages\n */\nvar UnMemoizedEventComponent = function (props) {\n    var _a, _b, _c;\n    var _d = props.Avatar, Avatar = _d === void 0 ? DefaultAvatar : _d, message = props.message;\n    var tDateTimeParser = useTranslationContext('EventComponent').tDateTimeParser;\n    var _e = message.created_at, created_at = _e === void 0 ? '' : _e, event = message.event, text = message.text, type = message.type;\n    var dateFormatter = function (date, format) {\n        var parsedDate = tDateTimeParser(date);\n        var formattedDate = isDayOrMoment(parsedDate) ? parsedDate.format(format) : parsedDate;\n        return formattedDate;\n    };\n    if (type === 'system')\n        return (React.createElement(\"div\", { className: 'str-chat__message--system' },\n            React.createElement(\"div\", { className: 'str-chat__message--system__text' },\n                React.createElement(\"div\", { className: 'str-chat__message--system__line' }),\n                React.createElement(\"p\", null, text),\n                React.createElement(\"div\", { className: 'str-chat__message--system__line' })),\n            React.createElement(\"div\", { className: 'str-chat__message--system__date' },\n                React.createElement(\"strong\", null,\n                    dateFormatter(created_at, 'dddd'),\n                    \" \"),\n                \"at \",\n                dateFormatter(created_at, 'hh:mm A'))));\n    if ((event === null || event === void 0 ? void 0 : event.type) === 'member.removed' || (event === null || event === void 0 ? void 0 : event.type) === 'member.added') {\n        var name_1 = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = event.user) === null || _b === void 0 ? void 0 : _b.id);\n        var sentence = name_1 + \" \" + (event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat');\n        return (React.createElement(\"div\", { className: 'str-chat__event-component__channel-event' },\n            React.createElement(Avatar, { image: (_c = event.user) === null || _c === void 0 ? void 0 : _c.image, name: name_1, user: event.user }),\n            React.createElement(\"div\", { className: 'str-chat__event-component__channel-event__content' },\n                React.createElement(\"em\", { className: 'str-chat__event-component__channel-event__sentence' }, sentence),\n                React.createElement(\"div\", { className: 'str-chat__event-component__channel-event__date' }, dateFormatter(created_at, 'LT')))));\n    }\n    return null;\n};\nexport var EventComponent = React.memo(UnMemoizedEventComponent);\n"]},"metadata":{},"sourceType":"module"}