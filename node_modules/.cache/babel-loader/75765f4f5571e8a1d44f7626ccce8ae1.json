{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelTruncatedListener = function (setChannels, customHandler, forceUpdate) {\n  var client = useChatContext('useChannelTruncatedListener').client;\n  useEffect(function () {\n    var handleEvent = function (event) {\n      setChannels(function (channels) {\n        return __spreadArray([], channels);\n      });\n\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      }\n\n      if (forceUpdate) {\n        forceUpdate();\n      }\n    };\n\n    client.on('channel.truncated', handleEvent);\n    return function () {\n      client.off('channel.truncated', handleEvent);\n    };\n  }, [customHandler]);\n};","map":{"version":3,"sources":["/home/rupak/Desktop/Project/Chat Application/chatApp_client/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useChannelTruncatedListener.js"],"names":["__spreadArray","to","from","i","il","length","j","useEffect","useChatContext","useChannelTruncatedListener","setChannels","customHandler","forceUpdate","client","handleEvent","event","channels","on","off"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACpE,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACG,MAArB,EAA6BC,CAAC,GAAGL,EAAE,CAACI,MAAzC,EAAiDF,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIG,CAAC,EAA/D,EACIL,EAAE,CAACK,CAAD,CAAF,GAAQJ,IAAI,CAACC,CAAD,CAAZ;;AACJ,SAAOF,EAAP;AACH,CAJD;;AAKA,SAASM,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAO,IAAIC,2BAA2B,GAAG,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,WAAtC,EAAmD;AACxF,MAAIC,MAAM,GAAGL,cAAc,CAAC,6BAAD,CAAd,CAA8CK,MAA3D;AACAN,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIO,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAC/BL,MAAAA,WAAW,CAAC,UAAUM,QAAV,EAAoB;AAAE,eAAOhB,aAAa,CAAC,EAAD,EAAKgB,QAAL,CAApB;AAAqC,OAA5D,CAAX;;AACA,UAAIL,aAAa,IAAI,OAAOA,aAAP,KAAyB,UAA9C,EAA0D;AACtDA,QAAAA,aAAa,CAACD,WAAD,EAAcK,KAAd,CAAb;AACH;;AACD,UAAIH,WAAJ,EAAiB;AACbA,QAAAA,WAAW;AACd;AACJ,KARD;;AASAC,IAAAA,MAAM,CAACI,EAAP,CAAU,mBAAV,EAA+BH,WAA/B;AACA,WAAO,YAAY;AACfD,MAAAA,MAAM,CAACK,GAAP,CAAW,mBAAX,EAAgCJ,WAAhC;AACH,KAFD;AAGH,GAdQ,EAcN,CAACH,aAAD,CAdM,CAAT;AAeH,CAjBM","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelTruncatedListener = function (setChannels, customHandler, forceUpdate) {\n    var client = useChatContext('useChannelTruncatedListener').client;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            setChannels(function (channels) { return __spreadArray([], channels); });\n            if (customHandler && typeof customHandler === 'function') {\n                customHandler(setChannels, event);\n            }\n            if (forceUpdate) {\n                forceUpdate();\n            }\n        };\n        client.on('channel.truncated', handleEvent);\n        return function () {\n            client.off('channel.truncated', handleEvent);\n        };\n    }, [customHandler]);\n};\n"]},"metadata":{},"sourceType":"module"}