{"ast":null,"code":"import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\n\nvar UnMemoizedMessageOptions = function (props) {\n  var _a = props.ActionsIcon,\n      ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a,\n      _b = props.displayLeft,\n      displayLeft = _b === void 0 ? true : _b,\n      _c = props.displayReplies,\n      displayReplies = _c === void 0 ? true : _c,\n      propHandleOpenThread = props.handleOpenThread,\n      messageWrapperRef = props.messageWrapperRef,\n      _d = props.ReactionIcon,\n      ReactionIcon = _d === void 0 ? DefaultReactionIcon : _d,\n      _e = props.theme,\n      theme = _e === void 0 ? 'simple' : _e,\n      _f = props.ThreadIcon,\n      ThreadIcon = _f === void 0 ? DefaultThreadIcon : _f;\n\n  var _g = useMessageContext('MessageOptions'),\n      customMessageActions = _g.customMessageActions,\n      getMessageActions = _g.getMessageActions,\n      contextHandleOpenThread = _g.handleOpenThread,\n      initialMessage = _g.initialMessage,\n      isMyMessage = _g.isMyMessage,\n      message = _g.message,\n      onReactionListClick = _g.onReactionListClick,\n      threadList = _g.threadList;\n\n  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions) || !!customMessageActions;\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n\n  if (isMyMessage() && displayLeft) {\n    return React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions\",\n      \"data-testid\": 'message-options-left'\n    }, showActionsBox && React.createElement(MessageActions, {\n      ActionsIcon: ActionsIcon,\n      messageWrapperRef: messageWrapperRef\n    }), shouldShowReplies && React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\",\n      \"data-testid\": 'thread-action',\n      onClick: handleOpenThread\n    }, React.createElement(ThreadIcon, null)), shouldShowReactions && React.createElement(\"div\", {\n      className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\",\n      \"data-testid\": 'message-reaction-action',\n      onClick: onReactionListClick\n    }, React.createElement(ReactionIcon, null)));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions\",\n    \"data-testid\": 'message-options'\n  }, shouldShowReactions && React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\",\n    \"data-testid\": 'message-reaction-action',\n    onClick: onReactionListClick\n  }, React.createElement(ReactionIcon, null)), shouldShowReplies && React.createElement(\"div\", {\n    className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\",\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, null)), showActionsBox && React.createElement(MessageActions, {\n    ActionsIcon: ActionsIcon,\n    messageWrapperRef: messageWrapperRef\n  }));\n};\n\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);","map":{"version":3,"sources":["/home/rupak/Desktop/Project/Chat Application/chatApp_client/node_modules/stream-chat-react/dist/components/Message/MessageOptions.js"],"names":["React","ActionsIcon","DefaultActionsIcon","ReactionIcon","DefaultReactionIcon","ThreadIcon","DefaultThreadIcon","MESSAGE_ACTIONS","showMessageActionsBox","MessageActions","useMessageContext","UnMemoizedMessageOptions","props","_a","_b","displayLeft","_c","displayReplies","propHandleOpenThread","handleOpenThread","messageWrapperRef","_d","_e","theme","_f","_g","customMessageActions","getMessageActions","contextHandleOpenThread","initialMessage","isMyMessage","message","onReactionListClick","threadList","messageActions","showActionsBox","shouldShowReactions","indexOf","react","shouldShowReplies","reply","type","status","createElement","className","onClick","MessageOptions","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon, } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedMessageOptions = function (props) {\n    var _a = props.ActionsIcon, ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a, _b = props.displayLeft, displayLeft = _b === void 0 ? true : _b, _c = props.displayReplies, displayReplies = _c === void 0 ? true : _c, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _d = props.ReactionIcon, ReactionIcon = _d === void 0 ? DefaultReactionIcon : _d, _e = props.theme, theme = _e === void 0 ? 'simple' : _e, _f = props.ThreadIcon, ThreadIcon = _f === void 0 ? DefaultThreadIcon : _f;\n    var _g = useMessageContext('MessageOptions'), customMessageActions = _g.customMessageActions, getMessageActions = _g.getMessageActions, contextHandleOpenThread = _g.handleOpenThread, initialMessage = _g.initialMessage, isMyMessage = _g.isMyMessage, message = _g.message, onReactionListClick = _g.onReactionListClick, threadList = _g.threadList;\n    var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n    var messageActions = getMessageActions();\n    var showActionsBox = showMessageActionsBox(messageActions) || !!customMessageActions;\n    var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n    var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n    if (!message.type ||\n        message.type === 'error' ||\n        message.type === 'system' ||\n        message.type === 'ephemeral' ||\n        message.status === 'failed' ||\n        message.status === 'sending' ||\n        initialMessage) {\n        return null;\n    }\n    if (isMyMessage() && displayLeft) {\n        return (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions\", \"data-testid\": 'message-options-left' },\n            showActionsBox && (React.createElement(MessageActions, { ActionsIcon: ActionsIcon, messageWrapperRef: messageWrapperRef })),\n            shouldShowReplies && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\", \"data-testid\": 'thread-action', onClick: handleOpenThread },\n                React.createElement(ThreadIcon, null))),\n            shouldShowReactions && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\", \"data-testid\": 'message-reaction-action', onClick: onReactionListClick },\n                React.createElement(ReactionIcon, null)))));\n    }\n    return (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions\", \"data-testid\": 'message-options' },\n        shouldShowReactions && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--reactions\", \"data-testid\": 'message-reaction-action', onClick: onReactionListClick },\n            React.createElement(ReactionIcon, null))),\n        shouldShowReplies && (React.createElement(\"div\", { className: \"str-chat__message-\" + theme + \"__actions__action str-chat__message-\" + theme + \"__actions__action--thread\", \"data-testid\": 'thread-action', onClick: handleOpenThread },\n            React.createElement(ThreadIcon, null))),\n        showActionsBox && (React.createElement(MessageActions, { ActionsIcon: ActionsIcon, messageWrapperRef: messageWrapperRef }))));\n};\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);\n"]},"metadata":{},"sourceType":"module"}