{"ast":null,"code":"import _objectSpread from\"/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{MessageList,MessageInput,Thread,Window,useChannelActionContext,Avatar,useChannelStateContext,useChatContext}from'stream-chat-react';import{ChannelInfo}from'../assets';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var GiphyContext=/*#__PURE__*/React.createContext({});var ChannelInner=function ChannelInner(_ref){var setIsEditing=_ref.setIsEditing;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),giphyState=_useState2[0],setGiphyState=_useState2[1];var _useChannelActionCont=useChannelActionContext(),sendMessage=_useChannelActionCont.sendMessage;var overrideSubmitHandler=function overrideSubmitHandler(message){var _message$parent;var updatedMessage={attachments:message.attachments,mentioned_users:message.mentioned_users,parent_id:(_message$parent=message.parent)===null||_message$parent===void 0?void 0:_message$parent.id,parent:message.parent,text:message.text};if(giphyState){updatedMessage=_objectSpread(_objectSpread({},updatedMessage),{},{text:\"/giphy \".concat(message.text)});}if(sendMessage){sendMessage(updatedMessage);setGiphyState(false);}};return/*#__PURE__*/_jsx(GiphyContext.Provider,{value:{giphyState:giphyState,setGiphyState:setGiphyState},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',width:'100%'},children:[/*#__PURE__*/_jsxs(Window,{children:[/*#__PURE__*/_jsx(TeamChannelHeader,{setIsEditing:setIsEditing}),/*#__PURE__*/_jsx(MessageList,{}),/*#__PURE__*/_jsx(MessageInput,{overrideSubmitHandler:overrideSubmitHandler})]}),/*#__PURE__*/_jsx(Thread,{})]})});};var TeamChannelHeader=function TeamChannelHeader(_ref2){var setIsEditing=_ref2.setIsEditing;var _useChannelStateConte=useChannelStateContext(),channel=_useChannelStateConte.channel,watcher_count=_useChannelStateConte.watcher_count;var _useChatContext=useChatContext(),client=_useChatContext.client;var MessagingHeader=function MessagingHeader(){var members=Object.values(channel.state.members).filter(function(_ref3){var user=_ref3.user;return user.id!==client.userID;});var additionalMembers=members.length-3;if(channel.type==='messaging'){return/*#__PURE__*/_jsxs(\"div\",{className:\"team-channel-header__name-wrapper\",children:[members.map(function(_ref4,i){var user=_ref4.user;return/*#__PURE__*/_jsxs(\"div\",{className:\"team-channel-header__name-multi\",children:[/*#__PURE__*/_jsx(Avatar,{image:user.image,name:user.fullName||user.id,size:32}),/*#__PURE__*/_jsx(\"p\",{className:\"team-channel-header__name user\",children:user.fullName||user.id})]},i);}),additionalMembers>0&&/*#__PURE__*/_jsxs(\"p\",{className:\"team-channel-header__name user\",children:[\"and \",additionalMembers,\" more\"]})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"team-channel-header__channel-wrapper\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"team-channel-header__name\",children:[\"# \",channel.data.name]}),/*#__PURE__*/_jsx(\"span\",{style:{display:'flex'},onClick:function onClick(){return setIsEditing(true);},children:/*#__PURE__*/_jsx(ChannelInfo,{})})]});};var getWatcherText=function getWatcherText(watchers){if(!watchers)return'No users online';if(watchers===1)return'1 user online';return\"\".concat(watchers,\" users online\");};return/*#__PURE__*/_jsxs(\"div\",{className:\"team-channel-header__container\",children:[/*#__PURE__*/_jsx(MessagingHeader,{}),/*#__PURE__*/_jsx(\"div\",{className:\"team-channel-header__right\",children:/*#__PURE__*/_jsx(\"p\",{className:\"team-channel-header__right-text\",children:getWatcherText(watcher_count)})})]});};export default ChannelInner;","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/src/components/ChannelInner.jsx"],"names":["React","useState","MessageList","MessageInput","Thread","Window","useChannelActionContext","Avatar","useChannelStateContext","useChatContext","ChannelInfo","GiphyContext","createContext","ChannelInner","setIsEditing","giphyState","setGiphyState","sendMessage","overrideSubmitHandler","message","updatedMessage","attachments","mentioned_users","parent_id","parent","id","text","display","width","TeamChannelHeader","channel","watcher_count","client","MessagingHeader","members","Object","values","state","filter","user","userID","additionalMembers","length","type","map","i","image","fullName","data","name","getWatcherText","watchers"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { MessageList, MessageInput, Thread, Window, useChannelActionContext, Avatar, useChannelStateContext, useChatContext } from 'stream-chat-react';\n\nimport { ChannelInfo } from '../assets';\n\nexport const GiphyContext = React.createContext({});\n\nconst ChannelInner = ({ setIsEditing }) => {\n  const [giphyState, setGiphyState] = useState(false);\n  const { sendMessage } = useChannelActionContext();\n  \n  const overrideSubmitHandler = (message) => {\n    let updatedMessage = {\n      attachments: message.attachments,\n      mentioned_users: message.mentioned_users,\n      parent_id: message.parent?.id,\n      parent: message.parent,\n      text: message.text,\n    };\n    \n    if (giphyState) {\n      updatedMessage = { ...updatedMessage, text: `/giphy ${message.text}` };\n    }\n    \n    if (sendMessage) {\n      sendMessage(updatedMessage);\n      setGiphyState(false);\n    }\n  };\n\n  return (\n    <GiphyContext.Provider value={{ giphyState, setGiphyState }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <Window>\n          <TeamChannelHeader setIsEditing={setIsEditing} />\n          <MessageList />\n          <MessageInput overrideSubmitHandler={overrideSubmitHandler} />\n        </Window>\n        <Thread />\n      </div>\n    </GiphyContext.Provider>\n  );\n};\n\nconst TeamChannelHeader = ({ setIsEditing }) => {\n    const { channel, watcher_count } = useChannelStateContext();\n    const { client } = useChatContext();\n  \n    const MessagingHeader = () => {\n      const members = Object.values(channel.state.members).filter(({ user }) => user.id !== client.userID);\n      const additionalMembers = members.length - 3;\n  \n      if(channel.type === 'messaging') {\n        return (\n          <div className='team-channel-header__name-wrapper'>\n            {members.map(({ user }, i) => (\n              <div key={i} className='team-channel-header__name-multi'>\n                <Avatar image={user.image} name={user.fullName || user.id} size={32} />\n                <p className='team-channel-header__name user'>{user.fullName || user.id}</p>\n              </div>\n            ))}\n  \n            {additionalMembers > 0 && <p className='team-channel-header__name user'>and {additionalMembers} more</p>}\n          </div>\n        );\n      }\n  \n      return (\n        <div className='team-channel-header__channel-wrapper'>\n          <p className='team-channel-header__name'># {channel.data.name}</p>\n          <span style={{ display: 'flex' }} onClick={() => setIsEditing(true)}>\n            <ChannelInfo />\n          </span>\n        </div>\n      );\n    };\n  \n    const getWatcherText = (watchers) => {\n      if (!watchers) return 'No users online';\n      if (watchers === 1) return '1 user online';\n      return `${watchers} users online`;\n    };\n  \n    return (\n      <div className='team-channel-header__container'>\n        <MessagingHeader />\n        <div className='team-channel-header__right'>\n          <p className='team-channel-header__right-text'>{getWatcherText(watcher_count)}</p>\n        </div>\n      </div>\n    );\n  };\n\n  export default ChannelInner;\n"]},"metadata":{},"sourceType":"module"}