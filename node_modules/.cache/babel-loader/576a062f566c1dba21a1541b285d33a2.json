{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId) {\n  var _a = useState(false),\n      newMessagesNotification = _a[0],\n      setNewMessagesNotification = _a[1];\n  /**\n   * use the flag to avoid the initial \"new messages\" quick blink\n   */\n\n\n  var didMount = useRef(false);\n  var lastMessageId = useRef('');\n  var atBottom = useRef(false);\n  useEffect(function () {\n    var _a;\n    /* handle scrolling behavior for new messages */\n\n\n    if (!(messages === null || messages === void 0 ? void 0 : messages.length)) return;\n    var lastMessage = messages[messages.length - 1];\n    var prevMessageId = lastMessageId.current;\n    lastMessageId.current = lastMessage.id || ''; // update last message id\n\n    /* do nothing if new messages are loaded from top(loadMore)  */\n\n    if (lastMessage.id === prevMessageId) return;\n    /* if list is already at the bottom return, followOutput will do the job */\n\n    if (atBottom.current) return;\n    /* if the new message belongs to current user scroll to bottom */\n\n    if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n      /* otherwise just show newMessage notification  */\n      setNewMessagesNotification(true);\n    }\n\n    didMount.current = true;\n  }, [currentUserId, messages]);\n  return {\n    atBottom: atBottom,\n    newMessagesNotification: newMessagesNotification,\n    setNewMessagesNotification: setNewMessagesNotification\n  };\n}","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/useNewMessageNotification.js"],"names":["useEffect","useRef","useState","useNewMessageNotification","messages","currentUserId","_a","newMessagesNotification","setNewMessagesNotification","didMount","lastMessageId","atBottom","length","lastMessage","prevMessageId","current","id","user"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAO,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,aAA7C,EAA4D;AAC/D,MAAIC,EAAE,GAAGJ,QAAQ,CAAC,KAAD,CAAjB;AAAA,MAA0BK,uBAAuB,GAAGD,EAAE,CAAC,CAAD,CAAtD;AAAA,MAA2DE,0BAA0B,GAAGF,EAAE,CAAC,CAAD,CAA1F;AACA;AACJ;AACA;;;AACI,MAAIG,QAAQ,GAAGR,MAAM,CAAC,KAAD,CAArB;AACA,MAAIS,aAAa,GAAGT,MAAM,CAAC,EAAD,CAA1B;AACA,MAAIU,QAAQ,GAAGV,MAAM,CAAC,KAAD,CAArB;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIM,EAAJ;AACA;;;AACA,QAAI,EAAEF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACQ,MAA/D,CAAJ,EACI;AACJ,QAAIC,WAAW,GAAGT,QAAQ,CAACA,QAAQ,CAACQ,MAAT,GAAkB,CAAnB,CAA1B;AACA,QAAIE,aAAa,GAAGJ,aAAa,CAACK,OAAlC;AACAL,IAAAA,aAAa,CAACK,OAAd,GAAwBF,WAAW,CAACG,EAAZ,IAAkB,EAA1C,CAPkB,CAO4B;;AAC9C;;AACA,QAAIH,WAAW,CAACG,EAAZ,KAAmBF,aAAvB,EACI;AACJ;;AACA,QAAIH,QAAQ,CAACI,OAAb,EACI;AACJ;;AACA,QAAI,CAAC,CAACT,EAAE,GAAGO,WAAW,CAACI,IAAlB,MAA4B,IAA5B,IAAoCX,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACU,EAAjE,MAAyEX,aAAzE,IAA0FI,QAAQ,CAACM,OAAvG,EAAgH;AAC5G;AACAP,MAAAA,0BAA0B,CAAC,IAAD,CAA1B;AACH;;AACDC,IAAAA,QAAQ,CAACM,OAAT,GAAmB,IAAnB;AACH,GApBQ,EAoBN,CAACV,aAAD,EAAgBD,QAAhB,CApBM,CAAT;AAqBA,SAAO;AAAEO,IAAAA,QAAQ,EAAEA,QAAZ;AAAsBJ,IAAAA,uBAAuB,EAAEA,uBAA/C;AAAwEC,IAAAA,0BAA0B,EAAEA;AAApG,GAAP;AACH","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId) {\n    var _a = useState(false), newMessagesNotification = _a[0], setNewMessagesNotification = _a[1];\n    /**\n     * use the flag to avoid the initial \"new messages\" quick blink\n     */\n    var didMount = useRef(false);\n    var lastMessageId = useRef('');\n    var atBottom = useRef(false);\n    useEffect(function () {\n        var _a;\n        /* handle scrolling behavior for new messages */\n        if (!(messages === null || messages === void 0 ? void 0 : messages.length))\n            return;\n        var lastMessage = messages[messages.length - 1];\n        var prevMessageId = lastMessageId.current;\n        lastMessageId.current = lastMessage.id || ''; // update last message id\n        /* do nothing if new messages are loaded from top(loadMore)  */\n        if (lastMessage.id === prevMessageId)\n            return;\n        /* if list is already at the bottom return, followOutput will do the job */\n        if (atBottom.current)\n            return;\n        /* if the new message belongs to current user scroll to bottom */\n        if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n            /* otherwise just show newMessage notification  */\n            setNewMessagesNotification(true);\n        }\n        didMount.current = true;\n    }, [currentUserId, messages]);\n    return { atBottom: atBottom, newMessagesNotification: newMessagesNotification, setNewMessagesNotification: setNewMessagesNotification };\n}\n"]},"metadata":{},"sourceType":"module"}