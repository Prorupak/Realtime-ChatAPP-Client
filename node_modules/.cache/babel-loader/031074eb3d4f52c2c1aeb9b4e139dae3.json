{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {\n  if (lockChannelOrder === void 0) {\n    lockChannelOrder = false;\n  }\n\n  if (allowNewMessagesFromUnfilteredChannels === void 0) {\n    allowNewMessagesFromUnfilteredChannels = true;\n  }\n\n  var client = useChatContext('useMessageNewListener').client;\n  useEffect(function () {\n    var handleEvent = function (event) {\n      setChannels(function (channels) {\n        var channelInList = channels.filter(function (channel) {\n          return channel.cid === event.cid;\n        }).length > 0;\n\n        if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n          var channel = client.channel(event.channel_type, event.channel_id);\n          return uniqBy(__spreadArray([channel], channels), 'cid');\n        }\n\n        if (!lockChannelOrder) return moveChannelUp({\n          channels: channels,\n          cid: event.cid || ''\n        });\n        return channels;\n      });\n    };\n\n    client.on('message.new', handleEvent);\n    return function () {\n      client.off('message.new', handleEvent);\n    };\n  }, [lockChannelOrder]);\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js"],"names":["__spreadArray","to","from","i","il","length","j","useEffect","uniqBy","moveChannelUp","useChatContext","useMessageNewListener","setChannels","lockChannelOrder","allowNewMessagesFromUnfilteredChannels","client","handleEvent","event","channels","channelInList","filter","channel","cid","channel_type","channel_id","on","off"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACpE,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACG,MAArB,EAA6BC,CAAC,GAAGL,EAAE,CAACI,MAAzC,EAAiDF,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIG,CAAC,EAA/D,EACIL,EAAE,CAACK,CAAD,CAAF,GAAQJ,IAAI,CAACC,CAAD,CAAZ;;AACJ,SAAOF,EAAP;AACH,CAJD;;AAKA,SAASM,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAO,IAAIC,qBAAqB,GAAG,UAAUC,WAAV,EAAuBC,gBAAvB,EAAyCC,sCAAzC,EAAiF;AAChH,MAAID,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,IAAAA,gBAAgB,GAAG,KAAnB;AAA2B;;AAC9D,MAAIC,sCAAsC,KAAK,KAAK,CAApD,EAAuD;AAAEA,IAAAA,sCAAsC,GAAG,IAAzC;AAAgD;;AACzG,MAAIC,MAAM,GAAGL,cAAc,CAAC,uBAAD,CAAd,CAAwCK,MAArD;AACAR,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIS,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAC/BL,MAAAA,WAAW,CAAC,UAAUM,QAAV,EAAoB;AAC5B,YAAIC,aAAa,GAAGD,QAAQ,CAACE,MAAT,CAAgB,UAAUC,OAAV,EAAmB;AAAE,iBAAOA,OAAO,CAACC,GAAR,KAAgBL,KAAK,CAACK,GAA7B;AAAmC,SAAxE,EAA0EjB,MAA1E,GAAmF,CAAvG;;AACA,YAAI,CAACc,aAAD,IAAkBL,sCAAlB,IAA4DG,KAAK,CAACM,YAAtE,EAAoF;AAChF,cAAIF,OAAO,GAAGN,MAAM,CAACM,OAAP,CAAeJ,KAAK,CAACM,YAArB,EAAmCN,KAAK,CAACO,UAAzC,CAAd;AACA,iBAAOhB,MAAM,CAACR,aAAa,CAAC,CAACqB,OAAD,CAAD,EAAYH,QAAZ,CAAd,EAAqC,KAArC,CAAb;AACH;;AACD,YAAI,CAACL,gBAAL,EACI,OAAOJ,aAAa,CAAC;AAAES,UAAAA,QAAQ,EAAEA,QAAZ;AAAsBI,UAAAA,GAAG,EAAEL,KAAK,CAACK,GAAN,IAAa;AAAxC,SAAD,CAApB;AACJ,eAAOJ,QAAP;AACH,OATU,CAAX;AAUH,KAXD;;AAYAH,IAAAA,MAAM,CAACU,EAAP,CAAU,aAAV,EAAyBT,WAAzB;AACA,WAAO,YAAY;AACfD,MAAAA,MAAM,CAACW,GAAP,CAAW,aAAX,EAA0BV,WAA1B;AACH,KAFD;AAGH,GAjBQ,EAiBN,CAACH,gBAAD,CAjBM,CAAT;AAkBH,CAtBM","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {\n    if (lockChannelOrder === void 0) { lockChannelOrder = false; }\n    if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }\n    var client = useChatContext('useMessageNewListener').client;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            setChannels(function (channels) {\n                var channelInList = channels.filter(function (channel) { return channel.cid === event.cid; }).length > 0;\n                if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n                    var channel = client.channel(event.channel_type, event.channel_id);\n                    return uniqBy(__spreadArray([channel], channels), 'cid');\n                }\n                if (!lockChannelOrder)\n                    return moveChannelUp({ channels: channels, cid: event.cid || '' });\n                return channels;\n            });\n        };\n        client.on('message.new', handleEvent);\n        return function () {\n            client.off('message.new', handleEvent);\n        };\n    }, [lockChannelOrder]);\n};\n"]},"metadata":{},"sourceType":"module"}