{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useContext } from 'react';\nexport var ChannelStateContext = React.createContext(undefined);\nexport var ChannelStateProvider = function (_a) {\n  var children = _a.children,\n      value = _a.value;\n  return React.createElement(ChannelStateContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useChannelStateContext = function (componentName) {\n  var contextValue = useContext(ChannelStateContext);\n\n  if (!contextValue) {\n    console.warn(\"The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \" + componentName + \" component.\");\n    return {};\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ChannelStateContext\n * typing is desired while using the HOC withChannelStateContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\n\nexport var withChannelStateContext = function (Component) {\n  var WithChannelStateContextComponent = function (props) {\n    var channelStateContext = useChannelStateContext();\n    return React.createElement(Component, __assign({}, props, channelStateContext));\n  };\n\n  WithChannelStateContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithChannelStateContextComponent;\n};","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/stream-chat-react/dist/context/ChannelStateContext.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","ChannelStateContext","createContext","undefined","ChannelStateProvider","_a","children","value","createElement","Provider","useChannelStateContext","componentName","contextValue","console","warn","withChannelStateContext","Component","WithChannelStateContextComponent","props","channelStateContext","displayName","name","replace"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAOO,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,IAAIC,mBAAmB,GAAGF,KAAK,CAACG,aAAN,CAAoBC,SAApB,CAA1B;AACP,OAAO,IAAIC,oBAAoB,GAAG,UAAUC,EAAV,EAAc;AAC5C,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,MAA4BC,KAAK,GAAGF,EAAE,CAACE,KAAvC;AACA,SAAQR,KAAK,CAACS,aAAN,CAAoBP,mBAAmB,CAACQ,QAAxC,EAAkD;AAAEF,IAAAA,KAAK,EAAEA;AAAT,GAAlD,EAAoED,QAApE,CAAR;AACH,CAHM;AAIP,OAAO,IAAII,sBAAsB,GAAG,UAAUC,aAAV,EAAyB;AACzD,MAAIC,YAAY,GAAGZ,UAAU,CAACC,mBAAD,CAA7B;;AACA,MAAI,CAACW,YAAL,EAAmB;AACfC,IAAAA,OAAO,CAACC,IAAR,CAAa,uMAAuMH,aAAvM,GAAuN,aAApO;AACA,WAAO,EAAP;AACH;;AACD,SAAOC,YAAP;AACH,CAPM;AAQP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,uBAAuB,GAAG,UAAUC,SAAV,EAAqB;AACtD,MAAIC,gCAAgC,GAAG,UAAUC,KAAV,EAAiB;AACpD,QAAIC,mBAAmB,GAAGT,sBAAsB,EAAhD;AACA,WAAOX,KAAK,CAACS,aAAN,CAAoBQ,SAApB,EAA+B/B,QAAQ,CAAC,EAAD,EAAKiC,KAAL,EAAYC,mBAAZ,CAAvC,CAAP;AACH,GAHD;;AAIAF,EAAAA,gCAAgC,CAACG,WAAjC,GAA+C,CAACJ,SAAS,CAACI,WAAV,IAC5CJ,SAAS,CAACK,IADkC,IAE5C,WAF2C,EAE9BC,OAF8B,CAEtB,MAFsB,EAEd,EAFc,CAA/C;AAGA,SAAOL,gCAAP;AACH,CATM","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var ChannelStateContext = React.createContext(undefined);\nexport var ChannelStateProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(ChannelStateContext.Provider, { value: value }, children));\n};\nexport var useChannelStateContext = function (componentName) {\n    var contextValue = useContext(ChannelStateContext);\n    if (!contextValue) {\n        console.warn(\"The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \" + componentName + \" component.\");\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ChannelStateContext\n * typing is desired while using the HOC withChannelStateContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withChannelStateContext = function (Component) {\n    var WithChannelStateContextComponent = function (props) {\n        var channelStateContext = useChannelStateContext();\n        return React.createElement(Component, __assign({}, props, channelStateContext));\n    };\n    WithChannelStateContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithChannelStateContextComponent;\n};\n"]},"metadata":{},"sourceType":"module"}