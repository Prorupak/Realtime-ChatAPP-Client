{"ast":null,"code":"var reactProperty = require('react-property');\n\nvar utilities = require('./utilities');\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\n * @return {object}                 - React props.\n */\n\n\nmodule.exports = function attributesToProps(attributes) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var propName;\n  var propertyInfo;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName]; // ARIA (aria-*) or custom data (data-*) attribute\n\n    if (reactProperty.isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    } // convert HTML/SVG attribute to React prop\n\n\n    attributeNameLowerCased = attributeName.toLowerCase();\n    propName = reactProperty.possibleStandardNames[attributeNameLowerCased];\n\n    if (propName) {\n      props[propName] = attributeValue;\n      propertyInfo = reactProperty.getPropertyInfo(propName);\n\n      switch (propertyInfo && propertyInfo.type) {\n        case reactProperty.BOOLEAN:\n          props[propName] = true;\n          break;\n\n        case reactProperty.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n\n          break;\n      }\n\n      continue;\n    } // preserve custom attribute if React >=16\n\n\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  } // transform inline style to object\n\n\n  utilities.setStyleProp(attributes.style, props);\n  return props;\n};","map":{"version":3,"sources":["/home/rupak/Desktop/Project/Chat Application/chatApp_client/node_modules/html-react-parser/lib/attributes-to-props.js"],"names":["reactProperty","require","utilities","module","exports","attributesToProps","attributes","attributeName","attributeNameLowerCased","attributeValue","propName","propertyInfo","props","isCustomAttribute","toLowerCase","possibleStandardNames","getPropertyInfo","type","BOOLEAN","OVERLOADED_BOOLEAN","PRESERVE_CUSTOM_ATTRIBUTES","setStyleProp","style"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACtDA,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,MAAIC,aAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAKL,aAAL,IAAsBD,UAAtB,EAAkC;AAChCG,IAAAA,cAAc,GAAGH,UAAU,CAACC,aAAD,CAA3B,CADgC,CAGhC;;AACA,QAAIP,aAAa,CAACa,iBAAd,CAAgCN,aAAhC,CAAJ,EAAoD;AAClDK,MAAAA,KAAK,CAACL,aAAD,CAAL,GAAuBE,cAAvB;AACA;AACD,KAP+B,CAShC;;;AACAD,IAAAA,uBAAuB,GAAGD,aAAa,CAACO,WAAd,EAA1B;AACAJ,IAAAA,QAAQ,GAAGV,aAAa,CAACe,qBAAd,CAAoCP,uBAApC,CAAX;;AAEA,QAAIE,QAAJ,EAAc;AACZE,MAAAA,KAAK,CAACF,QAAD,CAAL,GAAkBD,cAAlB;AACAE,MAAAA,YAAY,GAAGX,aAAa,CAACgB,eAAd,CAA8BN,QAA9B,CAAf;;AACA,cAAQC,YAAY,IAAIA,YAAY,CAACM,IAArC;AACE,aAAKjB,aAAa,CAACkB,OAAnB;AACEN,UAAAA,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;AACA;;AACF,aAAKV,aAAa,CAACmB,kBAAnB;AACE,cAAIV,cAAc,KAAK,EAAvB,EAA2B;AACzBG,YAAAA,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;AACD;;AACD;AARJ;;AAUA;AACD,KA3B+B,CA6BhC;;;AACA,QAAIR,SAAS,CAACkB,0BAAd,EAA0C;AACxCR,MAAAA,KAAK,CAACL,aAAD,CAAL,GAAuBE,cAAvB;AACD;AACF,GA3CqD,CA6CtD;;;AACAP,EAAAA,SAAS,CAACmB,YAAV,CAAuBf,UAAU,CAACgB,KAAlC,EAAyCV,KAAzC;AAEA,SAAOA,KAAP;AACD,CAjDD","sourcesContent":["var reactProperty = require('react-property');\nvar utilities = require('./utilities');\n\n/**\n * Converts HTML/SVG DOM attributes to React props.\n *\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\n * @return {object}                 - React props.\n */\nmodule.exports = function attributesToProps(attributes) {\n  attributes = attributes || {};\n\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var propName;\n  var propertyInfo;\n  var props = {};\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (reactProperty.isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML/SVG attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    propName = reactProperty.possibleStandardNames[attributeNameLowerCased];\n\n    if (propName) {\n      props[propName] = attributeValue;\n      propertyInfo = reactProperty.getPropertyInfo(propName);\n      switch (propertyInfo && propertyInfo.type) {\n        case reactProperty.BOOLEAN:\n          props[propName] = true;\n          break;\n        case reactProperty.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n          break;\n      }\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  utilities.setStyleProp(attributes.style, props);\n\n  return props;\n};\n"]},"metadata":{},"sourceType":"script"}