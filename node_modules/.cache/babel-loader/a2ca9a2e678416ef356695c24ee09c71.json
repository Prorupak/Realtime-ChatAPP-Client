{"ast":null,"code":"'use strict';\n\nconst XmlNode = require('./XmlNode');\n/**\nElement in an XML document.\n\n@public\n*/\n\n\nclass XmlElement extends XmlNode {\n  /**\n  @param {string} name\n  @param {{[attrName: string]: string}} [attributes]\n  @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]\n  */\n  constructor(name, attributes = Object.create(null), children = []) {\n    super();\n    /**\n    Name of this element.\n     @type {string}\n    @public\n    */\n\n    this.name = name;\n    /**\n    Attributes on this element.\n     @type {{[attrName: string]: string}}\n    @public\n    */\n\n    this.attributes = attributes;\n    /**\n    Child nodes of this element.\n     @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}\n    @public\n    */\n\n    this.children = children;\n  }\n  /**\n  Whether this node is empty (meaning it has no children).\n   @type {boolean}\n  @public\n  */\n\n\n  get isEmpty() {\n    return this.children.length === 0;\n  }\n  /** @type {boolean} */\n\n\n  get preserveWhitespace() {\n    /** @type {XmlNode?} */\n    let node = this;\n\n    while (node instanceof XmlElement) {\n      if ('xml:space' in node.attributes) {\n        return node.attributes['xml:space'] === 'preserve';\n      }\n\n      node = node.parent;\n    }\n\n    return false;\n  }\n  /**\n  Text content of this element and all its descendants.\n   @type {string}\n  @public\n  */\n\n\n  get text() {\n    return this.children.map(child => 'text' in child ? child.text : '').join('');\n  }\n\n  get type() {\n    return XmlNode.TYPE_ELEMENT;\n  }\n  /** @returns {{[key: string]: any}} */\n\n\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      name: this.name,\n      attributes: this.attributes,\n      children: this.children.map(child => child.toJSON())\n    });\n  }\n\n}\n\nmodule.exports = XmlElement;\n/** @typedef {import('./XmlCdata')} XmlCdata */\n\n/** @typedef {import('./XmlComment')} XmlComment */\n\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\n\n/** @typedef {import('./XmlText')} XmlText */","map":{"version":3,"sources":["/home/rupak/Music/project_medical_pager_chat-master/client/node_modules/@rgrove/parse-xml/src/lib/XmlElement.js"],"names":["XmlNode","require","XmlElement","constructor","name","attributes","Object","create","children","isEmpty","length","preserveWhitespace","node","parent","text","map","child","join","type","TYPE_ELEMENT","toJSON","assign","prototype","call","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,UAAN,SAAyBF,OAAzB,CAAiC;AAC/B;AACF;AACA;AACA;AACA;AACEG,EAAAA,WAAW,CAACC,IAAD,EAAOC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAApB,EAAyCC,QAAQ,GAAG,EAApD,EAAwD;AACjE;AAEA;AACJ;AACA;AACA;AACA;;AAEI,SAAKJ,IAAL,GAAYA,IAAZ;AAEA;AACJ;AACA;AACA;AACA;;AAEI,SAAKC,UAAL,GAAkBA,UAAlB;AAEA;AACJ;AACA;AACA;AACA;;AAEI,SAAKG,QAAL,GAAgBA,QAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEa,MAAPC,OAAO,GAAG;AACZ,WAAO,KAAKD,QAAL,CAAcE,MAAd,KAAyB,CAAhC;AACD;AAED;;;AACsB,MAAlBC,kBAAkB,GAAG;AACvB;AACA,QAAIC,IAAI,GAAG,IAAX;;AAEA,WAAOA,IAAI,YAAYV,UAAvB,EAAmC;AACjC,UAAI,eAAeU,IAAI,CAACP,UAAxB,EAAoC;AAClC,eAAOO,IAAI,CAACP,UAAL,CAAgB,WAAhB,MAAiC,UAAxC;AACD;;AAEDO,MAAAA,IAAI,GAAGA,IAAI,CAACC,MAAZ;AACD;;AAED,WAAO,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AAEU,MAAJC,IAAI,GAAG;AACT,WAAO,KAAKN,QAAL,CACJO,GADI,CACAC,KAAK,IAAI,UAAUA,KAAV,GAAkBA,KAAK,CAACF,IAAxB,GAA+B,EADxC,EAEJG,IAFI,CAEC,EAFD,CAAP;AAGD;;AAEO,MAAJC,IAAI,GAAG;AACT,WAAOlB,OAAO,CAACmB,YAAf;AACD;AAED;;;AACAC,EAAAA,MAAM,GAAG;AACP,WAAOd,MAAM,CAACe,MAAP,CAAcrB,OAAO,CAACsB,SAAR,CAAkBF,MAAlB,CAAyBG,IAAzB,CAA8B,IAA9B,CAAd,EAAmD;AACxDnB,MAAAA,IAAI,EAAE,KAAKA,IAD6C;AAExDC,MAAAA,UAAU,EAAE,KAAKA,UAFuC;AAGxDG,MAAAA,QAAQ,EAAE,KAAKA,QAAL,CAAcO,GAAd,CAAkBC,KAAK,IAAIA,KAAK,CAACI,MAAN,EAA3B;AAH8C,KAAnD,CAAP;AAKD;;AAnF8B;;AAsFjCI,MAAM,CAACC,OAAP,GAAiBvB,UAAjB;AAEA;;AACA;;AACA;;AACA","sourcesContent":["'use strict';\n\nconst XmlNode = require('./XmlNode');\n\n/**\nElement in an XML document.\n\n@public\n*/\nclass XmlElement extends XmlNode {\n  /**\n  @param {string} name\n  @param {{[attrName: string]: string}} [attributes]\n  @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]\n  */\n  constructor(name, attributes = Object.create(null), children = []) {\n    super();\n\n    /**\n    Name of this element.\n\n    @type {string}\n    @public\n    */\n    this.name = name;\n\n    /**\n    Attributes on this element.\n\n    @type {{[attrName: string]: string}}\n    @public\n    */\n    this.attributes = attributes;\n\n    /**\n    Child nodes of this element.\n\n    @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}\n    @public\n    */\n    this.children = children;\n  }\n\n  /**\n  Whether this node is empty (meaning it has no children).\n\n  @type {boolean}\n  @public\n  */\n  get isEmpty() {\n    return this.children.length === 0;\n  }\n\n  /** @type {boolean} */\n  get preserveWhitespace() {\n    /** @type {XmlNode?} */\n    let node = this;\n\n    while (node instanceof XmlElement) {\n      if ('xml:space' in node.attributes) {\n        return node.attributes['xml:space'] === 'preserve';\n      }\n\n      node = node.parent;\n    }\n\n    return false;\n  }\n\n  /**\n  Text content of this element and all its descendants.\n\n  @type {string}\n  @public\n  */\n  get text() {\n    return this.children\n      .map(child => 'text' in child ? child.text : '')\n      .join('');\n  }\n\n  get type() {\n    return XmlNode.TYPE_ELEMENT;\n  }\n\n  /** @returns {{[key: string]: any}} */\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      name: this.name,\n      attributes: this.attributes,\n      children: this.children.map(child => child.toJSON()),\n    });\n  }\n}\n\nmodule.exports = XmlElement;\n\n/** @typedef {import('./XmlCdata')} XmlCdata */\n/** @typedef {import('./XmlComment')} XmlComment */\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\n/** @typedef {import('./XmlText')} XmlText */\n"]},"metadata":{},"sourceType":"script"}