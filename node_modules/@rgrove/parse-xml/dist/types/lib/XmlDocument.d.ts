export = XmlDocument;
/**
Represents an XML document. All elements within the document are descendants of
this node.

@public
*/
declare class XmlDocument extends XmlNode {
    /**
    @param {Array<XmlComment|XmlElement|XmlProcessingInstruction>} [children]
    */
    constructor(children?: (import("./XmlComment") | import("./XmlProcessingInstruction") | XmlElement)[] | undefined);
    /**
    Child nodes of this document.

    @type {Array<XmlComment|XmlElement|XmlProcessingInstruction>}
    @public
    */
    public children: Array<XmlComment | XmlElement | XmlProcessingInstruction>;
    /**
    Root element of this document, or `null` if this document is empty.
  
    @type {XmlElement?}
    @public
    */
    public get root(): XmlElement | null;
    /**
    Text content of this document and all its descendants.
  
    @type {string}
    @public
    */
    public get text(): string;
}
declare namespace XmlDocument {
    export { XmlComment, XmlProcessingInstruction };
}
import XmlNode = require("./XmlNode");
type XmlComment = import("./XmlComment");
import XmlElement = require("./XmlElement");
type XmlProcessingInstruction = import("./XmlProcessingInstruction");
//# sourceMappingURL=XmlDocument.d.ts.map