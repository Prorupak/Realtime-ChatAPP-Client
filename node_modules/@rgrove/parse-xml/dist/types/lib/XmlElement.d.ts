export = XmlElement;
/**
Element in an XML document.

@public
*/
declare class XmlElement extends XmlNode {
    /**
    @param {string} name
    @param {{[attrName: string]: string}} [attributes]
    @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]
    */
    constructor(name: string, attributes?: {
        [attrName: string]: string;
    } | undefined, children?: (import("./XmlComment") | import("./XmlProcessingInstruction") | import("./XmlText") | import("./XmlElement") | import("./XmlCdata"))[] | undefined);
    /**
    Name of this element.

    @type {string}
    @public
    */
    public name: string;
    /**
    Attributes on this element.

    @type {{[attrName: string]: string}}
    @public
    */
    public attributes: {
        [attrName: string]: string;
    };
    /**
    Child nodes of this element.

    @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}
    @public
    */
    public children: Array<XmlCdata | XmlComment | XmlElement | XmlProcessingInstruction | XmlText>;
    /**
    Whether this node is empty (meaning it has no children).
  
    @type {boolean}
    @public
    */
    public get isEmpty(): boolean;
    /**
    Text content of this element and all its descendants.
  
    @type {string}
    @public
    */
    public get text(): string;
}
declare namespace XmlElement {
    export { XmlCdata, XmlComment, XmlProcessingInstruction, XmlText };
}
import XmlNode = require("./XmlNode");
type XmlCdata = import("./XmlCdata");
type XmlComment = import("./XmlComment");
type XmlProcessingInstruction = import("./XmlProcessingInstruction");
type XmlText = import("./XmlText");
//# sourceMappingURL=XmlElement.d.ts.map