export = XmlNode;
/**
Base interface for a node in an XML document.

@public
*/
declare class XmlNode {
    /**
    Parent node of this node, or `null` if this node has no parent.

    @type {XmlDocument|XmlElement|null}
    @public
    */
    public parent: XmlDocument | XmlElement | null;
    /**
    Document that contains this node, or `null` if this node is not associated
    with a document.
  
    @type {XmlDocument?}
    @public
    */
    public get document(): import("./XmlDocument") | null;
    /**
    Whether this node is the root node of the document.
  
    @returns {boolean}
    @public
    */
    public get isRootNode(): boolean;
    /**
    Whether whitespace should be preserved in the content of this element and
    its children.
  
    This is influenced by the value of the special `xml:space` attribute, and
    will be `true` for any node whose `xml:space` attribute is set to
    "preserve". If a node has no such attribute, it will inherit the value of
    the nearest ancestor that does (if any).
  
    @type {boolean}
    @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space
    @public
    */
    public get preserveWhitespace(): boolean;
    /**
    Type of this node.
  
    The value of this property is a string that matches one of the static `TYPE_*`
    properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).
  
    The `XmlNode` class itself is a base class and doesn't have its own type name.
  
    @type {string}
    @public
    */
    public get type(): string;
    /**
    Returns a JSON-serializable object representing this node, minus properties
    that could result in circular references.
  
    @returns {{[key: string]: any}}
    @public
    */
    public toJSON(): {
        [key: string]: any;
    };
}
declare namespace XmlNode {
    export { TYPE_CDATA, TYPE_COMMENT, TYPE_DOCUMENT, TYPE_ELEMENT, TYPE_PROCESSING_INSTRUCTION, TYPE_TEXT, XmlDocument, XmlElement };
}
type XmlDocument = import("./XmlDocument");
type XmlElement = import("./XmlElement");
declare var TYPE_CDATA: string;
declare var TYPE_COMMENT: string;
declare var TYPE_DOCUMENT: string;
declare var TYPE_ELEMENT: string;
declare var TYPE_PROCESSING_INSTRUCTION: string;
declare var TYPE_TEXT: string;
//# sourceMappingURL=XmlNode.d.ts.map