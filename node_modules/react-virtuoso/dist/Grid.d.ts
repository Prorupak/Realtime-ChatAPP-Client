import { RefHandle } from '@virtuoso.dev/react-urx';
import * as u from '@virtuoso.dev/urx';
import * as React from 'react';
import { GridComponents, GridComputeItemKey, GridItemContent, GridRootProps } from './interfaces';
declare const Grid: React.ForwardRefExoticComponent<{} & {
    itemContent?: GridItemContent | undefined;
    components?: GridComponents | undefined;
    computeItemKey?: GridComputeItemKey | undefined;
    itemClassName?: string | undefined;
    listClassName?: string | undefined;
    scrollerRef?: ((ref: HTMLElement | null) => void) | undefined;
    overscan?: import("./sizeRangeSystem").Overscan | undefined;
    scrollSeekConfiguration?: false | import("./interfaces").ScrollSeekConfiguration | undefined;
    useWindowScroll?: boolean | undefined;
    totalCount?: number | undefined;
    initialItemCount?: number | undefined;
    scrollSeek?: any;
    item?: GridItemContent | undefined;
    ItemContainer?: any;
    ScrollContainer?: any;
    ListContainer?: any;
} & {
    isScrolling?: ((value: boolean) => void) | undefined;
    atTopStateChange?: ((value: boolean) => void) | undefined;
    atBottomStateChange?: ((value: boolean) => void) | undefined;
    startReached?: ((value: number) => void) | undefined;
    endReached?: ((value: number) => void) | undefined;
    rangeChanged?: ((value: import("./interfaces").ListRange) => void) | undefined;
} & GridRootProps & React.RefAttributes<import("@virtuoso.dev/react-urx").MethodsFromPropMap<u.SystemSpec<[u.SystemSpec<[u.SystemSpec<[u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>], ([{ scrollTop, viewportHeight, deviation, headerHeight }]: [{
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}]) => {
    listBoundary: u.Stream<import("./sizeRangeSystem").NumberTuple>;
    overscan: u.StatefulStream<import("./sizeRangeSystem").Overscan>;
    topListHeight: u.StatefulStream<number>;
    increaseViewportBy: u.StatefulStream<import("./sizeRangeSystem").ViewportIncrease>;
    visibleRange: u.StatefulStream<import("./sizeRangeSystem").NumberTuple>;
}>, u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>, u.SystemSpec<[u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>], ([{ scrollTop, viewportHeight, headerHeight, footerHeight }]: [{
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}]) => {
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
}>, u.SystemSpec<[u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>, u.SystemSpec<[u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>], ([{ scrollTop, viewportHeight, headerHeight, footerHeight }]: [{
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}]) => {
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
}>], ([{ scrollTop }, { isScrolling }]: [{
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}, {
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
}]) => {
    isSeeking: u.StatefulStream<boolean>;
    scrollSeekConfiguration: u.StatefulStream<false | import("./interfaces").ScrollSeekConfiguration | undefined>;
    scrollVelocity: u.StatefulStream<number>;
    scrollSeekRangeChanged: u.Stream<import("./interfaces").ListRange>;
}>, u.SystemSpec<[u.SystemSpec<never[], () => {
    log: u.StatefulStream<import("./loggerSystem").Log>;
    logLevel: u.StatefulStream<import("./loggerSystem").LogLevel>;
}>], ([{ log }]: [{
    log: u.StatefulStream<import("./loggerSystem").Log>;
    logLevel: u.StatefulStream<import("./loggerSystem").LogLevel>;
}]) => {
    propsReady: u.StatefulStream<boolean>;
    didMount: u.Stream<boolean>;
}>, u.SystemSpec<[u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>], ([{ scrollTop, scrollTo }]: [{
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}]) => {
    useWindowScroll: u.StatefulStream<boolean>;
    windowScrollTop: u.Stream<number>;
    windowViewportRect: u.Stream<import("./interfaces").WindowViewportInfo>;
    windowScrollTo: u.Stream<ScrollToOptions>;
}>], ([{ overscan, visibleRange, listBoundary }, { scrollTop, viewportHeight, scrollBy, scrollTo, smoothScrollTargetReached }, stateFlags, scrollSeek, { propsReady, didMount }, { windowViewportRect, windowScrollTo, useWindowScroll, windowScrollTop },]: [{
    listBoundary: u.Stream<import("./sizeRangeSystem").NumberTuple>;
    overscan: u.StatefulStream<import("./sizeRangeSystem").Overscan>;
    topListHeight: u.StatefulStream<number>;
    increaseViewportBy: u.StatefulStream<import("./sizeRangeSystem").ViewportIncrease>;
    visibleRange: u.StatefulStream<import("./sizeRangeSystem").NumberTuple>;
}, {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}, {
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
}, {
    isSeeking: u.StatefulStream<boolean>;
    scrollSeekConfiguration: u.StatefulStream<false | import("./interfaces").ScrollSeekConfiguration | undefined>;
    scrollVelocity: u.StatefulStream<number>;
    scrollSeekRangeChanged: u.Stream<import("./interfaces").ListRange>;
}, {
    propsReady: u.StatefulStream<boolean>;
    didMount: u.Stream<boolean>;
}, {
    useWindowScroll: u.StatefulStream<boolean>;
    windowScrollTop: u.Stream<number>;
    windowViewportRect: u.Stream<import("./interfaces").WindowViewportInfo>;
    windowScrollTo: u.Stream<ScrollToOptions>;
}]) => {
    startReached: u.Stream<number>;
    endReached: u.Stream<number>;
    rangeChanged: u.Stream<import("./interfaces").ListRange>;
    propsReady: u.StatefulStream<boolean>;
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
    gridState: u.StatefulStream<import("./gridSystem").GridState>;
    totalListHeight: u.StatefulStream<number>;
    isSeeking: u.StatefulStream<boolean>;
    scrollSeekConfiguration: u.StatefulStream<false | import("./interfaces").ScrollSeekConfiguration | undefined>;
    scrollVelocity: u.StatefulStream<number>;
    scrollSeekRangeChanged: u.Stream<import("./interfaces").ListRange>;
    totalCount: u.StatefulStream<number>;
    viewportDimensions: u.StatefulStream<import("./gridSystem").ElementDimensions>;
    itemDimensions: u.StatefulStream<import("./gridSystem").ElementDimensions>;
    scrollTop: u.Stream<number>;
    overscan: u.StatefulStream<import("./sizeRangeSystem").Overscan>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollToIndex: u.Stream<import("./scrollToIndexSystem").IndexLocation>;
    smoothScrollTargetReached: u.Stream<true>;
    windowViewportRect: u.Stream<import("./interfaces").WindowViewportInfo>;
    windowScrollTo: u.Stream<ScrollToOptions>;
    useWindowScroll: u.StatefulStream<boolean>;
    windowScrollTop: u.Stream<number>;
    initialItemCount: u.StatefulStream<number>;
}>, u.SystemSpec<u.SystemSpecs, () => {
    itemContent: u.StatefulStream<GridItemContent>;
    components: u.StatefulStream<GridComponents>;
    computeItemKey: u.StatefulStream<GridComputeItemKey>;
    itemClassName: u.StatefulStream<string>;
    listClassName: u.StatefulStream<string>;
    scrollerRef: u.StatefulStream<(ref: HTMLElement | null) => void>;
    ListComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").GridListProps> | null | undefined>;
    ItemComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").GridItem> | null | undefined>;
    ScrollerComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").ScrollerProps> | null | undefined>;
    ScrollSeekPlaceholder: u.StatefulStream<"div" | React.ComponentType<{
        style: React.CSSProperties;
    }> | null | undefined>;
}>], ([gridSystem, gridComponentPropsSystem]: [{
    startReached: u.Stream<number>;
    endReached: u.Stream<number>;
    rangeChanged: u.Stream<import("./interfaces").ListRange>;
    propsReady: u.StatefulStream<boolean>;
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
    gridState: u.StatefulStream<import("./gridSystem").GridState>;
    totalListHeight: u.StatefulStream<number>;
    isSeeking: u.StatefulStream<boolean>;
    scrollSeekConfiguration: u.StatefulStream<false | import("./interfaces").ScrollSeekConfiguration | undefined>;
    scrollVelocity: u.StatefulStream<number>;
    scrollSeekRangeChanged: u.Stream<import("./interfaces").ListRange>;
    totalCount: u.StatefulStream<number>;
    viewportDimensions: u.StatefulStream<import("./gridSystem").ElementDimensions>;
    itemDimensions: u.StatefulStream<import("./gridSystem").ElementDimensions>;
    scrollTop: u.Stream<number>;
    overscan: u.StatefulStream<import("./sizeRangeSystem").Overscan>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollToIndex: u.Stream<import("./scrollToIndexSystem").IndexLocation>;
    smoothScrollTargetReached: u.Stream<true>;
    windowViewportRect: u.Stream<import("./interfaces").WindowViewportInfo>;
    windowScrollTo: u.Stream<ScrollToOptions>;
    useWindowScroll: u.StatefulStream<boolean>;
    windowScrollTop: u.Stream<number>;
    initialItemCount: u.StatefulStream<number>;
}, {
    itemContent: u.StatefulStream<GridItemContent>;
    components: u.StatefulStream<GridComponents>;
    computeItemKey: u.StatefulStream<GridComputeItemKey>;
    itemClassName: u.StatefulStream<string>;
    listClassName: u.StatefulStream<string>;
    scrollerRef: u.StatefulStream<(ref: HTMLElement | null) => void>;
    ListComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").GridListProps> | null | undefined>;
    ItemComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").GridItem> | null | undefined>;
    ScrollerComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").ScrollerProps> | null | undefined>;
    ScrollSeekPlaceholder: u.StatefulStream<"div" | React.ComponentType<{
        style: React.CSSProperties;
    }> | null | undefined>;
}]) => {
    item: u.Stream<GridItemContent>;
    ItemContainer: u.Stream<any>;
    ScrollContainer: u.Stream<any>;
    ListContainer: u.Stream<any>;
    emptyComponent: u.Stream<any>;
    scrollSeek: u.Stream<any>;
    itemContent: u.StatefulStream<GridItemContent>;
    components: u.StatefulStream<GridComponents>;
    computeItemKey: u.StatefulStream<GridComputeItemKey>;
    itemClassName: u.StatefulStream<string>;
    listClassName: u.StatefulStream<string>;
    scrollerRef: u.StatefulStream<(ref: HTMLElement | null) => void>;
    ListComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").GridListProps> | null | undefined>;
    ItemComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").GridItem> | null | undefined>;
    ScrollerComponent: u.StatefulStream<"div" | React.ComponentType<import("./interfaces").ScrollerProps> | null | undefined>;
    ScrollSeekPlaceholder: u.StatefulStream<"div" | React.ComponentType<{
        style: React.CSSProperties;
    }> | null | undefined>;
    startReached: u.Stream<number>;
    endReached: u.Stream<number>;
    rangeChanged: u.Stream<import("./interfaces").ListRange>;
    propsReady: u.StatefulStream<boolean>;
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<import("./stateFlagsSystem").AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<import("./stateFlagsSystem").ListBottomInfo>;
    gridState: u.StatefulStream<import("./gridSystem").GridState>;
    totalListHeight: u.StatefulStream<number>;
    isSeeking: u.StatefulStream<boolean>;
    scrollSeekConfiguration: u.StatefulStream<false | import("./interfaces").ScrollSeekConfiguration | undefined>;
    scrollVelocity: u.StatefulStream<number>;
    scrollSeekRangeChanged: u.Stream<import("./interfaces").ListRange>;
    totalCount: u.StatefulStream<number>;
    viewportDimensions: u.StatefulStream<import("./gridSystem").ElementDimensions>;
    itemDimensions: u.StatefulStream<import("./gridSystem").ElementDimensions>;
    scrollTop: u.Stream<number>;
    overscan: u.StatefulStream<import("./sizeRangeSystem").Overscan>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollToIndex: u.Stream<import("./scrollToIndexSystem").IndexLocation>;
    smoothScrollTargetReached: u.Stream<true>;
    windowViewportRect: u.Stream<import("./interfaces").WindowViewportInfo>;
    windowScrollTo: u.Stream<ScrollToOptions>;
    useWindowScroll: u.StatefulStream<boolean>;
    windowScrollTop: u.Stream<number>;
    initialItemCount: u.StatefulStream<number>;
}>, {
    optional: {
        totalCount: "totalCount";
        overscan: "overscan";
        itemContent: "itemContent";
        components: "components";
        computeItemKey: "computeItemKey";
        initialItemCount: "initialItemCount";
        scrollSeekConfiguration: "scrollSeekConfiguration";
        listClassName: "listClassName";
        itemClassName: "itemClassName";
        useWindowScroll: "useWindowScroll";
        scrollerRef: "scrollerRef";
        item: "item";
        ItemContainer: "ItemContainer";
        ScrollContainer: "ScrollContainer";
        ListContainer: "ListContainer";
        scrollSeek: "scrollSeek";
    };
    methods: {
        scrollTo: "scrollTo";
        scrollBy: "scrollBy";
        scrollToIndex: "scrollToIndex";
    };
    events: {
        isScrolling: "isScrolling";
        endReached: "endReached";
        startReached: "startReached";
        rangeChanged: "rangeChanged";
        atBottomStateChange: "atBottomStateChange";
        atTopStateChange: "atTopStateChange";
    };
}>>>;
export declare type foo<T> = T extends React.ForwardRefExoticComponent<React.RefAttributes<infer Handle>> ? Handle : never;
export declare type GridHandle = RefHandle<typeof Grid>;
export { Grid };
