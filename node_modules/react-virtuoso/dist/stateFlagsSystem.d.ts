import * as u from '@virtuoso.dev/urx';
export interface ListBottomInfo {
    bottom: number;
    offsetBottom: number;
}
export interface AtBottomParams {
    offsetBottom: number;
    scrollTop: number;
    viewportHeight: number;
    totalHeight: number;
}
export declare type NotAtBottomReason = 'SIZE_INCREASED' | 'NOT_SHOWING_LAST_ITEM' | 'VIEWPORT_HEIGHT_DECREASING' | 'SCROLLING_UPWARDS' | 'NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM';
export declare type AtBottomState = {
    atBottom: false;
    notAtBottomBecause: NotAtBottomReason;
    state: AtBottomParams;
} | {
    atBottom: true;
    state: AtBottomParams;
};
export declare const stateFlagsSystem: u.SystemSpec<[u.SystemSpec<never[], () => {
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}>], ([{ scrollTop, viewportHeight, headerHeight, footerHeight }]: [{
    scrollTop: u.Stream<number>;
    viewportHeight: u.Stream<number>;
    headerHeight: u.StatefulStream<number>;
    footerHeight: u.StatefulStream<number>;
    smoothScrollTargetReached: u.Stream<true>;
    scrollTo: u.Stream<ScrollToOptions>;
    scrollBy: u.Stream<ScrollToOptions>;
    scrollDirection: u.StatefulStream<import("./domIOSystem").ScrollDirection>;
    statefulScrollTop: u.StatefulStream<number>;
    deviation: u.StatefulStream<number>;
    scrollingInProgress: u.StatefulStream<boolean>;
}]) => {
    isScrolling: u.Stream<boolean>;
    isAtTop: u.StatefulStream<boolean>;
    isAtBottom: u.StatefulStream<boolean>;
    atBottomState: u.Stream<AtBottomState>;
    atTopStateChange: u.Stream<boolean>;
    atBottomStateChange: u.Stream<boolean>;
    listStateListener: u.Stream<ListBottomInfo>;
}>;
