/// <reference types="react" />
import type { UserResponse } from 'stream-chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../types/types';
import type { StreamMessage } from '../../context/ChannelStateContext';
declare type ProcessMessagesParams<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    disableDateSeparator: boolean;
    hideDeletedMessages: boolean;
    hideNewMessageSeparator: boolean;
    messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    userId: string;
    lastRead?: Date | null;
    separateGiphyPreview?: boolean;
    setGiphyPreviewMessage?: React.Dispatch<React.SetStateAction<StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined>>;
    threadList?: boolean;
};
export declare const processMessages: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(params: ProcessMessagesParams<At, Ch, Co, Ev, Me, Re, Us>) => StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
export declare const getLastReceived: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[]) => string | null;
export declare const getReadStates: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[], read: Record<string, {
    last_read: Date;
    user: UserResponse<Us>;
}> | undefined, returnAllReadData: boolean) => Record<string, UserResponse<Us>[]>;
export declare const insertIntro: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[], headerPosition?: number | undefined) => StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
export declare type GroupStyle = '' | 'middle' | 'top' | 'bottom' | 'single';
export declare const getGroupStyles: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, previousMessage: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, nextMessage: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, noGroupByUser: boolean) => GroupStyle;
export {};
//# sourceMappingURL=utils.d.ts.map