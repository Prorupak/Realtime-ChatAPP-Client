import { GroupStyle } from '../utils';
import type { Channel } from 'stream-chat';
import type { StreamMessage } from '../../../context/ChannelStateContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultMessageType, DefaultUserType } from '../../../types/types';
export declare const useEnrichedMessages: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(args: {
    channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;
    disableDateSeparator: boolean;
    hideDeletedMessages: boolean;
    hideNewMessageSeparator: boolean;
    messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    noGroupByUser: boolean;
    threadList: boolean;
    groupStyles?: ((message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, previousMessage: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, nextMessage: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, noGroupByUser: boolean) => GroupStyle) | undefined;
    headerPosition?: number | undefined;
}) => {
    messageGroupStyles: Record<string, GroupStyle>;
    messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
};
//# sourceMappingURL=useEnrichedMessages.d.ts.map