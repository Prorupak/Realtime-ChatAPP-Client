import type { UserResponse } from 'stream-chat';
import type { StreamMessage } from '../../../context/ChannelStateContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
declare type UseLastReadDataParams<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    returnAllReadData: boolean;
    userID: string | undefined;
    read?: Record<string, {
        last_read: Date;
        user: UserResponse<Us>;
    }>;
};
export declare const useLastReadData: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(props: UseLastReadDataParams<At, Ch, Co, Ev, Me, Re, Us>) => Record<string, UserResponse<Us>[]>;
export {};
//# sourceMappingURL=useLastReadData.d.ts.map