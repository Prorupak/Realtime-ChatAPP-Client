import React from 'react';
import type { StreamMessage } from '../../../context/ChannelStateContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
export declare type UseScrollLocationLogicParams<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    currentUserId?: string;
    messages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    scrolledUpThreshold?: number;
};
export declare const useScrollLocationLogic: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(params: UseScrollLocationLogicParams<At, Ch, Co, Ev, Me, Re, Us>) => {
    hasNewMessages: boolean;
    listRef: React.RefObject<HTMLDivElement>;
    onMessageLoadCaptured: () => void;
    onScroll: (event: React.UIEvent<HTMLDivElement>) => void;
    scrollToBottom: () => void;
    wrapperRect: DOMRect | undefined;
};
//# sourceMappingURL=useScrollLocationLogic.d.ts.map