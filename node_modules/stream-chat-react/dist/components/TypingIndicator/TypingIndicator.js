import React from 'react';
import { Avatar as DefaultAvatar } from '../Avatar';
import { useChannelStateContext } from '../../context/ChannelStateContext';
import { useChatContext } from '../../context/ChatContext';
import { useComponentContext } from '../../context/ComponentContext';
import { useTypingContext } from '../../context/TypingContext';
/**
 * TypingIndicator lists users currently typing, it needs to be a child of Channel component
 */
var UnMemoizedTypingIndicator = function (props) {
    var PropAvatar = props.Avatar, _a = props.avatarSize, avatarSize = _a === void 0 ? 32 : _a, threadList = props.threadList;
    var _b = useChannelStateContext('TypingIndicator'), channelConfig = _b.channelConfig, thread = _b.thread;
    var client = useChatContext('TypingIndicator').client;
    var ContextAvatar = useComponentContext('TypingIndicator').Avatar;
    var _c = useTypingContext('TypingIndicator').typing, typing = _c === void 0 ? {} : _c;
    var Avatar = PropAvatar || ContextAvatar || DefaultAvatar;
    if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.typing_events) === false) {
        return null;
    }
    var typingInChannel = !threadList
        ? Object.values(typing).filter(function (_a) {
            var _b;
            var parent_id = _a.parent_id, user = _a.user;
            return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && !parent_id;
        })
        : [];
    var typingInThread = threadList
        ? Object.values(typing).filter(function (_a) {
            var _b;
            var parent_id = _a.parent_id, user = _a.user;
            return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && parent_id === (thread === null || thread === void 0 ? void 0 : thread.id);
        })
        : [];
    return (React.createElement("div", { className: "str-chat__typing-indicator " + ((threadList && typingInThread.length) || (!threadList && typingInChannel.length)
            ? 'str-chat__typing-indicator--typing'
            : '') },
        React.createElement("div", { className: 'str-chat__typing-indicator__avatars' }, (threadList ? typingInThread : typingInChannel).map(function (_a, i) {
            var user = _a.user;
            return (React.createElement(Avatar, { image: user === null || user === void 0 ? void 0 : user.image, key: (user === null || user === void 0 ? void 0 : user.id) + "-" + i, name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id), size: avatarSize, user: user }));
        })),
        React.createElement("div", { className: 'str-chat__typing-indicator__dots' },
            React.createElement("span", { className: 'str-chat__typing-indicator__dot' }),
            React.createElement("span", { className: 'str-chat__typing-indicator__dot' }),
            React.createElement("span", { className: 'str-chat__typing-indicator__dot' }))));
};
export var TypingIndicator = React.memo(UnMemoizedTypingIndicator);
