import type { TFunction } from 'i18next';
import type { MessageResponse, Mute, StreamChat, UserResponse } from 'stream-chat';
import type { PinPermissions } from './hooks';
import type { MessageProps } from './types';
import type { StreamMessage } from '../../context/ChannelStateContext';
import type { MessageContextValue } from '../../context/MessageContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultMessageType, DefaultUserType } from '../../types/types';
/**
 * Following function validates a function which returns notification message.
 * It validates if the first parameter is function and also if return value of function is string or no.
 */
export declare const validateAndGetMessage: <T extends unknown[]>(func: (...args: T) => unknown, args: T) => string | null;
/**
 * Tell if the owner of the current message is muted
 */
export declare const isUserMuted: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, mutes?: Mute<Us>[] | undefined) => boolean;
export declare const MESSAGE_ACTIONS: {
    delete: string;
    edit: string;
    flag: string;
    mute: string;
    pin: string;
    quote: string;
    react: string;
    reply: string;
};
export declare type MessageActionsArray<T extends string = string> = Array<'delete' | 'edit' | 'flag' | 'mute' | 'pin' | 'quote' | 'react' | 'reply' | T>;
export declare const defaultPinPermissions: PinPermissions;
export declare type Capabilities = {
    canDelete?: boolean;
    canEdit?: boolean;
    canFlag?: boolean;
    canMute?: boolean;
    canPin?: boolean;
    canQuote?: boolean;
    canReact?: boolean;
    canReply?: boolean;
};
export declare const getMessageActions: (actions: MessageActionsArray | boolean, { canDelete, canEdit, canFlag, canMute, canPin, canQuote, canReact, canReply }: Capabilities) => MessageActionsArray<string>;
export declare const showMessageActionsBox: (actions: MessageActionsArray<string>) => boolean;
export declare const areMessagePropsEqual: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(prevProps: MessageProps<At, Ch, Co, Ev, Me, Re, Us, import("../../types/types").CustomTrigger> & {
    mutes?: Mute<Us>[] | undefined;
    showDetailedReactions?: boolean | undefined;
}, nextProps: MessageProps<At, Ch, Co, Ev, Me, Re, Us, import("../../types/types").CustomTrigger> & {
    mutes?: Mute<Us>[] | undefined;
    showDetailedReactions?: boolean | undefined;
}) => boolean;
export declare const areMessageUIPropsEqual: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(prevProps: MessageContextValue<At, Ch, Co, Ev, Me, Re, Us> & {
    showDetailedReactions?: boolean | undefined;
}, nextProps: MessageContextValue<At, Ch, Co, Ev, Me, Re, Us> & {
    showDetailedReactions?: boolean | undefined;
}) => boolean;
export declare const messageHasReactions: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(message?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined) => boolean;
export declare const messageHasAttachments: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(message?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined) => boolean;
export declare const getImages: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(message?: MessageResponse<At, Ch, Co, Me, Re, Us> | undefined) => import("stream-chat").Attachment<At>[];
export declare const getNonImageAttachments: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(message?: MessageResponse<At, Ch, Co, Me, Re, Us> | undefined) => import("stream-chat").Attachment<At>[];
export declare const getReadByTooltipText: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(users: UserResponse<Us>[], t: TFunction, client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>) => string;
//# sourceMappingURL=utils.d.ts.map