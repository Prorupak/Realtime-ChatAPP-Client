import React from 'react';
import { MessageContextValue } from '../../context/MessageContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../types/types';
export declare type MessageOptionsProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = Partial<Pick<MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'handleOpenThread'>> & {
    ActionsIcon?: React.FunctionComponent;
    displayLeft?: boolean;
    displayReplies?: boolean;
    messageWrapperRef?: React.RefObject<HTMLDivElement>;
    ReactionIcon?: React.FunctionComponent;
    theme?: string;
    ThreadIcon?: React.FunctionComponent;
};
export declare const MessageOptions: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(props: MessageOptionsProps<At, Ch, Co, Ev, Me, Re, Us>) => JSX.Element | null;
//# sourceMappingURL=MessageOptions.d.ts.map