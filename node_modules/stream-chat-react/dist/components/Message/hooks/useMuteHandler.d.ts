import { StreamMessage } from '../../../context/ChannelStateContext';
import type { UserResponse } from 'stream-chat';
import type { ReactEventHandler } from '../types';
import type { DefaultAttachmentType, DefaultChannelType, DefaultMessageType, DefaultUserType } from '../../../types/types';
export declare const missingUseMuteHandlerParamsWarning = "useMuteHandler was called but it is missing one or more necessary parameter.";
export declare type MuteUserNotifications<Us extends DefaultUserType<Us> = DefaultUserType> = {
    getErrorNotification?: (user: UserResponse<Us>) => string;
    getSuccessNotification?: (user: UserResponse<Us>) => string;
    notify?: (notificationText: string, type: 'success' | 'error') => void;
};
export declare const useMuteHandler: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(message?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined, notifications?: MuteUserNotifications<Us>) => ReactEventHandler;
//# sourceMappingURL=useMuteHandler.d.ts.map