var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useMemo, useRef } from 'react';
import { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';
import { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';
import { MessageStatus } from './MessageStatus';
import { MessageTimestamp as DefaultTimestamp } from './MessageTimestamp';
import { useReactionClick } from './hooks';
import { PinIndicator as DefaultPinIndicator, ErrorIcon, ReactionIcon, ThreadIcon } from './icons';
import { QuotedMessage as DefaultQuotedMessage } from './QuotedMessage';
import { areMessageUIPropsEqual, MESSAGE_ACTIONS, showMessageActionsBox } from './utils';
import { Avatar as DefaultAvatar } from '../Avatar';
import { MessageActions } from '../MessageActions';
import { EditMessageForm as DefaultEditMessageForm, MessageInput } from '../MessageInput';
import { MML } from '../MML';
import { ReactionSelector as DefaultReactionSelector, SimpleReactionsList as DefaultReactionsList, } from '../Reactions';
import { useComponentContext } from '../../context/ComponentContext';
import { useMessageContext } from '../../context/MessageContext';
import { useTranslationContext } from '../../context/TranslationContext';
import { renderText as defaultRenderText, isOnlyEmojis } from '../../utils';
var MessageTeamWithContext = function (props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var clearEditingState = props.clearEditingState, editing = props.editing, getMessageActions = props.getMessageActions, groupStyles = props.groupStyles, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, handleRetry = props.handleRetry, initialMessage = props.initialMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, messageWrapperRef = props.messageWrapperRef, onMentionsClickMessage = props.onMentionsClickMessage, onMentionsHoverMessage = props.onMentionsHoverMessage, onReactionListClick = props.onReactionListClick, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, _o = props.renderText, renderText = _o === void 0 ? defaultRenderText : _o, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList, unsafeHTML = props.unsafeHTML;
    var _p = useComponentContext('MessageTeam'), Attachment = _p.Attachment, _q = _p.Avatar, Avatar = _q === void 0 ? DefaultAvatar : _q, _r = _p.EditMessageInput, EditMessageInput = _r === void 0 ? DefaultEditMessageForm : _r, _s = _p.MessageDeleted, MessageDeleted = _s === void 0 ? DefaultMessageDeleted : _s, _t = _p.MessageRepliesCountButton, MessageRepliesCountButton = _t === void 0 ? DefaultMessageRepliesCountButton : _t, _u = _p.MessageTimestamp, MessageTimestamp = _u === void 0 ? DefaultTimestamp : _u, _v = _p.PinIndicator, PinIndicator = _v === void 0 ? DefaultPinIndicator : _v, _w = _p.QuotedMessage, QuotedMessage = _w === void 0 ? DefaultQuotedMessage : _w, _x = _p.ReactionsList, ReactionsList = _x === void 0 ? DefaultReactionsList : _x, _y = _p.ReactionSelector, ReactionSelector = _y === void 0 ? DefaultReactionSelector : _y;
    var _z = useTranslationContext('MessageTeam'), t = _z.t, userLanguage = _z.userLanguage;
    var messageActions = getMessageActions();
    var showActionsBox = showMessageActionsBox(messageActions);
    var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && !threadList;
    var messageTextToRender = ((_a = message.i18n) === null || _a === void 0 ? void 0 : _a[userLanguage + "_text"]) || message.text;
    var messageMentionedUsersItem = message.mentioned_users;
    var messageText = useMemo(function () { return renderText(messageTextToRender, messageMentionedUsersItem); }, [
        messageMentionedUsersItem,
        messageTextToRender,
    ]);
    var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';
    if (message.deleted_at) {
        return React.createElement(MessageDeleted, { message: message });
    }
    if (editing) {
        return (React.createElement("div", { className: "str-chat__message-team str-chat__message-team--" + firstGroupStyle + " str-chat__message-team--editing", "data-testid": 'message-team-edit' },
            (firstGroupStyle === 'top' || firstGroupStyle === 'single') && (React.createElement("div", { className: 'str-chat__message-team-meta' },
                React.createElement(Avatar, { image: (_b = message.user) === null || _b === void 0 ? void 0 : _b.image, name: ((_c = message.user) === null || _c === void 0 ? void 0 : _c.name) || ((_d = message.user) === null || _d === void 0 ? void 0 : _d.id), onClick: onUserClick, onMouseOver: onUserHover, size: 40 }))),
            React.createElement(MessageInput, { clearEditingState: clearEditingState, Input: EditMessageInput, message: message })));
    }
    return (React.createElement(React.Fragment, null,
        message.pinned && (React.createElement("div", { className: 'str-chat__message-team-pin-indicator' },
            React.createElement(PinIndicator, { message: message, t: t }))),
        React.createElement("div", { className: "str-chat__message-team str-chat__message-team--" + firstGroupStyle + " str-chat__message-team--" + message.type + " " + (threadList ? 'thread-list' : '') + " str-chat__message-team--" + message.status + " " + (message.pinned ? 'pinned-message' : ''), "data-testid": 'message-team', ref: messageWrapperRef },
            React.createElement("div", { className: 'str-chat__message-team-meta' },
                firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage ? (React.createElement(Avatar, { image: (_e = message.user) === null || _e === void 0 ? void 0 : _e.image, name: ((_f = message.user) === null || _f === void 0 ? void 0 : _f.name) || ((_g = message.user) === null || _g === void 0 ? void 0 : _g.id), onClick: onUserClick, onMouseOver: onUserHover, size: 40 })) : (React.createElement("div", { "data-testid": 'team-meta-spacer', style: { marginRight: 0, width: 40 } })),
                React.createElement(MessageTimestamp, null)),
            React.createElement("div", { className: 'str-chat__message-team-group' },
                (firstGroupStyle === 'top' || firstGroupStyle === 'single' || initialMessage) && (React.createElement("div", { className: 'str-chat__message-team-author', "data-testid": 'message-team-author', onClick: onUserClick },
                    React.createElement("strong", null, ((_h = message.user) === null || _h === void 0 ? void 0 : _h.name) || ((_j = message.user) === null || _j === void 0 ? void 0 : _j.id)),
                    message.type === 'error' && (React.createElement("div", { className: 'str-chat__message-team-error-header' }, t('Only visible to you'))))),
                React.createElement("div", { className: "str-chat__message-team-content str-chat__message-team-content--" + firstGroupStyle + " str-chat__message-team-content--" + (message.text === '' ? 'image' : 'text'), "data-testid": 'message-team-content' },
                    message.quoted_message && React.createElement(QuotedMessage, null),
                    !initialMessage &&
                        message.status !== 'sending' &&
                        message.status !== 'failed' &&
                        message.type !== 'system' &&
                        message.type !== 'ephemeral' &&
                        message.type !== 'error' && (React.createElement("div", { className: "str-chat__message-team-actions", "data-testid": 'message-team-actions' },
                        showDetailedReactions && React.createElement(ReactionSelector, { ref: reactionSelectorRef }),
                        isReactionEnabled && (React.createElement("span", { "data-testid": 'message-team-reaction-icon', onClick: onReactionListClick, title: 'Reactions' },
                            React.createElement(ReactionIcon, null))),
                        shouldShowReplies && (React.createElement("span", { "data-testid": 'message-team-thread-icon', onClick: handleOpenThread, title: 'Start a thread' },
                            React.createElement(ThreadIcon, null))),
                        showActionsBox && (React.createElement(MessageActions, { inline: true, messageWrapperRef: messageWrapperRef })))),
                    React.createElement("span", { className: isOnlyEmojis(message.text) ? 'str-chat__message-team-text--is-emoji' : '', "data-testid": 'message-team-message', onClick: onMentionsClickMessage, onMouseOver: onMentionsHoverMessage }, unsafeHTML && message.html ? (React.createElement("div", { dangerouslySetInnerHTML: { __html: message.html } })) : (messageText)),
                    message.mml && React.createElement(MML, { actionHandler: handleAction, align: 'left', source: message.mml }),
                    !message.text && ((_k = message.attachments) === null || _k === void 0 ? void 0 : _k.length) ? (React.createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                    ((_l = message.latest_reactions) === null || _l === void 0 ? void 0 : _l.length) !== 0 && message.text !== '' && isReactionEnabled && (React.createElement(ReactionsList, null)),
                    message.status === 'failed' && (React.createElement("button", { className: 'str-chat__message-team-failed', "data-testid": 'message-team-failed', onClick: message.errorStatusCode !== 403 ? function () { return handleRetry(message); } : undefined },
                        React.createElement(ErrorIcon, null),
                        message.errorStatusCode !== 403
                            ? t('Message Failed · Click to try again')
                            : t('Message Failed · Unauthorized')))),
                React.createElement(MessageStatus, { messageType: 'team' }),
                message.text && ((_m = message.attachments) === null || _m === void 0 ? void 0 : _m.length) ? (React.createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
                message.latest_reactions &&
                    message.latest_reactions.length !== 0 &&
                    message.text === '' &&
                    isReactionEnabled && React.createElement(ReactionsList, null),
                !threadList && (React.createElement(MessageRepliesCountButton, { onClick: handleOpenThread, reply_count: message.reply_count }))))));
};
var MemoizedMessageTeam = React.memo(MessageTeamWithContext, areMessageUIPropsEqual);
/**
 * @deprecated - This UI component will be removed in the next major release.
 *
 * Handles the rendering of a Message and depends on the Message component for all the logic.
 * Implements the look and feel for a team style collaboration environment.
 */
export var MessageTeam = function (props) {
    var messageContext = useMessageContext('MessageTeam');
    var reactionSelectorRef = useRef(null);
    var messageWrapperRef = useRef(null);
    var message = props.message || messageContext.message;
    var _a = useReactionClick(message, reactionSelectorRef, messageWrapperRef), isReactionEnabled = _a.isReactionEnabled, onReactionListClick = _a.onReactionListClick, showDetailedReactions = _a.showDetailedReactions;
    return (React.createElement(MemoizedMessageTeam, __assign({}, messageContext, { isReactionEnabled: isReactionEnabled, messageWrapperRef: messageWrapperRef, onReactionListClick: onReactionListClick, reactionSelectorRef: reactionSelectorRef, showDetailedReactions: showDetailedReactions }, props)));
};
