var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';
import { MessageOptions as DefaultMessageOptions } from './MessageOptions';
import { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';
import { MessageText } from './MessageText';
import { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';
import { areMessageUIPropsEqual, messageHasAttachments, messageHasReactions } from './utils';
import { Avatar as DefaultAvatar } from '../Avatar';
import { MML } from '../MML';
import { ReactionSelector as DefaultReactionSelector, ReactionsList as DefaultReactionsList, } from '../Reactions';
import { useComponentContext } from '../../context/ComponentContext';
import { useMessageContext } from '../../context/MessageContext';
var MessageCommerceWithContext = function (props) {
    var _a, _b, _c, _d, _e, _f;
    var groupStyles = props.groupStyles, handleAction = props.handleAction, handleOpenThread = props.handleOpenThread, isMyMessage = props.isMyMessage, isReactionEnabled = props.isReactionEnabled, message = props.message, onUserClick = props.onUserClick, onUserHover = props.onUserHover, reactionSelectorRef = props.reactionSelectorRef, showDetailedReactions = props.showDetailedReactions, threadList = props.threadList;
    var _g = useComponentContext('MessageCommerce'), Attachment = _g.Attachment, _h = _g.Avatar, Avatar = _h === void 0 ? DefaultAvatar : _h, _j = _g.MessageDeleted, MessageDeleted = _j === void 0 ? DefaultMessageDeleted : _j, _k = _g.MessageRepliesCountButton, MessageRepliesCountButton = _k === void 0 ? DefaultMessageRepliesCountButton : _k, _l = _g.MessageOptions, MessageOptions = _l === void 0 ? DefaultMessageOptions : _l, _m = _g.MessageTimestamp, MessageTimestamp = _m === void 0 ? DefaultMessageTimestamp : _m, _o = _g.ReactionSelector, ReactionSelector = _o === void 0 ? DefaultReactionSelector : _o, _p = _g.ReactionsList, ReactionsList = _p === void 0 ? DefaultReactionsList : _p;
    var hasAttachment = messageHasAttachments(message);
    var hasReactions = messageHasReactions(message);
    var firstGroupStyle = groupStyles ? groupStyles[0] : 'single';
    var messageClasses = "str-chat__message-commerce str-chat__message-commerce--" + (isMyMessage() ? 'right' : 'left');
    if (message.deleted_at) {
        return React.createElement(MessageDeleted, { message: message });
    }
    if (message.customType === 'message.date') {
        return null;
    }
    return (React.createElement("div", { className: ("\n\t\t\t\t\t\t" + messageClasses + "\n\t\t\t\t\t\tstr-chat__message-commerce--" + message.type + "\n\t\t\t\t\t\t" + (message.text ? 'str-chat__message-commerce--has-text' : 'str-chat__message-commerce--has-no-text') + "\n\t\t\t\t\t\t" + (hasAttachment ? 'str-chat__message-commerce--has-attachment' : '') + "\n            " + (hasReactions && isReactionEnabled ? 'str-chat__message-commerce--with-reactions' : '') + "\n            " + ("str-chat__message-commerce--" + firstGroupStyle) + "\n            " + (message.pinned ? 'pinned-message' : '') + "\n\t\t\t\t\t").trim(), "data-testid": 'message-commerce-wrapper', key: message.id },
        (firstGroupStyle === 'bottom' || firstGroupStyle === 'single') && (React.createElement(Avatar, { image: (_a = message.user) === null || _a === void 0 ? void 0 : _a.image, name: ((_b = message.user) === null || _b === void 0 ? void 0 : _b.name) || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id), onClick: onUserClick, onMouseOver: onUserHover })),
        React.createElement("div", { className: 'str-chat__message-commerce-inner' },
            React.createElement(React.Fragment, null,
                React.createElement(MessageOptions, { displayLeft: false, displayReplies: false, theme: 'commerce' }),
                hasReactions && !showDetailedReactions && isReactionEnabled && React.createElement(ReactionsList, null),
                showDetailedReactions && isReactionEnabled && (React.createElement(ReactionSelector, { ref: reactionSelectorRef }))),
            ((_d = message.attachments) === null || _d === void 0 ? void 0 : _d.length) ? (React.createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,
            message.mml && (React.createElement(MML, { actionHandler: handleAction, align: isMyMessage() ? 'right' : 'left', source: message.mml })),
            message.text && (React.createElement(MessageText, { customInnerClass: 'str-chat__message-commerce-text-inner', customWrapperClass: 'str-chat__message-commerce-text', theme: 'commerce' })),
            !threadList && (React.createElement("div", { className: 'str-chat__message-commerce-reply-button' },
                React.createElement(MessageRepliesCountButton, { onClick: handleOpenThread, reply_count: message.reply_count }))),
            React.createElement("div", { className: 'str-chat__message-commerce-data' },
                !isMyMessage() ? (React.createElement("span", { className: 'str-chat__message-commerce-name' }, ((_e = message.user) === null || _e === void 0 ? void 0 : _e.name) || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id))) : null,
                React.createElement(MessageTimestamp, { customClass: 'str-chat__message-commerce-timestamp', format: 'LT' })))));
};
var MemoizedMessageCommerce = React.memo(MessageCommerceWithContext, areMessageUIPropsEqual);
/**
 * @deprecated - This UI component will be removed in the next major release.
 *
 * UI component that renders a message and receives functionality from the Message/MessageList components
 */
export var MessageCommerce = function (props) {
    var messageContext = useMessageContext('MessageCommerce');
    return React.createElement(MemoizedMessageCommerce, __assign({}, messageContext, props));
};
