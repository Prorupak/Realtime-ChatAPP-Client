import type { StreamChat, UpdatedMessage } from 'stream-chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
declare type UpdateHandler<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = (cid: string, updatedMessage: UpdatedMessage<At, Ch, Co, Me, Re, Us>) => ReturnType<StreamChat<At, Ch, Co, Ev, Me, Re, Us>['updateMessage']>;
export declare const useEditMessageHandler: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(doUpdateMessageRequest?: UpdateHandler<At, Ch, Co, Ev, Me, Re, Us> | undefined) => (updatedMessage: UpdatedMessage<At, Ch, Co, Me, Re, Us>) => Promise<import("stream-chat").UpdateMessageAPIResponse<At, Ch, Co, Me, Re, Us>>;
export {};
//# sourceMappingURL=useEditMessageHandler.d.ts.map