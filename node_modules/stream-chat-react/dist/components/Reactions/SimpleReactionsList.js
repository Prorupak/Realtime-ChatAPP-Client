var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { Suspense, useMemo, useState } from 'react';
import { getStrippedEmojiData } from '../Channel/emojiData';
import { useEmojiContext } from '../../context/EmojiContext';
import { useMessageContext } from '../../context/MessageContext';
var UnMemoizedSimpleReactionsList = function (props) {
    var _a = props.additionalEmojiProps, additionalEmojiProps = _a === void 0 ? {} : _a, propHandleReaction = props.handleReaction, propReactionCounts = props.reaction_counts, propReactionOptions = props.reactionOptions, propReactions = props.reactions;
    var _b = useEmojiContext('SimpleReactionsList'), Emoji = _b.Emoji, emojiConfig = _b.emojiConfig;
    var _c = useMessageContext('SimpleReactionsList'), contextHandleReaction = _c.handleReaction, message = _c.message;
    var _d = emojiConfig || {}, defaultMinimalEmojis = _d.defaultMinimalEmojis, fullEmojiData = _d.emojiData, emojiSetDef = _d.emojiSetDef;
    var _e = useState(undefined), tooltipReactionType = _e[0], setTooltipReactionType = _e[1];
    var handleReaction = propHandleReaction || contextHandleReaction;
    var reactions = propReactions || message.latest_reactions || [];
    var reactionCounts = propReactionCounts || message.reaction_counts || {};
    var reactionOptions = propReactionOptions || defaultMinimalEmojis;
    var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);
    var emojiData = useMemo(function () { return (reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData)); }, [fullEmojiData, reactionsAreCustom]);
    if (!reactions.length)
        return null;
    var getUsersPerReactionType = function (type) {
        return reactions
            .map(function (reaction) {
            var _a, _b;
            if (reaction.type === type) {
                return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);
            }
            return null;
        })
            .filter(Boolean);
    };
    var getTotalReactionCount = function () {
        return Object.values(reactionCounts).reduce(function (total, count) { return total + count; }, 0);
    };
    var getCurrentMessageReactionTypes = function () {
        var reactionTypes = [];
        reactions.forEach(function (_a) {
            var type = _a.type;
            if (reactionTypes.indexOf(type) === -1) {
                reactionTypes.push(type);
            }
        });
        return reactionTypes;
    };
    var getEmojiByReactionType = function (type) {
        var reactionEmoji = reactionOptions.find(function (option) { return option.id === type; });
        return reactionEmoji;
    };
    var getSupportedReactionMap = function () {
        var reactionMap = {};
        reactionOptions.forEach(function (_a) {
            var id = _a.id;
            return (reactionMap[id] = true);
        });
        return reactionMap;
    };
    var messageReactionTypes = getCurrentMessageReactionTypes();
    var supportedReactionMap = getSupportedReactionMap();
    var supportedReactionsArePresent = messageReactionTypes.some(function (type) { return supportedReactionMap[type]; });
    if (!supportedReactionsArePresent)
        return null;
    return (React.createElement("ul", { className: 'str-chat__simple-reactions-list', "data-testid": 'simple-reaction-list', onMouseLeave: function () { return setTooltipReactionType(undefined); } },
        messageReactionTypes.map(function (reactionType, i) {
            var _a;
            var emojiObject = getEmojiByReactionType(reactionType);
            return emojiObject ? (React.createElement("li", { className: 'str-chat__simple-reactions-list-item', key: emojiObject.id + "-" + i, onClick: function (event) { return handleReaction(reactionType, event); } },
                React.createElement("span", { onMouseEnter: function () { return setTooltipReactionType(reactionType); } },
                    React.createElement(Suspense, { fallback: null },
                        React.createElement(Emoji, __assign({ data: emojiData, emoji: emojiObject, size: 13 }, (reactionsAreCustom ? additionalEmojiProps : emojiSetDef)))),
                    "\u00A0"),
                tooltipReactionType === emojiObject.id && (React.createElement("div", { className: 'str-chat__simple-reactions-list-tooltip' },
                    React.createElement("div", { className: 'arrow' }), (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 :
                    _a.join(', '))))) : null;
        }),
        React.createElement("li", { className: 'str-chat__simple-reactions-list-item--last-number' }, getTotalReactionCount())));
};
export var SimpleReactionsList = React.memo(UnMemoizedSimpleReactionsList);
