import React from 'react';
import { MessageContextValue } from '../../context/MessageContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../types/types';
declare type MessageContextPropsToPick = 'getMessageActions' | 'handleDelete' | 'handleFlag' | 'handleMute' | 'handlePin' | 'message';
export declare type MessageActionsProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = Partial<Pick<MessageContextValue<At, Ch, Co, Ev, Me, Re, Us>, MessageContextPropsToPick>> & {
    ActionsIcon?: React.FunctionComponent;
    customWrapperClass?: string;
    inline?: boolean;
    messageWrapperRef?: React.RefObject<HTMLDivElement>;
    mine?: () => boolean;
};
export declare const MessageActions: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(props: MessageActionsProps<At, Ch, Co, Ev, Me, Re, Us>) => JSX.Element | null;
export declare type MessageActionsWrapperProps = {
    setActionsBoxOpen: React.Dispatch<React.SetStateAction<boolean>>;
    customWrapperClass?: string;
    inline?: boolean;
};
export {};
//# sourceMappingURL=MessageActions.d.ts.map