import React from 'react';
import { ChannelSearchFunctionParams, SearchInputProps } from './SearchInput';
import { DropdownContainerProps, SearchResultItemProps } from './SearchResults';
import { ChannelOrUserResponse } from './utils';
import type { ChannelFilters, ChannelOptions, ChannelSort, UserFilters, UserOptions, UserSort } from 'stream-chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../types/types';
export declare type SearchQueryParams<Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    channelFilters?: {
        filters?: ChannelFilters<Ch, Co, Us>;
        options?: ChannelOptions;
        sort?: ChannelSort<Ch>;
    };
    userFilters?: {
        filters?: UserFilters<Us>;
        options?: UserOptions;
        sort?: UserSort<Us>;
    };
};
export declare type ChannelSearchProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    /** The type of channel to create on user result select, defaults to `messaging` */
    channelType?: string;
    /** Custom UI component to display all of the search results, defaults to accepts same props as: [DefaultDropdownContainer](https://github.com/GetStream/stream-chat-react/blob/master/src/components/ChannelSearch/SearchResults.tsx)  */
    DropdownContainer?: React.ComponentType<DropdownContainerProps<At, Ch, Co, Ev, Me, Re, Us>>;
    /** Custom handler function to run on search result item selection */
    onSelectResult?: (result: ChannelOrUserResponse<At, Ch, Co, Ev, Me, Re, Us>) => Promise<void> | void;
    /** Display search results as an absolutely positioned popup, defaults to false and shows inline */
    popupResults?: boolean;
    /** Custom UI component to display empty search results */
    SearchEmpty?: React.ComponentType;
    /** Boolean to search for channels as well as users in the server query, default is false and just searches for users */
    searchForChannels?: boolean;
    /** Custom search function to override default */
    searchFunction?: (params: ChannelSearchFunctionParams<At, Ch, Co, Ev, Me, Re, Us>, event: React.BaseSyntheticEvent) => Promise<void> | void;
    /** Custom UI component to display the search text input */
    SearchInput?: React.ComponentType<SearchInputProps<At, Ch, Co, Ev, Me, Re, Us>>;
    /** Custom UI component to display the search loading state */
    SearchLoading?: React.ComponentType;
    /** Object containing filters/sort/options overrides for user search */
    searchQueryParams?: SearchQueryParams<Ch, Co, Us>;
    /** Custom UI component to display a search result list item, defaults to and accepts same props as: [DefaultSearchResultItem](https://github.com/GetStream/stream-chat-react/blob/master/src/components/ChannelSearch/SearchResults.tsx) */
    SearchResultItem?: React.ComponentType<SearchResultItemProps<At, Ch, Co, Ev, Me, Re, Us>>;
    /** Custom UI component to display the search results header */
    SearchResultsHeader?: React.ComponentType;
};
/**
 * The ChannelSearch component makes a query users call and displays the results in a list.
 * Clicking on a list item will navigate you into a channel with the selected user. It can be used
 * on its own or added to the ChannelList component by setting the `showChannelSearch` prop to true.
 */
export declare const ChannelSearch: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(props: ChannelSearchProps<At, Ch, Co, Ev, Me, Re, Us>) => JSX.Element;
//# sourceMappingURL=ChannelSearch.d.ts.map