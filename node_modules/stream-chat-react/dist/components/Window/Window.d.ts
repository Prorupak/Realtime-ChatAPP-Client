import React, { PropsWithChildren } from 'react';
import { StreamMessage } from '../../context/ChannelStateContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../types/types';
export declare type WindowProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    /** show or hide the window when a thread is active */
    hideOnThread?: boolean;
    /** optional prop to manually trigger the opening of a thread*/
    thread?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>;
};
/**
 * A UI component for conditionally displaying a Thread or Channel
 */
export declare const Window: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../types/types").UnknownType = import("../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(props: React.PropsWithChildren<WindowProps<At, Ch, Co, Me, Re, Us, DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>>) => JSX.Element | null;
//# sourceMappingURL=Window.d.ts.map