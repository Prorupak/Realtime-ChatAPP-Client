/// <reference types="react" />
import type { Channel, ChannelFilters, ChannelOptions, ChannelSort, StreamChat } from 'stream-chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultMessageType, DefaultUserType } from '../../../types/types';
export declare const usePaginatedChannels: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>, filters: ChannelFilters<Ch, Co, Us>, sort: ChannelSort<Ch>, options: ChannelOptions, activeChannelHandler: (channels: Channel<At, Ch, Co, Ev, Me, Re, Us>[], setChannels: import("react").Dispatch<import("react").SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>>) => void) => {
    channels: Channel<At, Ch, Co, Ev, Me, Re, Us>[];
    hasNextPage: boolean;
    loadNextPage: () => void;
    setChannels: import("react").Dispatch<import("react").SetStateAction<Channel<At, Ch, Co, Ev, Me, Re, Us>[]>>;
    status: {
        error: boolean;
        loadingChannels: boolean;
        refreshing: boolean;
    };
};
//# sourceMappingURL=usePaginatedChannels.d.ts.map