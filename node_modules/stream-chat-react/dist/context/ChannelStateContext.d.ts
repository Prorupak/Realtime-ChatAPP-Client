import React, { PropsWithChildren } from 'react';
import type { Channel, ChannelConfigWithInfo, MessageResponse, Mute, ChannelState as StreamChannelState } from 'stream-chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType, UnknownType } from '../types/types';
export declare type ChannelNotifications = Array<{
    id: string;
    text: string;
    type: 'success' | 'error';
}>;
export declare type StreamMessage<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = ReturnType<StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['formatMessage']> | MessageResponse<At, Ch, Co, Me, Re, Us>;
export declare type ChannelState<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    error?: Error | null;
    hasMore?: boolean;
    loading?: boolean;
    loadingMore?: boolean;
    members?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['members'];
    messages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    pinnedMessages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    quotedMessage?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>;
    read?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['read'];
    thread?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | null;
    threadHasMore?: boolean;
    threadLoadingMore?: boolean;
    threadMessages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    typing?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['typing'];
    watcherCount?: number;
    watchers?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['watchers'];
};
export declare type ChannelStateContextValue<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = Omit<ChannelState<At, Ch, Co, Ev, Me, Re, Us>, 'typing'> & {
    channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;
    channelCapabilities: Record<string, boolean>;
    channelConfig: ChannelConfigWithInfo<Co> | undefined;
    multipleUploads: boolean;
    notifications: ChannelNotifications;
    acceptedFiles?: string[];
    dragAndDropWindow?: boolean;
    maxNumberOfFiles?: number;
    mutes?: Mute<Us>[];
    watcher_count?: number;
};
export declare const ChannelStateContext: React.Context<ChannelStateContextValue<DefaultAttachmentType, DefaultChannelType, import("stream-chat").LiteralStringForUnion, UnknownType, DefaultMessageType, UnknownType, DefaultUserType<import("../types/types").DefaultUserTypeInternal>> | undefined>;
export declare const ChannelStateProvider: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>({ children, value, }: React.PropsWithChildren<{
    value: ChannelStateContextValue<At, Ch, Co, Ev, Me, Re, Us>;
}>) => JSX.Element;
export declare const useChannelStateContext: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(componentName?: string | undefined) => ChannelStateContextValue<At, Ch, Co, Ev, Me, Re, Us>;
/**
 * Typescript currently does not support partial inference, so if ChannelStateContext
 * typing is desired while using the HOC withChannelStateContext, the Props for the
 * wrapped component must be provided as the first generic.
 */
export declare const withChannelStateContext: <P extends UnknownType, At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(Component: React.ComponentType<P>) => React.FC<Omit<P, "notifications" | "error" | "loading" | "mutes" | "channel" | "members" | "read" | "watchers" | "hasMore" | "loadingMore" | "messages" | "pinnedMessages" | "quotedMessage" | "thread" | "threadHasMore" | "threadLoadingMore" | "threadMessages" | "watcherCount" | "channelCapabilities" | "channelConfig" | "multipleUploads" | "acceptedFiles" | "dragAndDropWindow" | "maxNumberOfFiles" | "watcher_count">>;
//# sourceMappingURL=ChannelStateContext.d.ts.map