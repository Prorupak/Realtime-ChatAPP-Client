import React, { PropsWithChildren } from 'react';
import type { AppSettingsAPIResponse, Channel, Mute, StreamChat } from 'stream-chat';
import type { Theme } from '../components/Chat/Chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType, UnknownType } from '../types/types';
declare type CSSClasses = 'chat' | 'chatContainer' | 'channel' | 'channelList' | 'message' | 'messageList' | 'thread' | 'threadList' | 'virtualMessage' | 'virtualizedMessageList';
export declare type CustomClasses = Partial<Record<CSSClasses, string>>;
export declare type ChatContextValue<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;
    closeMobileNav: () => void;
    getAppSettings: () => Promise<AppSettingsAPIResponse<Co>> | null;
    mutes: Mute<Us>[];
    openMobileNav: () => void;
    setActiveChannel: (newChannel?: Channel<At, Ch, Co, Ev, Me, Re, Us>, watchers?: {
        limit?: number;
        offset?: number;
    }, event?: React.BaseSyntheticEvent) => void;
    /** @deprecated */
    theme: Theme;
    useImageFlagEmojisOnWindows: boolean;
    channel?: Channel<At, Ch, Co, Ev, Me, Re, Us>;
    customClasses?: CustomClasses;
    navOpen?: boolean;
};
export declare const ChatContext: React.Context<ChatContextValue<DefaultAttachmentType, DefaultChannelType, import("stream-chat").LiteralStringForUnion, UnknownType, DefaultMessageType, UnknownType, DefaultUserType<import("../types/types").DefaultUserTypeInternal>> | undefined>;
export declare const ChatProvider: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>({ children, value, }: React.PropsWithChildren<{
    value: ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>;
}>) => JSX.Element;
export declare const useChatContext: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(componentName?: string | undefined) => ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>;
/**
 * Typescript currently does not support partial inference so if ChatContext
 * typing is desired while using the HOC withChatContext the Props for the
 * wrapped component must be provided as the first generic.
 */
export declare const withChatContext: <P extends UnknownType, At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(Component: React.ComponentType<P>) => React.FC<Omit<P, keyof ChatContextValue<At, Ch, Co, Ev, Me, Re, Us>>>;
export {};
//# sourceMappingURL=ChatContext.d.ts.map