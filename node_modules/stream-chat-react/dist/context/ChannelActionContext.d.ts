import React, { PropsWithChildren } from 'react';
import type { Attachment, Message, UpdatedMessage, UpdateMessageAPIResponse, UserResponse } from 'stream-chat';
import type { StreamMessage } from './ChannelStateContext';
import type { ChannelStateReducerAction } from '../components/Channel/channelState';
import type { CustomMentionHandler } from '../components/Message/hooks/useMentionsHandler';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType, UnknownType } from '../types/types';
export declare type MessageAttachments<At extends DefaultAttachmentType = DefaultAttachmentType> = Array<Attachment<At> & {
    file_size?: number;
    mime_type?: string;
}>;
export declare type MessageToSend<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    attachments?: MessageAttachments<At>;
    errorStatusCode?: number;
    id?: string;
    mentioned_users?: UserResponse<Us>[];
    parent?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>;
    parent_id?: string;
    status?: string;
    text?: string;
};
export declare type RetrySendMessage<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>) => Promise<void>;
export declare type ChannelActionContextValue<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    addNotification: (text: string, type: 'success' | 'error') => void;
    closeThread: (event: React.BaseSyntheticEvent) => void;
    dispatch: React.Dispatch<ChannelStateReducerAction<At, Ch, Co, Ev, Me, Re, Us>>;
    editMessage: (message: UpdatedMessage<At, Ch, Co, Me, Re, Us>) => Promise<UpdateMessageAPIResponse<At, Ch, Co, Me, Re, Us> | void>;
    loadMore: (limit?: number) => Promise<number>;
    loadMoreThread: () => Promise<void>;
    onMentionsClick: CustomMentionHandler<Us>;
    onMentionsHover: CustomMentionHandler<Us>;
    openThread: (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, event: React.BaseSyntheticEvent) => void;
    removeMessage: (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>) => void;
    retrySendMessage: RetrySendMessage<At, Ch, Co, Ev, Me, Re, Us>;
    sendMessage: (message: MessageToSend<At, Ch, Co, Ev, Me, Re, Us>, customMessageData?: Partial<Message<At, Me, Us>>) => Promise<void>;
    setQuotedMessage: React.Dispatch<React.SetStateAction<StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | undefined>>;
    updateMessage: (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>) => void;
};
export declare const ChannelActionContext: React.Context<ChannelActionContextValue<DefaultAttachmentType, DefaultChannelType, import("stream-chat").LiteralStringForUnion, UnknownType, DefaultMessageType, UnknownType, DefaultUserType<import("../types/types").DefaultUserTypeInternal>> | undefined>;
export declare const ChannelActionProvider: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>({ children, value, }: React.PropsWithChildren<{
    value: ChannelActionContextValue<At, Ch, Co, Ev, Me, Re, Us>;
}>) => JSX.Element;
export declare const useChannelActionContext: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(componentName?: string | undefined) => ChannelActionContextValue<At, Ch, Co, Ev, Me, Re, Us>;
/**
 * Typescript currently does not support partial inference, so if ChannelActionContext
 * typing is desired while using the HOC withChannelActionContext, the Props for the
 * wrapped component must be provided as the first generic.
 */
export declare const withChannelActionContext: <P extends UnknownType, At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(Component: React.ComponentType<P>) => React.FC<Omit<P, keyof ChannelActionContextValue<At, Ch, Co, Ev, Me, Re, Us>>>;
//# sourceMappingURL=ChannelActionContext.d.ts.map