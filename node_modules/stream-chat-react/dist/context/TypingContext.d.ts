import React, { PropsWithChildren } from 'react';
import type { ChannelState as StreamChannelState } from 'stream-chat';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType, UnknownType } from '../types/types';
export declare type TypingContextValue<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    typing?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['typing'];
};
export declare const TypingContext: React.Context<TypingContextValue<DefaultAttachmentType, DefaultChannelType, import("stream-chat").LiteralStringForUnion, UnknownType, DefaultMessageType, UnknownType, DefaultUserType<import("../types/types").DefaultUserTypeInternal>> | undefined>;
export declare const TypingProvider: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>({ children, value, }: React.PropsWithChildren<{
    value: TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>;
}>) => JSX.Element;
export declare const useTypingContext: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(componentName?: string | undefined) => TypingContextValue<At, Ch, Co, Ev, Me, Re, Us>;
/**
 * Typescript currently does not support partial inference, so if TypingContext
 * typing is desired while using the HOC withTypingContext, the Props for the
 * wrapped component must be provided as the first generic.
 */
export declare const withTypingContext: <P extends UnknownType, At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends UnknownType = UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends UnknownType = UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../types/types").DefaultUserTypeInternal>>(Component: React.ComponentType<P>) => React.FC<Omit<P, "typing">>;
//# sourceMappingURL=TypingContext.d.ts.map